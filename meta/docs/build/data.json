{
    "project": {
        "name": "Slatwall Documentation",
        "description": "Slatwall is an extremely powerful and robust digital commerce management system.",
        "version": "3.5.022.022",
        "url": "http://www.getslatwall.com/"
    },
    "files": {
        "client/lib/angular/angular-animate.js": {
            "name": "client/lib/angular/angular-animate.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "client/lib/angular/angular-cookies.js": {
            "name": "client/lib/angular/angular-cookies.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "client/lib/angular/angular-loader.js": {
            "name": "client/lib/angular/angular-loader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "client/lib/angular/angular-resource.js": {
            "name": "client/lib/angular/angular-resource.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "client/lib/angular/angular-route.js": {
            "name": "client/lib/angular/angular-route.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "client/lib/angular/angular-sanitize.js": {
            "name": "client/lib/angular/angular-sanitize.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "client/lib/angular/angular-touch.js": {
            "name": "client/lib/angular/angular-touch.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "client/lib/date/date.js": {
            "name": "client/lib/date/date.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "frontend/api/resources/GenericAbstractResource.cfc": {
            "name": "frontend/api/resources/GenericAbstractResource.cfc",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "meta/docs/DocumentationService/BaseDocumentationService.cfc": {
            "name": "meta/docs/DocumentationService/BaseDocumentationService.cfc",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "meta/docs/DocumentationService/ColdFusionDocumentationService.cfc": {
            "name": "meta/docs/DocumentationService/ColdFusionDocumentationService.cfc",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "meta/docs/DocumentationService/DocumentationWebService.cfc": {
            "name": "meta/docs/DocumentationService/DocumentationWebService.cfc",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "meta/docs/DocumentationService/JSDoc.cfc": {
            "name": "meta/docs/DocumentationService/JSDoc.cfc",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "meta/docs/DocumentationService/JavaScriptDocumentationService.cfc": {
            "name": "meta/docs/DocumentationService/JavaScriptDocumentationService.cfc",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "meta/docs/js/controllers/BodyController.js": {
            "name": "meta/docs/js/controllers/BodyController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "meta/docs/js/controllers/NavController.js": {
            "name": "meta/docs/js/controllers/NavController.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "meta/docs/js/lib/marked.js": {
            "name": "meta/docs/js/lib/marked.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "meta/docs/js/lib/textile.js": {
            "name": "meta/docs/js/lib/textile.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "meta/docs/js/routes/DocsMDRouter.js": {
            "name": "meta/docs/js/routes/DocsMDRouter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "meta/tests/functional/admin/DashboardTest.cfc": {
            "name": "meta/tests/functional/admin/DashboardTest.cfc",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "meta/tests/functional/admin/LoginPageTest.cfc": {
            "name": "meta/tests/functional/admin/LoginPageTest.cfc",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "meta/tests/unit/service/DataServiceTest.cfc": {
            "name": "meta/tests/unit/service/DataServiceTest.cfc",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "model/service/HibachiUtilityService.cfc": {
            "name": "model/service/HibachiUtilityService.cfc",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/HibachiAssets/js/jquery-hashchange-1.3.min.js": {
            "name": "org/Hibachi/HibachiAssets/js/jquery-hashchange-1.3.min.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/HibachiAssets/js/jquery-typewatch-2.0.js": {
            "name": "org/Hibachi/HibachiAssets/js/jquery-typewatch-2.0.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js": {
            "name": "org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/HibachiAssets/js/jquery-validate-1.9.0.min.js": {
            "name": "org/Hibachi/HibachiAssets/js/jquery-validate-1.9.0.min.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckeditor/samples/plugins/dialog/assets/my_dialog.js": {
            "name": "org/Hibachi/ckeditor/samples/plugins/dialog/assets/my_dialog.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckeditor/samples/sample.js": {
            "name": "org/Hibachi/ckeditor/samples/sample.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckeditor/build-config.js": {
            "name": "org/Hibachi/ckeditor/build-config.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckeditor/config.js": {
            "name": "org/Hibachi/ckeditor/config.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckeditor/styles.js": {
            "name": "org/Hibachi/ckeditor/styles.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/bg.js": {
            "name": "org/Hibachi/ckfinder/lang/bg.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/cs.js": {
            "name": "org/Hibachi/ckfinder/lang/cs.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/cy.js": {
            "name": "org/Hibachi/ckfinder/lang/cy.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/da.js": {
            "name": "org/Hibachi/ckfinder/lang/da.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/de.js": {
            "name": "org/Hibachi/ckfinder/lang/de.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/el.js": {
            "name": "org/Hibachi/ckfinder/lang/el.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/en.js": {
            "name": "org/Hibachi/ckfinder/lang/en.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/eo.js": {
            "name": "org/Hibachi/ckfinder/lang/eo.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/es-mx.js": {
            "name": "org/Hibachi/ckfinder/lang/es-mx.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/es.js": {
            "name": "org/Hibachi/ckfinder/lang/es.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/et.js": {
            "name": "org/Hibachi/ckfinder/lang/et.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/fa.js": {
            "name": "org/Hibachi/ckfinder/lang/fa.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/fi.js": {
            "name": "org/Hibachi/ckfinder/lang/fi.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/fr.js": {
            "name": "org/Hibachi/ckfinder/lang/fr.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/gu.js": {
            "name": "org/Hibachi/ckfinder/lang/gu.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/he.js": {
            "name": "org/Hibachi/ckfinder/lang/he.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/hi.js": {
            "name": "org/Hibachi/ckfinder/lang/hi.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/hr.js": {
            "name": "org/Hibachi/ckfinder/lang/hr.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/hu.js": {
            "name": "org/Hibachi/ckfinder/lang/hu.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/it.js": {
            "name": "org/Hibachi/ckfinder/lang/it.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/ja.js": {
            "name": "org/Hibachi/ckfinder/lang/ja.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/lt.js": {
            "name": "org/Hibachi/ckfinder/lang/lt.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/lv.js": {
            "name": "org/Hibachi/ckfinder/lang/lv.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/nb.js": {
            "name": "org/Hibachi/ckfinder/lang/nb.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/nl.js": {
            "name": "org/Hibachi/ckfinder/lang/nl.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/nn.js": {
            "name": "org/Hibachi/ckfinder/lang/nn.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/no.js": {
            "name": "org/Hibachi/ckfinder/lang/no.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/pl.js": {
            "name": "org/Hibachi/ckfinder/lang/pl.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/pt-br.js": {
            "name": "org/Hibachi/ckfinder/lang/pt-br.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/ro.js": {
            "name": "org/Hibachi/ckfinder/lang/ro.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/ru.js": {
            "name": "org/Hibachi/ckfinder/lang/ru.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/sk.js": {
            "name": "org/Hibachi/ckfinder/lang/sk.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/sl.js": {
            "name": "org/Hibachi/ckfinder/lang/sl.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/sv.js": {
            "name": "org/Hibachi/ckfinder/lang/sv.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/tr.js": {
            "name": "org/Hibachi/ckfinder/lang/tr.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/vi.js": {
            "name": "org/Hibachi/ckfinder/lang/vi.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/zh-cn.js": {
            "name": "org/Hibachi/ckfinder/lang/zh-cn.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/lang/zh-tw.js": {
            "name": "org/Hibachi/ckfinder/lang/zh-tw.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/plugins/dummy/plugin.js": {
            "name": "org/Hibachi/ckfinder/plugins/dummy/plugin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/ckfinder/plugins/fileeditor/codemirror/js/undo.js": {
            "name": "org/Hibachi/ckfinder/plugins/fileeditor/codemirror/js/undo.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/HibachiService.cfc": {
            "name": "org/Hibachi/HibachiService.cfc",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "org/Hibachi/HibachiUtilityService.cfc": {
            "name": "org/Hibachi/HibachiUtilityService.cfc",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {},
    "classitems": [
        {
            "file": "client/lib/angular/angular-animate.js",
            "line": 1,
            "license": "AngularJS v1.2.0\n(c) 2010-2012 Google, Inc. http://angularjs.org\nLicense: MIT",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-animate.js",
            "line": 10,
            "ngdoc": "overview",
            "name": "ngAnimate",
            "description": "# ngAnimate\n\nThe `ngAnimate` module provides support for JavaScript, CSS3 transition and CSS3 keyframe animation hooks within existing core and custom directives.\n\n{@installModule animate}\n\n<div doc-module-components=\"ngAnimate\"></div>\n\n# Usage\n\nTo see animations in action, all that is required is to define the appropriate CSS classes\nor to register a JavaScript animation via the myModule.animation() function. The directives that support animation automatically are:\n`ngRepeat`, `ngInclude`, `ngIf`, `ngSwitch`, `ngShow`, `ngHide`, `ngView` and `ngClass`. Custom directives can take advantage of animation\nby using the `$animate` service.\n\nBelow is a more detailed breakdown of the supported animation events provided by pre-existing ng directives:\n\n| Directive                                                 | Supported Animations                               |\n|---------------------------------------------------------- |----------------------------------------------------|\n| {@link ng.directive:ngRepeat#usage_animations ngRepeat}         | enter, leave and move                              |\n| {@link ngRoute.directive:ngView#usage_animations ngView}        | enter and leave                                    |\n| {@link ng.directive:ngInclude#usage_animations ngInclude}       | enter and leave                                    |\n| {@link ng.directive:ngSwitch#usage_animations ngSwitch}         | enter and leave                                    |\n| {@link ng.directive:ngIf#usage_animations ngIf}                 | enter and leave                                    |\n| {@link ng.directive:ngClass#usage_animations ngClass}           | add and remove                                     |\n| {@link ng.directive:ngShow#usage_animations ngShow & ngHide}    | add and remove (the ng-hide class value)           |\n\nYou can find out more information about animations upon visiting each directive page.\n\nBelow is an example of how to apply animations to a directive that supports animation hooks:\n\n<pre>\n<style type=\"text/css\">\n.slide.ng-enter, .slide.ng-leave {\n  -webkit-transition:0.5s linear all;\n  transition:0.5s linear all;\n}\n\n.slide.ng-enter { }        /&#42; starting animations for enter &#42;/\n.slide.ng-enter-active { } /&#42; terminal animations for enter &#42;/\n.slide.ng-leave { }        /&#42; starting animations for leave &#42;/\n.slide.ng-leave-active { } /&#42; terminal animations for leave &#42;/\n</style>\n\n<!--\nthe animate service will automatically add .ng-enter and .ng-leave to the element\nto trigger the CSS transition/animations\n-->\n<ANY class=\"slide\" ng-include=\"...\"></ANY>\n</pre>\n\nKeep in mind that if an animation is running, any child elements cannot be animated until the parent element's\nanimation has completed.\n\n<h2>CSS-defined Animations</h2>\nThe animate service will automatically apply two CSS classes to the animated element and these two CSS classes\nare designed to contain the start and end CSS styling. Both CSS transitions and keyframe animations are supported\nand can be used to play along with this naming structure.\n\nThe following code below demonstrates how to perform animations using **CSS transitions** with Angular:\n\n<pre>\n<style type=\"text/css\">\n/&#42;\n The animate class is apart of the element and the ng-enter class\n is attached to the element once the enter animation event is triggered\n&#42;/\n.reveal-animation.ng-enter {\n -webkit-transition: 1s linear all; /&#42; Safari/Chrome &#42;/\n transition: 1s linear all; /&#42; All other modern browsers and IE10+ &#42;/\n\n /&#42; The animation preparation code &#42;/\n opacity: 0;\n}\n\n/&#42;\n Keep in mind that you want to combine both CSS\n classes together to avoid any CSS-specificity\n conflicts\n&#42;/\n.reveal-animation.ng-enter.ng-enter-active {\n /&#42; The animation code itself &#42;/\n opacity: 1;\n}\n</style>\n\n<div class=\"view-container\">\n  <div ng-view class=\"reveal-animation\"></div>\n</div>\n</pre>\n\nThe following code below demonstrates how to perform animations using **CSS animations** with Angular:\n\n<pre>\n<style type=\"text/css\">\n.reveal-animation.ng-enter {\n  -webkit-animation: enter_sequence 1s linear; /&#42; Safari/Chrome &#42;/\n  animation: enter_sequence 1s linear; /&#42; IE10+ and Future Browsers &#42;/\n}\n&#64-webkit-keyframes enter_sequence {\n  from { opacity:0; }\n  to { opacity:1; }\n}\n&#64keyframes enter_sequence {\n  from { opacity:0; }\n  to { opacity:1; }\n}\n</style>\n\n<div class=\"view-container\">\n  <div ng-view class=\"reveal-animation\"></div>\n</div>\n</pre>\n\nBoth CSS3 animations and transitions can be used together and the animate service will figure out the correct duration and delay timing.\n\nUpon DOM mutation, the event class is added first (something like `ng-enter`), then the browser prepares itself to add\nthe active class (in this case `ng-enter-active`) which then triggers the animation. The animation module will automatically\ndetect the CSS code to determine when the animation ends. Once the animation is over then both CSS classes will be\nremoved from the DOM. If a browser does not support CSS transitions or CSS animations then the animation will start and end\nimmediately resulting in a DOM element that is at its final state. This final state is when the DOM element\nhas no CSS transition/animation classes applied to it.\n\n<h3>CSS Staggering Animations</h3>\nA Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a\ncurtain-like effect. The ngAnimate module, as of 1.2.0, supports staggering animations and the stagger effect can be\nperformed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for\nthe animation. The style property expected within the stagger class can either be a **transition-delay** or an\n**animation-delay** property (or both if your animation contains both transitions and keyframe animations).\n\n<pre>\n.my-animation.ng-enter {\n  /&#42; standard transition code &#42;/\n  -webkit-transition: 1s linear all;\n  transition: 1s linear all;\n  opacity:0;\n}\n.my-animation.ng-enter-stagger {\n  /&#42; this will have a 100ms delay between each successive leave animation &#42;/\n  -webkit-transition-delay: 0.1s;\n  transition-delay: 0.1s;\n\n  /&#42; in case the stagger doesn't work then these two values\n   must be set to 0 to avoid an accidental CSS inheritance &#42;/\n  -webkit-transition-duration: 0s;\n  transition-duration: 0s;\n}\n.my-animation.ng-enter.ng-enter-active {\n  /&#42; standard transition styles &#42;/\n  opacity:1;\n}\n</pre>\n\nStaggering animations work by default in ngRepeat (so long as the CSS class is defiend). Outside of ngRepeat, to use staggering animations\non your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this\nare that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation\nwill also be reset if more than 10ms has passed after the last animation has been fired.\n\nThe following code will issue the **ng-leave-stagger** event on the element provided:\n\n<pre>\nvar kids = parent.children();\n\n$animate.leave(kids[0]); //stagger index=0\n$animate.leave(kids[1]); //stagger index=1\n$animate.leave(kids[2]); //stagger index=2\n$animate.leave(kids[3]); //stagger index=3\n$animate.leave(kids[4]); //stagger index=4\n\n$timeout(function() {\n  //stagger has reset itself\n  $animate.leave(kids[5]); //stagger index=0\n  $animate.leave(kids[6]); //stagger index=1\n}, 100, false);\n</pre>\n\nStagger animations are currently only supported within CSS-defined animations.\n\n<h2>JavaScript-defined Animations</h2>\nIn the event that you do not want to use CSS3 transitions or CSS3 animations or if you wish to offer animations on browsers that do not\nyet support CSS transitions/animations, then you can make use of JavaScript animations defined inside of your AngularJS module.\n\n<pre>\n//!annotate=\"YourApp\" Your AngularJS Module|Replace this or ngModule with the module that you used to define your application.\nvar ngModule = angular.module('YourApp', []);\nngModule.animation('.my-crazy-animation', function() {\n  return {\n    enter: function(element, done) {\n      //run the animation here and call done when the animation is complete\n      return function(cancelled) {\n        //this (optional) function will be called when the animation\n        //completes or when the animation is cancelled (the cancelled\n        //flag will be set to true if cancelled).\n      }\n    }\n    leave: function(element, done) { },\n    move: function(element, done) { },\n\n    //animation that can be triggered before the class is added\n    beforeAddClass: function(element, className, done) { },\n\n    //animation that can be triggered after the class is added\n    addClass: function(element, className, done) { },\n\n    //animation that can be triggered before the class is removed\n    beforeRemoveClass: function(element, className, done) { },\n\n    //animation that can be triggered after the class is removed\n    removeClass: function(element, className, done) { }\n  }\n});\n</pre>\n\nJavaScript-defined animations are created with a CSS-like class selector and a collection of events which are set to run\na javascript callback function. When an animation is triggered, $animate will look for a matching animation which fits\nthe element's CSS class attribute value and then run the matching animation event function (if found).\nIn other words, if the CSS classes present on the animated element match any of the JavaScript animations then the callback function\nbe executed. It should be also noted that only simple, single class selectors are allowed (compound class selectors are not supported).\n\nWithin a JavaScript animation, an object containing various event callback animation functions is expected to be returned.\nAs explained above, these callbacks are triggered based on the animation event. Therefore if an enter animation is run,\nand the JavaScript animation is found, then the enter callback will handle that animation (in addition to the CSS keyframe animation\nor transition code that is defined via a stylesheet).",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-animate.js",
            "line": 243,
            "ngdoc": "object",
            "name": "ngAnimate.$animateProvider",
            "description": "The `$animateProvider` allows developers to register JavaScript animation event handlers directly inside of a module.\nWhen an animation is triggered, the $animate service will query the $animate service to find any animations that match\nthe provided name value.\n\nRequires the {@link ngAnimate `ngAnimate`} module to be installed.\n\nPlease visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-animate.js",
            "line": 304,
            "ngdoc": "object",
            "name": "",
            "itemtype": "method",
            "description": "The `$animate` service provides animation detection support while performing DOM operations (enter, leave and move) as well as during addClass and removeClass operations.\nWhen any of these operations are run, the $animate service\nwill examine any JavaScript-defined animations (which are defined by using the $animateProvider provider object)\nas well as any CSS-defined animations against the CSS classes present on the element once the DOM operation is run.\n\nThe `$animate` service is used behind the scenes with pre-existing directives and animation with these directives\nwill work out of the box without any extra configuration.\n\nRequires the {@link ngAnimate `ngAnimate`} module to be installed.\n\nPlease visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-animate.js",
            "line": 324,
            "ngdoc": "function",
            "name": "",
            "methodof": "ngAnimate.$animate",
            "itemtype": "method",
            "description": "Appends the element to the parentElement element that resides in the document and then runs the enter animation. Once\nthe animation is started, the following CSS classes will be present on the element for the duration of the animation:\n\nBelow is a breakdown of each step that occurs during enter animation:\n\n| Animation Step                                                                               | What the element class attribute looks like |\n|----------------------------------------------------------------------------------------------|---------------------------------------------|\n| 1. $animate.enter(...) is called                                                             | class=\"my-animation\"                        |\n| 2. element is inserted into the parentElement element or beside the afterElement element     | class=\"my-animation\"                        |\n| 3. $animate runs any JavaScript-defined animations on the element                            | class=\"my-animation ng-animate\"             |\n| 4. the .ng-enter class is added to the element                                               | class=\"my-animation ng-animate ng-enter\"    |\n| 5. $animate scans the element styles to get the CSS transition/animation duration and delay  | class=\"my-animation ng-animate ng-enter\"    |\n| 6. $animate waits for 10ms (this performs a reflow)                                          | class=\"my-animation ng-animate ng-enter\"    |\n| 7. the .ng-enter-active and .ng-animate-active classes are added (this triggers the CSS transition/animation) | class=\"my-animation ng-animate ng-animate-active ng-enter ng-enter-active\" |\n| 8. $animate waits for X milliseconds for the animation to complete                           | class=\"my-animation ng-animate ng-animate-active ng-enter ng-enter-active\" |\n| 9. The animation ends and all generated CSS classes are removed from the element             | class=\"my-animation\"                        |\n| 10. The doneCallback() callback is fired (if provided)                                       | class=\"my-animation\"                        |",
            "params": [
                {
                    "name": "element",
                    "description": "the element that will be the focus of the enter animation",
                    "type": "JQuery/jqLite element"
                },
                {
                    "name": "parentElement",
                    "description": "the parent element of the element that will be the focus of the enter animation",
                    "type": "JQuery/jqLite element"
                },
                {
                    "name": "afterElement",
                    "description": "the sibling element (which is the previous element) of the element that will be the focus of the enter animation",
                    "type": "JQuery/jqLite element"
                },
                {
                    "name": "doneCallback",
                    "description": "the callback function that will be called once the animation is complete",
                    "type": "Function()="
                }
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-animate.js",
            "line": 362,
            "ngdoc": "function",
            "name": "",
            "methodof": "ngAnimate.$animate",
            "itemtype": "method",
            "description": "Runs the leave animation operation and, upon completion, removes the element from the DOM. Once\nthe animation is started, the following CSS classes will be added for the duration of the animation:\n\nBelow is a breakdown of each step that occurs during enter animation:\n\n| Animation Step                                                                               | What the element class attribute looks like |\n|----------------------------------------------------------------------------------------------|---------------------------------------------|\n| 1. $animate.leave(...) is called                                                             | class=\"my-animation\"                        |\n| 2. $animate runs any JavaScript-defined animations on the element                            | class=\"my-animation ng-animate\"             |\n| 3. the .ng-leave class is added to the element                                               | class=\"my-animation ng-animate ng-leave\"    |\n| 4. $animate scans the element styles to get the CSS transition/animation duration and delay  | class=\"my-animation ng-animate ng-leave\"    |\n| 5. $animate waits for 10ms (this performs a reflow)                                          | class=\"my-animation ng-animate ng-leave\"    |\n| 6. the .ng-leave-active and .ng-animate-active classes is added (this triggers the CSS transition/animation) | class=\"my-animation ng-animate ng-animate-active ng-leave ng-leave-active\" |\n| 7. $animate waits for X milliseconds for the animation to complete                           | class=\"my-animation ng-animate ng-animate-active ng-leave ng-leave-active\" |\n| 8. The animation ends and all generated CSS classes are removed from the element             | class=\"my-animation\"                        |\n| 9. The element is removed from the DOM                                                       | ...                                         |\n| 10. The doneCallback() callback is fired (if provided)                                       | ...                                         |",
            "params": [
                {
                    "name": "element",
                    "description": "the element that will be the focus of the leave animation",
                    "type": "JQuery/jqLite element"
                },
                {
                    "name": "doneCallback",
                    "description": "the callback function that will be called once the animation is complete",
                    "type": "Function()="
                }
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-animate.js",
            "line": 400,
            "ngdoc": "function",
            "name": "",
            "methodof": "ngAnimate.$animate",
            "itemtype": "method",
            "description": "Fires the move DOM operation. Just before the animation starts, the animate service will either append it into the parentElement container or\nadd the element directly after the afterElement element if present. Then the move animation will be run. Once\nthe animation is started, the following CSS classes will be added for the duration of the animation:\n\nBelow is a breakdown of each step that occurs during move animation:\n\n| Animation Step                                                                               | What the element class attribute looks like |\n|----------------------------------------------------------------------------------------------|---------------------------------------------|\n| 1. $animate.move(...) is called                                                              | class=\"my-animation\"                        |\n| 2. element is moved into the parentElement element or beside the afterElement element        | class=\"my-animation\"                        |\n| 3. $animate runs any JavaScript-defined animations on the element                            | class=\"my-animation ng-animate\"             |\n| 4. the .ng-move class is added to the element                                                | class=\"my-animation ng-animate ng-move\"     |\n| 5. $animate scans the element styles to get the CSS transition/animation duration and delay  | class=\"my-animation ng-animate ng-move\"     |\n| 6. $animate waits for 10ms (this performs a reflow)                                          | class=\"my-animation ng-animate ng-move\"     |\n| 7. the .ng-move-active and .ng-animate-active classes is added (this triggers the CSS transition/animation) | class=\"my-animation ng-animate ng-animate-active ng-move ng-move-active\" |\n| 8. $animate waits for X milliseconds for the animation to complete                           | class=\"my-animation ng-animate ng-animate-active ng-move ng-move-active\" |\n| 9. The animation ends and all generated CSS classes are removed from the element             | class=\"my-animation\"                        |\n| 10. The doneCallback() callback is fired (if provided)                                       | class=\"my-animation\"                        |",
            "params": [
                {
                    "name": "element",
                    "description": "the element that will be the focus of the move animation",
                    "type": "JQuery/jqLite element"
                },
                {
                    "name": "parentElement",
                    "description": "the parentElement element of the element that will be the focus of the move animation",
                    "type": "JQuery/jqLite element"
                },
                {
                    "name": "afterElement",
                    "description": "the sibling element (which is the previous element) of the element that will be the focus of the move animation",
                    "type": "JQuery/jqLite element"
                },
                {
                    "name": "doneCallback",
                    "description": "the callback function that will be called once the animation is complete",
                    "type": "Function()="
                }
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-animate.js",
            "line": 440,
            "ngdoc": "function",
            "name": "ngAnimate.$animate#addClass",
            "methodof": "ngAnimate.$animate",
            "description": "Triggers a custom animation event based off the className variable and then attaches the className value to the element as a CSS class.\nUnlike the other animation methods, the animate service will suffix the className value with {@type -add} in order to provide\nthe animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if no CSS transitions\nor keyframes are defined on the -add or base CSS class).\n\nBelow is a breakdown of each step that occurs during addClass animation:\n\n| Animation Step                                                                                 | What the element class attribute looks like |\n|------------------------------------------------------------------------------------------------|---------------------------------------------|\n| 1. $animate.addClass(element, 'super') is called                                               | class=\"my-animation\"                        |\n| 2. $animate runs any JavaScript-defined animations on the element                              | class=\"my-animation ng-animate\"             |\n| 3. the .super-add class are added to the element                                               | class=\"my-animation ng-animate super-add\"   |\n| 4. $animate scans the element styles to get the CSS transition/animation duration and delay    | class=\"my-animation ng-animate super-add\"   |\n| 5. $animate waits for 10ms (this performs a reflow)                                            | class=\"my-animation ng-animate super-add\"   |\n| 6. the .super, .super-add-active and .ng-animate-active classes are added (this triggers the CSS transition/animation) | class=\"my-animation ng-animate ng-animate-active super super-add super-add-active\"          |\n| 7. $animate waits for X milliseconds for the animation to complete                             | class=\"my-animation super-add super-add-active\"  |\n| 8. The animation ends and all generated CSS classes are removed from the element               | class=\"my-animation super\"                  |\n| 9. The super class is kept on the element                                                      | class=\"my-animation super\"                  |\n| 10. The doneCallback() callback is fired (if provided)                                         | class=\"my-animation super\"                  |",
            "params": [
                {
                    "name": "element",
                    "description": "the element that will be animated",
                    "type": "JQuery/jqLite element"
                },
                {
                    "name": "className",
                    "description": "the CSS class that will be added to the element and then animated",
                    "type": "String"
                },
                {
                    "name": "doneCallback",
                    "description": "the callback function that will be called once the animation is complete",
                    "type": "Function()="
                }
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-animate.js",
            "line": 476,
            "ngdoc": "function",
            "name": "ngAnimate.$animate#removeClass",
            "methodof": "ngAnimate.$animate",
            "description": "Triggers a custom animation event based off the className variable and then removes the CSS class provided by the className value\nfrom the element. Unlike the other animation methods, the animate service will suffix the className value with {@type -remove} in\norder to provide the animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if\nno CSS transitions or keyframes are defined on the -remove or base CSS classes).\n\nBelow is a breakdown of each step that occurs during removeClass animation:\n\n| Animation Step                                                                                | What the element class attribute looks like     |\n|-----------------------------------------------------------------------------------------------|---------------------------------------------|\n| 1. $animate.removeClass(element, 'super') is called                                           | class=\"my-animation super\"                  |\n| 2. $animate runs any JavaScript-defined animations on the element                             | class=\"my-animation super ng-animate\"       |\n| 3. the .super-remove class are added to the element                                           | class=\"my-animation super ng-animate super-remove\"|\n| 4. $animate scans the element styles to get the CSS transition/animation duration and delay   | class=\"my-animation super ng-animate super-remove\"   |\n| 5. $animate waits for 10ms (this performs a reflow)                                           | class=\"my-animation super ng-animate super-remove\"   |\n| 6. the .super-remove-active and .ng-animate-active classes are added and .super is removed (this triggers the CSS transition/animation) | class=\"my-animation ng-animate ng-animate-active super-remove super-remove-active\"          |\n| 7. $animate waits for X milliseconds for the animation to complete                            | class=\"my-animation ng-animate ng-animate-active super-remove super-remove-active\"   |\n| 8. The animation ends and all generated CSS classes are removed from the element              | class=\"my-animation\"                        |\n| 9. The doneCallback() callback is fired (if provided)                                         | class=\"my-animation\"                        |",
            "params": [
                {
                    "name": "element",
                    "description": "the element that will be animated",
                    "type": "JQuery/jqLite element"
                },
                {
                    "name": "className",
                    "description": "the CSS class that will be animated and then removed from the element",
                    "type": "String"
                },
                {
                    "name": "doneCallback",
                    "description": "the callback function that will be called once the animation is complete",
                    "type": "Function()="
                }
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-animate.js",
            "line": 512,
            "ngdoc": "function",
            "name": "",
            "methodof": "ngAnimate.$animate",
            "itemtype": "method",
            "params": [
                {
                    "name": "value",
                    "description": "If provided then set the animation on or off.",
                    "type": "Boolean="
                }
            ],
            "return": {
                "description": "Current animation state.",
                "type": "Boolean"
            },
            "description": "Globally enables/disables animations.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-cookies.js",
            "line": 1,
            "license": "AngularJS v1.2.0\n(c) 2010-2012 Google, Inc. http://angularjs.org\nLicense: MIT",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-cookies.js",
            "line": 8,
            "ngdoc": "overview",
            "name": "ngCookies",
            "description": "# ngCookies\n\nThe `ngCookies` module provides a convenient wrapper for reading and writing browser cookies. \n\n{@installModule cookies}\n\n<div doc-module-components=\"ngCookies\"></div>\n\nSee {@link ngCookies.$cookies `$cookies`} and\n{@link ngCookies.$cookieStore `$cookieStore`} for usage.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-cookies.js",
            "line": 27,
            "ngdoc": "object",
            "name": "ngCookies.$cookies",
            "requires": [
                "$browser"
            ],
            "description": "Provides read/write access to browser's cookies.\n\nOnly a simple Object is exposed and by adding or removing properties to/from\nthis object, new cookies are created/deleted at the end of current $eval.\n\nRequires the {@link ngCookies `ngCookies`} module to be installed.",
            "example": [
                "\n  <doc:example>\n    <doc:source>\n      <script>\n        function ExampleController($cookies) {\n          // Retrieving a cookie\n          var favoriteCookie = $cookies.myFavorite;\n          // Setting a cookie\n          $cookies.myFavorite = 'oatmeal';\n        }\n      </script>\n    </doc:source>\n  </doc:example>"
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-cookies.js",
            "line": 83,
            "description": "Pushes all the cookies from the service to the browser and verifies if all cookies were\nstored.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-cookies.js",
            "line": 136,
            "ngdoc": "object",
            "name": "ngCookies.$cookieStore",
            "requires": [
                "$cookies"
            ],
            "description": "Provides a key-value (string-object) storage, that is backed by session cookies.\nObjects put or retrieved from this storage are automatically serialized or\ndeserialized by angular's toJson/fromJson.\n\nRequires the {@link ngCookies `ngCookies`} module to be installed.",
            "example": [
                ""
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-cookies.js",
            "line": 153,
            "ngdoc": "method",
            "name": "ngCookies.$cookieStore#get",
            "methodof": "ngCookies.$cookieStore",
            "description": "Returns the value of given cookie key",
            "params": [
                {
                    "name": "key",
                    "description": "Id to use for lookup.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Deserialized cookie value.",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-cookies.js",
            "line": 169,
            "ngdoc": "method",
            "name": "ngCookies.$cookieStore#put",
            "methodof": "ngCookies.$cookieStore",
            "description": "Sets a value for given cookie key",
            "params": [
                {
                    "name": "key",
                    "description": "Id for the `value`.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Value to be stored.",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-cookies.js",
            "line": 184,
            "ngdoc": "method",
            "name": "ngCookies.$cookieStore#remove",
            "methodof": "ngCookies.$cookieStore",
            "description": "Remove given cookie",
            "params": [
                {
                    "name": "key",
                    "description": "Id of the key-value pair to delete.",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 1,
            "license": "AngularJS v1.2.0\n(c) 2010-2012 Google, Inc. http://angularjs.org\nLicense: MIT",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 9,
            "ngdoc": "interface",
            "name": "angular.Module",
            "description": "Interface for configuring angular {@link angular.module modules}.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 26,
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 29,
            "ngdoc": "function",
            "name": "angular.module",
            "description": "The `angular.module` is a global place for creating, registering and retrieving Angular\nmodules.\nAll modules (angular core or 3rd party) that should be available to an application must be\nregistered using this mechanism.\n\nWhen passed two or more arguments, a new module is created.  If passed only one argument, an\nexisting module (the name passed as the first argument to `module`) is retrieved.\n\n\n# Module\n\nA module is a collection of services, directives, filters, and configuration information.\n`angular.module` is used to configure the {@link AUTO.$injector $injector}.\n\n<pre>\n// Create a new module\nvar myModule = angular.module('myModule', []);\n\n// register a new service\nmyModule.value('appName', 'MyCoolApp');\n\n// configure existing services inside initialization blocks.\nmyModule.config(function($locationProvider) {'use strict';\n  // Configure existing providers\n  $locationProvider.hashPrefix('!');\n});\n</pre>\n\nThen you can create an injector and load your modules like this:\n\n<pre>\nvar injector = angular.injector(['ng', 'MyModule'])\n</pre>\n\nHowever it's more likely that you'll just use\n{@link ng.directive:ngApp ngApp} or\n{@link angular.bootstrap} to simplify this process for you.",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the module to create or retrieve.",
                    "type": "!string"
                },
                {
                    "name": "requires",
                    "description": "If specified then new module is being created. If\n       unspecified then the the module is being retrieved for further configuration.",
                    "type": "Array.<string>="
                },
                {
                    "name": "configFn",
                    "description": "Optional configuration function for the module. Same as\n       {@link angular.Module#methods_config Module#config()}.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "new module with the {@link angular.Module} api.",
                "type": "Module"
            },
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 91,
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 94,
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 99,
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 105,
            "ngdoc": "property",
            "name": "angular.Module#requires",
            "propertyof": "angular.Module",
            "return": {
                "description": "List of module names which must be loaded before this module.",
                "type": "Array.<string>"
            },
            "description": "Holds the list of modules which the injector will load before the current module is\nloaded.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 116,
            "ngdoc": "property",
            "name": "angular.Module#name",
            "propertyof": "angular.Module",
            "return": {
                "description": "Name of the module.",
                "type": "String"
            },
            "description": "",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 126,
            "ngdoc": "method",
            "name": "angular.Module#provider",
            "methodof": "angular.Module",
            "params": [
                {
                    "name": "name",
                    "description": "service name",
                    "type": "String"
                },
                {
                    "name": "providerType",
                    "description": "Construction function for creating new instance of the\n                               service.",
                    "type": "Function"
                }
            ],
            "description": "See {@link AUTO.$provide#provider $provide.provider()}.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 138,
            "ngdoc": "method",
            "name": "angular.Module#factory",
            "methodof": "angular.Module",
            "params": [
                {
                    "name": "name",
                    "description": "service name",
                    "type": "String"
                },
                {
                    "name": "providerFunction",
                    "description": "Function for creating new instance of the service.",
                    "type": "Function"
                }
            ],
            "description": "See {@link AUTO.$provide#factory $provide.factory()}.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 149,
            "ngdoc": "method",
            "name": "angular.Module#service",
            "methodof": "angular.Module",
            "params": [
                {
                    "name": "name",
                    "description": "service name",
                    "type": "String"
                },
                {
                    "name": "constructor",
                    "description": "A constructor function that will be instantiated.",
                    "type": "Function"
                }
            ],
            "description": "See {@link AUTO.$provide#service $provide.service()}.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 160,
            "ngdoc": "method",
            "name": "angular.Module#value",
            "methodof": "angular.Module",
            "params": [
                {
                    "name": "name",
                    "description": "service name",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "Service instance object.",
                    "type": "*"
                }
            ],
            "description": "See {@link AUTO.$provide#value $provide.value()}.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 171,
            "ngdoc": "method",
            "name": "angular.Module#constant",
            "methodof": "angular.Module",
            "params": [
                {
                    "name": "name",
                    "description": "constant name",
                    "type": "String"
                },
                {
                    "name": "object",
                    "description": "Constant value.",
                    "type": "*"
                }
            ],
            "description": "Because the constant are fixed, they get applied before other provide methods.\nSee {@link AUTO.$provide#constant $provide.constant()}.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 183,
            "ngdoc": "method",
            "name": "angular.Module#animation",
            "methodof": "angular.Module",
            "params": [
                {
                    "name": "name",
                    "description": "animation name",
                    "type": "String"
                },
                {
                    "name": "animationFactory",
                    "description": "Factory function for creating new instance of an\n                                   animation.",
                    "type": "Function"
                }
            ],
            "description": "**NOTE**: animations take effect only if the **ngAnimate** module is loaded.\n\n\nDefines an animation hook that can be later used with\n{@link ngAnimate.$animate $animate} service and directives that use this service.\n\n<pre>\nmodule.animation('.animation-name', function($inject1, $inject2) {\n  return {\n    eventName : function(element, done) {\n      //code to run the animation\n      //once complete, then run done()\n      return function cancellationFunction(element) {\n        //code to cancel the animation\n      }\n    }\n  }\n})\n</pre>\n\nSee {@link ngAnimate.$animateProvider#register $animateProvider.register()} and\n{@link ngAnimate ngAnimate module} for more information.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 217,
            "ngdoc": "method",
            "name": "angular.Module#filter",
            "methodof": "angular.Module",
            "params": [
                {
                    "name": "name",
                    "description": "Filter name.",
                    "type": "String"
                },
                {
                    "name": "filterFactory",
                    "description": "Factory function for creating new instance of filter.",
                    "type": "Function"
                }
            ],
            "description": "See {@link ng.$filterProvider#register $filterProvider.register()}.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 228,
            "ngdoc": "method",
            "name": "angular.Module#controller",
            "methodof": "angular.Module",
            "params": [
                {
                    "name": "name",
                    "description": "Controller name, or an object map of controllers where the\n   keys are the names and the values are the constructors.",
                    "type": "String|Object"
                },
                {
                    "name": "constructor",
                    "description": "Controller constructor function.",
                    "type": "Function"
                }
            ],
            "description": "See {@link ng.$controllerProvider#register $controllerProvider.register()}.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 240,
            "ngdoc": "method",
            "name": "angular.Module#directive",
            "methodof": "angular.Module",
            "params": [
                {
                    "name": "name",
                    "description": "Directive name, or an object map of directives where the\n   keys are the names and the values are the factories.",
                    "type": "String|Object"
                },
                {
                    "name": "directiveFactory",
                    "description": "Factory function for creating new instance of\ndirectives.",
                    "type": "Function"
                }
            ],
            "description": "See {@link ng.$compileProvider#methods_directive $compileProvider.directive()}.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 253,
            "ngdoc": "method",
            "name": "angular.Module#config",
            "methodof": "angular.Module",
            "params": [
                {
                    "name": "configFn",
                    "description": "Execute this function on module load. Useful for service\n   configuration.",
                    "type": "Function"
                }
            ],
            "description": "Use this method to register work which needs to be performed on module loading.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 264,
            "ngdoc": "method",
            "name": "angular.Module#run",
            "methodof": "angular.Module",
            "params": [
                {
                    "name": "initializationFn",
                    "description": "Execute this function after injector creation.\n   Useful for application initialization.",
                    "type": "Function"
                }
            ],
            "description": "Use this method to register work which should be performed when the injector is done\nloading all modules.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 286,
            "params": [
                {
                    "name": "provider",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "method",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "insertMethod",
                    "description": "",
                    "type": "String="
                }
            ],
            "return": {
                "description": "",
                "type": "angular.Module"
            },
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-loader.js",
            "line": 306,
            "description": "Closure compiler type information",
            "typedef": "{ {\n  requires: !Array.<string>,\n  invokeQueue: !Array.<Array.<*>>,\n\n  service: function(string, Function):angular.Module,\n  factory: function(string, Function):angular.Module,\n  value: function(string, *):angular.Module,\n\n  filter: function(string, Function):angular.Module,\n\n  init: function(Function):angular.Module\n} }",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-resource.js",
            "line": 1,
            "license": "AngularJS v1.2.0\n(c) 2010-2012 Google, Inc. http://angularjs.org\nLicense: MIT",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-resource.js",
            "line": 10,
            "ngdoc": "overview",
            "name": "ngResource",
            "description": "# ngResource\n\nThe `ngResource` module provides interaction support with RESTful services\nvia the $resource service.\n\n{@installModule resource}\n\n<div doc-module-components=\"ngResource\"></div>\n\nSee {@link ngResource.$resource `$resource`} for usage.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-resource.js",
            "line": 27,
            "ngdoc": "object",
            "name": "ngResource.$resource",
            "requires": [
                "$http"
            ],
            "description": "A factory which creates a resource object that lets you interact with\n[RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.\n\nThe returned resource object has action methods which provide high-level behaviors without\nthe need to interact with the low level {@link ng.$http $http} service.\n\nRequires the {@link ngResource `ngResource`} module to be installed.",
            "params": [
                {
                    "name": "url",
                    "description": "A parametrized URL template with parameters prefixed by `:` as in\n  `/user/:username`. If you are using a URL with a port number (e.g.\n  `http://example.com:8080/api`), it will be respected.\n\n  If you are using a url with a suffix, just add the suffix, like this:\n  `$resource('http://example.com/resource.json')` or `$resource('http://example.com/:id.json')`\n  or even `$resource('http://example.com/resource/:resource_id.:format')`\n  If the parameter before the suffix is empty, :resource_id in this case, then the `/.` will be\n  collapsed down to a single `.`.  If you need this sequence to appear and not collapse then you\n  can escape it with `/\\.`.",
                    "type": "String"
                },
                {
                    "name": "paramDefaults",
                    "description": "Default values for `url` parameters. These can be overridden in\n  `actions` methods. If any of the parameter value is a function, it will be executed every time\n  when a param value needs to be obtained for a request (unless the param was overridden).\n\n  Each key value in the parameter object is first bound to url template if present and then any\n  excess keys are appended to the url search query after the `?`.\n\n  Given a template `/path/:verb` and parameter `{verb:'greet', salutation:'Hello'}` results in\n  URL `/path/greet?salutation=Hello`.\n\n  If the parameter value is prefixed with `@` then the value of that parameter is extracted from\n  the data object (useful for non-GET operations).",
                    "type": "Object="
                },
                {
                    "name": "actions",
                    "description": "Hash with declaration of custom action that should extend the\n  default set of resource actions. The declaration should be created in the format of {@link\n  ng.$http#usage_parameters $http.config}:\n\n      {action1: {method:?, params:?, isArray:?, headers:?, ...},\n       action2: {method:?, params:?, isArray:?, headers:?, ...},\n       ...}\n\n  Where:\n\n  - **`action`** – {string} – The name of action. This name becomes the name of the method on\n    your resource object.\n  - **`method`** – {string} – HTTP request method. Valid methods are: `GET`, `POST`, `PUT`,\n    `DELETE`, and `JSONP`.\n  - **`params`** – {Object=} – Optional set of pre-bound parameters for this action. If any of\n    the parameter value is a function, it will be executed every time when a param value needs to\n    be obtained for a request (unless the param was overridden).\n  - **`url`** – {string} – action specific `url` override. The url templating is supported just\n    like for the resource-level urls.\n  - **`isArray`** – {boolean=} – If true then the returned object for this action is an array,\n    see `returns` section.\n  - **`transformRequest`** –\n    `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n    transform function or an array of such functions. The transform function takes the http\n    request body and headers and returns its transformed (typically serialized) version.\n  - **`transformResponse`** –\n    `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n    transform function or an array of such functions. The transform function takes the http\n    response body and headers and returns its transformed (typically deserialized) version.\n  - **`cache`** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the\n    GET request, otherwise if a cache instance built with\n    {@link ng.$cacheFactory $cacheFactory}, this cache will be used for\n    caching.\n  - **`timeout`** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise} that\n    should abort the request when resolved.\n  - **`withCredentials`** - `{boolean}` - whether to set the `withCredentials` flag on the\n    XHR object. See {@link https://developer.mozilla.org/en/http_access_control#section_5\n    requests with credentials} for more information.\n  - **`responseType`** - `{string}` - see {@link\n    https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType requestType}.\n  - **`interceptor`** - `{Object=}` - The interceptor object has two optional methods -\n    `response` and `responseError`. Both `response` and `responseError` interceptors get called\n    with `http response` object. See {@link ng.$http $http interceptors}.",
                    "type": "Object.<Object>="
                }
            ],
            "return": {
                "description": "A resource \"class\" object with methods for the default set of resource actions\n  optionally extended with custom `actions`. The default set contains these actions:\n\n      { 'get':    {method:'GET'},\n        'save':   {method:'POST'},\n        'query':  {method:'GET', isArray:true},\n        'remove': {method:'DELETE'},\n        'delete': {method:'DELETE'} };\n\n  Calling these methods invoke an {@link ng.$http} with the specified http method,\n  destination and parameters. When the data is returned from the server then the object is an\n  instance of the resource class. The actions `save`, `remove` and `delete` are available on it\n  as  methods with the `$` prefix. This allows you to easily perform CRUD operations (create,\n  read, update, delete) on server-side data like this:\n  <pre>\n       var User = $resource('/user/:userId', {userId:'@id'});\n       var user = User.get({userId:123}, function() {\n         user.abc = true;\n         user.$save();\n       });\n    </pre>\n\n  It is important to realize that invoking a $resource object method immediately returns an\n  empty reference (object or array depending on `isArray`). Once the data is returned from the\n  server the existing reference is populated with the actual data. This is a useful trick since\n  usually the resource is assigned to a model which is then rendered by the view. Having an empty\n  object results in no rendering, once the data arrives from the server then the object is\n  populated with the data and the view automatically re-renders itself showing the new data. This\n  means that in most case one never has to write a callback function for the action methods.\n\n  The action methods on the class object or instance object can be invoked with the following\n  parameters:\n\n  - HTTP GET \"class\" actions: `Resource.action([parameters], [success], [error])`\n  - non-GET \"class\" actions: `Resource.action([parameters], postData, [success], [error])`\n  - non-GET instance actions:  `instance.$action([parameters], [success], [error])`\n\n  Success callback is called with (value, responseHeaders) arguments. Error callback is called\n  with (httpResponse) argument.\n\n  Class actions return empty instance (with additional properties below).\n  Instance actions return promise of the action.\n\n  The Resource instances and collection have these additional properties:\n\n  - `$promise`: the {@link ng.$q promise} of the original server interaction that created this\n    instance or collection.\n\n    On success, the promise is resolved with the same resource instance or collection object,\n    updated with data from server. This makes it easy to use in\n    {@link ngRoute.$routeProvider resolve section of $routeProvider.when()} to defer view\n    rendering until the resource(s) are loaded.\n\n    On failure, the promise is resolved with the {@link ng.$http http response} object, without\n    the `resource` property.\n\n  - `$resolved`: `true` after first server interaction is completed (either with success or\n     rejection), `false` before that. Knowing if the Resource has been resolved is useful in\n     data-binding.",
                "type": "Object"
            },
            "example": [
                "\n\n# Credit card resource\n\n<pre>\n    // Define CreditCard class\n    var CreditCard = $resource('/user/:userId/card/:cardId',\n     {userId:123, cardId:'@id'}, {\n      charge: {method:'POST', params:{charge:true}}\n     });\n\n    // We can retrieve a collection from the server\n    var cards = CreditCard.query(function() {\n      // GET: /user/123/card\n      // server returns: [ {id:456, number:'1234', name:'Smith'} ];\n\n      var card = cards[0];\n      // each item is an instance of CreditCard\n      expect(card instanceof CreditCard).toEqual(true);\n      card.name = \"J. Smith\";\n      // non GET methods are mapped onto the instances\n      card.$save();\n      // POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}\n      // server returns: {id:456, number:'1234', name: 'J. Smith'};\n\n      // our custom method is mapped as well.\n      card.$charge({amount:9.99});\n      // POST: /user/123/card/456?amount=9.99&charge=true {id:456, number:'1234', name:'J. Smith'}\n    });\n\n    // we can create an instance as well\n    var newCard = new CreditCard({number:'0123'});\n    newCard.name = \"Mike Smith\";\n    newCard.$save();\n    // POST: /user/123/card {number:'0123', name:'Mike Smith'}\n    // server returns: {id:789, number:'01234', name: 'Mike Smith'};\n    expect(newCard.id).toEqual(789);\n</pre>\n\nThe object returned from this function execution is a resource \"class\" which has \"static\" method\nfor each action in the definition.\n\nCalling these methods invoke `$http` on the `url` template with the given `method`, `params` and\n`headers`.\nWhen the data is returned from the server then the object is an instance of the resource type and\nall of the non-GET methods are available with `$` prefix. This allows you to easily support CRUD\noperations (create, read, update, delete) on server-side data.\n\n  <pre>\n    var User = $resource('/user/:userId', {userId:'@id'});\n    var user = User.get({userId:123}, function() {\n      user.abc = true;\n      user.$save();\n    });\n  </pre>\n\nIt's worth noting that the success callback for `get`, `query` and other methods gets passed\nin the response that came from the server as well as $http header getter function, so one\ncould rewrite the above example and get access to http headers as:\n\n  <pre>\n    var User = $resource('/user/:userId', {userId:'@id'});\n    User.get({userId:123}, function(u, getResponseHeaders){\n      u.abc = true;\n      u.$save(function(u, putResponseHeaders) {\n        //u => saved user object\n        //putResponseHeaders => $http header getter\n      });\n    });\n  </pre>\n\n# Buzz client\n\n  Let's look at what a buzz client created with the `$resource` service looks like:\n   <doc:example>\n   <doc:source jsfiddle=\"false\">\n   <script>\n    function BuzzController($resource) {\n      this.userId = 'googlebuzz';\n      this.Activity = $resource(\n        'https://www.googleapis.com/buzz/v1/activities/:userId/:visibility/:activityId/:comments',\n        {alt:'json', callback:'JSON_CALLBACK'},\n        {\n          get:{method:'JSONP', params:{visibility:'@self'}},\n          replies: {method:'JSONP', params:{visibility:'@self', comments:'@comments'}}\n        }\n      );\n    }\n\n    BuzzController.prototype = {\n      fetch: function() {\n        this.activities = this.Activity.get({userId:this.userId});\n      },\n      expandReplies: function(activity) {\n        activity.replies = this.Activity.replies({userId:this.userId, activityId:activity.id});\n      }\n    };\n    BuzzController.$inject = ['$resource'];\n   </script>\n\n   <div ng-controller=\"BuzzController\">\n    <input ng-model=\"userId\"/>\n    <button ng-click=\"fetch()\">fetch</button>\n    <hr/>\n    <div ng-repeat=\"item in activities.data.items\">\n      <h1 style=\"font-size: 15px;\">\n        <img src=\"{{item.actor.thumbnailUrl}}\" style=\"max-height:30px;max-width:30px;\"/>\n        <a href=\"{{item.actor.profileUrl}}\">{{item.actor.name}}</a>\n        <a href ng-click=\"expandReplies(item)\" style=\"float: right;\">Expand replies:\n          {{item.links.replies[0].count}}</a>\n      </h1>\n      {{item.object.content | html}}\n      <div ng-repeat=\"reply in item.replies.data.items\" style=\"margin-left: 20px;\">\n        <img src=\"{{reply.actor.thumbnailUrl}}\" style=\"max-height:30px;max-width:30px;\"/>\n        <a href=\"{{reply.actor.profileUrl}}\">{{reply.actor.name}}</a>: {{reply.content | html}}\n      </div>\n    </div>\n   </div>\n   </doc:source>\n   <doc:scenario>\n   </doc:scenario>\n   </doc:example>"
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-resource.js",
            "line": 310,
            "description": "We need our custom method because encodeURIComponent is too aggressive and doesn't follow\nhttp://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path\nsegments:\n   segment       = *pchar\n   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   pct-encoded   = \"%\" HEXDIG HEXDIG\n   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                    / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-resource.js",
            "line": 329,
            "description": "This method is intended for encoding *key* or *value* parts of query component. We need a\ncustom method because encodeURIComponent is too aggressive and encodes stuff that doesn't\nhave to be encoded per http://tools.ietf.org/html/rfc3986:\n   query       = *( pchar / \"/\" / \"?\" )\n   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   pct-encoded   = \"%\" HEXDIG HEXDIG\n   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                    / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 1,
            "license": "AngularJS v1.2.0 \n(c) 2010-2012 Google, Inc. http://angularjs.org\nLicense: MIT",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 8,
            "ngdoc": "overview",
            "name": "ngRoute",
            "description": "# ngRoute\n\nThe `ngRoute` module provides routing and deeplinking services and directives for angular apps.\n\n{@installModule route}\n\n<div doc-module-components=\"ngRoute\"></div>",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 25,
            "ngdoc": "object",
            "name": "",
            "itemtype": "method",
            "description": "Used for configuring routes. See {@link ngRoute.$route $route} for an example.\n\nRequires the {@link ngRoute `ngRoute`} module to be installed.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 43,
            "ngdoc": "method",
            "name": "ngRoute.$routeProvider#when",
            "methodof": "ngRoute.$routeProvider",
            "params": [
                {
                    "name": "path",
                    "description": "Route path (matched against `$location.path`). If `$location.path`\n   contains redundant trailing slash or is missing one, the route will still match and the\n   `$location.path` will be updated to add or drop the trailing slash to exactly match the\n   route definition.\n\n     * `path` can contain named groups starting with a colon (`:name`). All characters up\n       to the next slash are matched and stored in `$routeParams` under the given `name`\n       when the route matches.\n     * `path` can contain named groups starting with a colon and ending with a star (`:name*`).\n       All characters are eagerly stored in `$routeParams` under the given `name`\n       when the route matches.\n     * `path` can contain optional named groups with a question mark (`:name?`).\n\n   For example, routes like `/color/:color/largecode/:largecode*\\/edit` will match\n   `/color/brown/largecode/code/with/slashs/edit` and extract:\n\n     * `color: brown`\n     * `largecode: code/with/slashs`.",
                    "type": "String"
                },
                {
                    "name": "route",
                    "description": "Mapping information to be assigned to `$route.current` on route\n   match.\n\n   Object properties:\n\n   - `controller` – `{(string|function()=}` – Controller fn that should be associated with\n     newly created scope or the name of a {@link angular.Module#controller registered\n     controller} if passed as a string.\n   - `controllerAs` – `{string=}` – A controller alias name. If present the controller will be\n     published to scope under the `controllerAs` name.\n   - `template` – `{string=|function()=}` – html template as a string or a function that\n     returns an html template as a string which should be used by {@link\n     ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.\n     This property takes precedence over `templateUrl`.\n\n     If `template` is a function, it will be called with the following parameters:\n\n     - `{Array.<Object>}` - route parameters extracted from the current\n       `$location.path()` by applying the current route\n\n   - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html\n     template that should be used by {@link ngRoute.directive:ngView ngView}.\n\n     If `templateUrl` is a function, it will be called with the following parameters:\n\n     - `{Array.<Object>}` - route parameters extracted from the current\n       `$location.path()` by applying the current route\n\n   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n     be injected into the controller. If any of these dependencies are promises, the router\n     will wait for them all to be resolved or one to be rejected before the controller is\n     instantiated.\n     If all the promises are resolved successfully, the values of the resolved promises are\n     injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is\n     fired. If any of the promises are rejected the\n     {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired. The map object\n     is:\n\n     - `key` – `{string}`: a name of a dependency to be injected into the controller.\n     - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n       Otherwise if function, then it is {@link api/AUTO.$injector#invoke injected}\n       and the return value is treated as the dependency. If the result is a promise, it is\n       resolved before its value is injected into the controller. Be aware that\n       `ngRoute.$routeParams` will still refer to the previous route within these resolve\n       functions.  Use `$route.current.params` to access the new route parameters, instead.\n\n   - `redirectTo` – {(string|function())=} – value to update\n     {@link ng.$location $location} path with and trigger route redirection.\n\n     If `redirectTo` is a function, it will be called with the following parameters:\n\n     - `{Object.<string>}` - route parameters extracted from the current\n       `$location.path()` by applying the current route templateUrl.\n     - `{string}` - current `$location.path()`\n     - `{Object}` - current `$location.search()`\n\n     The custom `redirectTo` function is expected to return a string which will be used\n     to update `$location.path()` and `$location.search()`.\n\n   - `[reloadOnSearch=true]` - {boolean=} - reload route when only `$location.search()`\n     or `$location.hash()` changes.\n\n     If the option is set to `false` and url in the browser changes, then\n     `$routeUpdate` event is broadcasted on the root scope.\n\n   - `[caseInsensitiveMatch=false]` - {boolean=} - match routes without being case sensitive\n\n     If the option is set to `true`, then the particular route can be matched without being\n     case sensitive",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "self",
                "type": "Object"
            },
            "description": "Adds a new route definition to the `$route` service.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 165,
            "params": [
                {
                    "name": "path",
                    "description": "path",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "?Object"
            },
            "description": "Normalizes the given path, returning a regular expression\nand the original path.\n\nInspired by pathRexp in visionmedia/express/lib/utils.js.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 206,
            "ngdoc": "method",
            "name": "ngRoute.$routeProvider#otherwise",
            "methodof": "ngRoute.$routeProvider",
            "description": "Sets route definition that will be used on route change when no other route definition\nis matched.",
            "params": [
                {
                    "name": "params",
                    "description": "Mapping information to be assigned to `$route.current`.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "self",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 234,
            "ngdoc": "object",
            "name": "current Reference to the current route definition.!~YUIDOC_LINE~!The route definition contains:!~YUIDOC_LINE~!!~YUIDOC_LINE~!  - `controller`: The controller constructor as define in route definition.!~YUIDOC_LINE~!  - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for!~YUIDOC_LINE~!    controller instantiation. The `locals` contain!~YUIDOC_LINE~!    the resolved values of the `resolve` map. Additionally the `locals` also contain:!~YUIDOC_LINE~!!~YUIDOC_LINE~!    - `$scope` - The current route scope.!~YUIDOC_LINE~!    - `$template` - The current route template HTML.",
            "requires": [
                "$location",
                "$routeParams"
            ],
            "itemtype": "property",
            "type": "Object",
            "description": "`$route` is used for deep-linking URLs to controllers and views (HTML partials).\nIt watches `$location.url()` and tries to map the path to an existing route definition.\n\nRequires the {@link ngRoute `ngRoute`} module to be installed.\n\nYou can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.\n\nThe `$route` service is typically used in conjunction with the\n{@link ngRoute.directive:ngView `ngView`} directive and the\n{@link ngRoute.$routeParams `$routeParams`} service.",
            "example": [
                "\n      This example shows how changing the URL hash causes the `$route` to match a route against the\n      URL, and the `ngView` pulls in the partial.\n\n      Note that this example is using {@link ng.directive:script inlined templates}\n      to get it working on jsfiddle as well.\n\n    <example module=\"ngViewExample\" deps=\"angular-route.js\">\n      <file name=\"index.html\">\n        <div ng-controller=\"MainCntl\">\n          Choose:\n          <a href=\"Book/Moby\">Moby</a> |\n          <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n          <a href=\"Book/Gatsby\">Gatsby</a> |\n          <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n          <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n\n          <div ng-view></div>\n          <hr />\n\n          <pre>$location.path() = {{$location.path()}}</pre>\n          <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>\n          <pre>$route.current.params = {{$route.current.params}}</pre>\n          <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>\n          <pre>$routeParams = {{$routeParams}}</pre>\n        </div>\n      </file>\n\n      <file name=\"book.html\">\n        controller: {{name}}<br />\n        Book Id: {{params.bookId}}<br />\n      </file>\n\n      <file name=\"chapter.html\">\n        controller: {{name}}<br />\n        Book Id: {{params.bookId}}<br />\n        Chapter Id: {{params.chapterId}}\n      </file>\n\n      <file name=\"script.js\">\n        angular.module('ngViewExample', ['ngRoute'])\n\n        .config(function($routeProvider, $locationProvider) {\n          $routeProvider.when('/Book/:bookId', {\n            templateUrl: 'book.html',\n            controller: BookCntl,\n            resolve: {\n              // I will cause a 1 second delay\n              delay: function($q, $timeout) {\n                var delay = $q.defer();\n                $timeout(delay.resolve, 1000);\n                return delay.promise;\n              }\n            }\n          });\n          $routeProvider.when('/Book/:bookId/ch/:chapterId', {\n            templateUrl: 'chapter.html',\n            controller: ChapterCntl\n          });\n\n          // configure html5 to get links working on jsfiddle\n          $locationProvider.html5Mode(true);\n        });\n\n        function MainCntl($scope, $route, $routeParams, $location) {\n          $scope.$route = $route;\n          $scope.$location = $location;\n          $scope.$routeParams = $routeParams;\n        }\n\n        function BookCntl($scope, $routeParams) {\n          $scope.name = \"BookCntl\";\n          $scope.params = $routeParams;\n        }\n\n        function ChapterCntl($scope, $routeParams) {\n          $scope.name = \"ChapterCntl\";\n          $scope.params = $routeParams;\n        }\n      </file>\n\n      <file name=\"scenario.js\">\n        it('should load and compile correct template', function() {\n          element('a:contains(\"Moby: Ch1\")').click();\n          var content = element('.doc-example-live [ng-view]').text();\n          expect(content).toMatch(/controller\\: ChapterCntl/);\n          expect(content).toMatch(/Book Id\\: Moby/);\n          expect(content).toMatch(/Chapter Id\\: 1/);\n\n          element('a:contains(\"Scarlet\")').click();\n          sleep(2); // promises are not part of scenario waiting\n          content = element('.doc-example-live [ng-view]').text();\n          expect(content).toMatch(/controller\\: BookCntl/);\n          expect(content).toMatch(/Book Id\\: Scarlet/);\n        });\n      </file>\n    </example>"
            ],
            "class": "",
            "subprops": [
                {
                    "name": "routes",
                    "description": "Array of all configured routes.",
                    "type": "Array.<Object>"
                }
            ]
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 364,
            "ngdoc": "event",
            "name": "ngRoute.$route#$routeChangeStart",
            "eventof": "ngRoute.$route",
            "eventtype": "broadcast on root scope",
            "description": "Broadcasted before a route change. At this  point the route services starts\nresolving all of the dependencies needed for the route change to occurs.\nTypically this involves fetching the view template as well as any dependencies\ndefined in `resolve` route property. Once  all of the dependencies are resolved\n`$routeChangeSuccess` is fired.",
            "params": [
                {
                    "name": "angularEvent",
                    "description": "Synthetic event object.",
                    "type": "Object"
                },
                {
                    "name": "next",
                    "description": "Future route information.",
                    "type": "Route"
                },
                {
                    "name": "current",
                    "description": "Current route information.",
                    "type": "Route"
                }
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 381,
            "ngdoc": "event",
            "name": "ngRoute.$route#$routeChangeSuccess",
            "eventof": "ngRoute.$route",
            "eventtype": "broadcast on root scope",
            "description": "Broadcasted after a route dependencies are resolved.\n{@link ngRoute.directive:ngView ngView} listens for the directive\nto instantiate the controller and render the view.",
            "params": [
                {
                    "name": "angularEvent",
                    "description": "Synthetic event object.",
                    "type": "Object"
                },
                {
                    "name": "current",
                    "description": "Current route information.",
                    "type": "Route"
                },
                {
                    "name": "previous",
                    "description": "Previous route information, or undefined if current is\nfirst route entered.",
                    "type": "Route|Undefined"
                }
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 397,
            "ngdoc": "event",
            "name": "ngRoute.$route#$routeChangeError",
            "eventof": "ngRoute.$route",
            "eventtype": "broadcast on root scope",
            "description": "Broadcasted if any of the resolve promises are rejected.",
            "params": [
                {
                    "name": "angularEvent",
                    "description": "Synthetic event object",
                    "type": "Object"
                },
                {
                    "name": "current",
                    "description": "Current route information.",
                    "type": "Route"
                },
                {
                    "name": "previous",
                    "description": "Previous route information.",
                    "type": "Route"
                },
                {
                    "name": "rejection",
                    "description": "Rejection of the promise. Usually the error of the failed promise.",
                    "type": "Route"
                }
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 411,
            "ngdoc": "event",
            "name": "ngRoute.$route#$routeUpdate",
            "eventof": "ngRoute.$route",
            "eventtype": "broadcast on root scope",
            "description": "The `reloadOnSearch` property has been set to false, and we are reusing the same\ninstance of the Controller.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 426,
            "ngdoc": "method",
            "name": "ngRoute.$route#reload",
            "methodof": "ngRoute.$route",
            "description": "Causes `$route` service to reload the current route even if\n{@link ng.$location $location} hasn't changed.\n\nAs a result of that, {@link ngRoute.directive:ngView ngView}\ncreates new scope, reinstantiates the controller.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 450,
            "params": [
                {
                    "name": "on",
                    "description": "current url",
                    "type": "String"
                },
                {
                    "name": "route",
                    "description": "route regexp to match the url against",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "?Object"
            },
            "description": "Check if the route matches the current url.\n\nInspired by match in\nvisionmedia/express/lib/router/router.js.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 560,
            "return": {
                "description": "the current active route, by matching it against the URL"
            },
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 578,
            "return": {
                "description": "interpolation of the redirect path with the parameters"
            },
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 602,
            "ngdoc": "object",
            "name": "ngRoute.$routeParams",
            "requires": [
                "$route"
            ],
            "description": "The `$routeParams` service allows you to retrieve the current set of route parameters.\n\nRequires the {@link ngRoute `ngRoute`} module to be installed.\n\nThe route parameters are a combination of {@link ng.$location `$location`}'s\n{@link ng.$location#methods_search `search()`} and {@link ng.$location#methods_path `path()`}.\nThe `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.\n\nIn case of parameter name collision, `path` params take precedence over `search` params.\n\nThe service guarantees that the identity of the `$routeParams` object will remain unchanged\n(but its properties will likely change) even when a route change occurs.\n\nNote that the `$routeParams` are only updated *after* a route change completes successfully.\nThis means that you cannot rely on `$routeParams` being correct in route resolve functions.\nInstead you can use `$route.current.params` to access the new route's parameters.",
            "example": [
                "\n<pre>\n // Given:\n // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby\n // Route: /Chapter/:chapterId/Section/:sectionId\n //\n // Then\n $routeParams ==> {chapterId:1, sectionId:2, search:'moby'}\n</pre>"
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 641,
            "ngdoc": "directive",
            "name": "ngRoute.directive:ngView",
            "restrict": "ECA",
            "description": "# Overview\n`ngView` is a directive that complements the {@link ngRoute.$route $route} service by\nincluding the rendered template of the current route into the main layout (`index.html`) file.\nEvery time the current route changes, the included view changes with it according to the\nconfiguration of the `$route` service.\n\nRequires the {@link ngRoute `ngRoute`} module to be installed.",
            "animations": "enter - animation is used to bring new content into the browser.\nleave - animation is used to animate existing content away.\n\nThe enter and leave animation occur concurrently.",
            "scope": "",
            "priority": "400",
            "example": [
                "\n   <example module=\"ngViewExample\" deps=\"angular-route.js\" animations=\"true\">\n     <file name=\"index.html\">\n       <div ng-controller=\"MainCntl as main\">\n         Choose:\n         <a href=\"Book/Moby\">Moby</a> |\n         <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n         <a href=\"Book/Gatsby\">Gatsby</a> |\n         <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n         <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n\n         <div class=\"view-animate-container\">\n           <div ng-view class=\"view-animate\"></div>\n         </div>\n         <hr />\n\n         <pre>$location.path() = {{main.$location.path()}}</pre>\n         <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>\n         <pre>$route.current.params = {{main.$route.current.params}}</pre>\n         <pre>$route.current.scope.name = {{main.$route.current.scope.name}}</pre>\n         <pre>$routeParams = {{main.$routeParams}}</pre>\n       </div>\n     </file>\n\n     <file name=\"book.html\">\n       <div>\n         controller: {{book.name}}<br />\n         Book Id: {{book.params.bookId}}<br />\n       </div>\n     </file>\n\n     <file name=\"chapter.html\">\n       <div>\n         controller: {{chapter.name}}<br />\n         Book Id: {{chapter.params.bookId}}<br />\n         Chapter Id: {{chapter.params.chapterId}}\n       </div>\n     </file>\n\n     <file name=\"animations.css\">\n       .view-animate-container {\n         position:relative;\n         height:100px!important;\n         position:relative;\n         background:white;\n         border:1px solid black;\n         height:40px;\n         overflow:hidden;\n       }\n\n       .view-animate {\n         padding:10px;\n       }\n\n       .view-animate.ng-enter, .view-animate.ng-leave {\n         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n\n         display:block;\n         width:100%;\n         border-left:1px solid black;\n\n         position:absolute;\n         top:0;\n         left:0;\n         right:0;\n         bottom:0;\n         padding:10px;\n       }\n\n       .view-animate.ng-enter {\n         left:100%;\n       }\n       .view-animate.ng-enter.ng-enter-active {\n         left:0;\n       }\n       .view-animate.ng-leave.ng-leave-active {\n         left:-100%;\n       }\n     </file>\n\n     <file name=\"script.js\">\n       angular.module('ngViewExample', ['ngRoute', 'ngAnimate'],\n         function($routeProvider, $locationProvider) {\n           $routeProvider.when('/Book/:bookId', {\n             templateUrl: 'book.html',\n             controller: BookCntl,\n             controllerAs: 'book'\n           });\n           $routeProvider.when('/Book/:bookId/ch/:chapterId', {\n             templateUrl: 'chapter.html',\n             controller: ChapterCntl,\n             controllerAs: 'chapter'\n           });\n\n           // configure html5 to get links working on jsfiddle\n           $locationProvider.html5Mode(true);\n       });\n\n       function MainCntl($route, $routeParams, $location) {\n         this.$route = $route;\n         this.$location = $location;\n         this.$routeParams = $routeParams;\n       }\n\n       function BookCntl($routeParams) {\n         this.name = \"BookCntl\";\n         this.params = $routeParams;\n       }\n\n       function ChapterCntl($routeParams) {\n         this.name = \"ChapterCntl\";\n         this.params = $routeParams;\n       }\n     </file>\n\n     <file name=\"scenario.js\">\n       it('should load and compile correct template', function() {\n         element('a:contains(\"Moby: Ch1\")').click();\n         var content = element('.doc-example-live [ng-view]').text();\n         expect(content).toMatch(/controller\\: ChapterCntl/);\n         expect(content).toMatch(/Book Id\\: Moby/);\n         expect(content).toMatch(/Chapter Id\\: 1/);\n\n         element('a:contains(\"Scarlet\")').click();\n         content = element('.doc-example-live [ng-view]').text();\n         expect(content).toMatch(/controller\\: BookCntl/);\n         expect(content).toMatch(/Book Id\\: Scarlet/);\n       });\n     </file>\n   </example>"
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-route.js",
            "line": 797,
            "ngdoc": "event",
            "name": "ngRoute.directive:ngView#$viewContentLoaded",
            "eventof": "ngRoute.directive:ngView",
            "eventtype": "emit on the current ngView scope",
            "description": "Emitted every time the ngView content is reloaded.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-sanitize.js",
            "line": 1,
            "license": "AngularJS v1.2.0\n(c) 2010-2012 Google, Inc. http://angularjs.org\nLicense: MIT",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-sanitize.js",
            "line": 10,
            "ngdoc": "overview",
            "name": "ngSanitize",
            "description": "# ngSanitize\n\nThe `ngSanitize` module provides functionality to sanitize HTML.\n\n{@installModule sanitize}\n\n<div doc-module-components=\"ngSanitize\"></div>\n\nSee {@link ngSanitize.$sanitize `$sanitize`} for usage.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-sanitize.js",
            "line": 43,
            "ngdoc": "service",
            "name": "",
            "itemtype": "method",
            "description": "The input is sanitized by parsing the html into tokens. All safe tokens (from a whitelist) are\n  then serialized back to properly escaped html string. This means that no unsafe input can make\n  it into the returned string, however, since our parser is more strict than a typical browser\n  parser, it's possible that some obscure input, which would be recognized as valid HTML by a\n  browser, won't make it through the sanitizer.",
            "params": [
                {
                    "name": "html",
                    "description": "Html input.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Sanitized html.",
                "type": "String"
            },
            "example": [
                "\n  <doc:example module=\"ngSanitize\">\n  <doc:source>\n    <script>\n      function Ctrl($scope, $sce) {\n        $scope.snippet =\n          '<p style=\"color:blue\">an html\\n' +\n          '<em onmouseover=\"this.textContent=\\'PWN3D!\\'\">click here</em>\\n' +\n          'snippet</p>';\n        $scope.deliberatelyTrustDangerousSnippet = function() {\n          return $sce.trustAsHtml($scope.snippet);\n        };\n      }\n    </script>\n    <div ng-controller=\"Ctrl\">\n       Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n      <table>\n        <tr>\n          <td>Directive</td>\n          <td>How</td>\n          <td>Source</td>\n          <td>Rendered</td>\n        </tr>\n        <tr id=\"bind-html-with-sanitize\">\n          <td>ng-bind-html</td>\n          <td>Automatically uses $sanitize</td>\n          <td><pre>&lt;div ng-bind-html=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n          <td><div ng-bind-html=\"snippet\"></div></td>\n        </tr>\n        <tr id=\"bind-html-with-trust\">\n          <td>ng-bind-html</td>\n          <td>Bypass $sanitize by explicitly trusting the dangerous value</td>\n          <td>\n          <pre>&lt;div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"&gt;\n&lt;/div&gt;</pre>\n          </td>\n          <td><div ng-bind-html=\"deliberatelyTrustDangerousSnippet()\"></div></td>\n        </tr>\n        <tr id=\"bind-default\">\n          <td>ng-bind</td>\n          <td>Automatically escapes</td>\n          <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br/>&lt;/div&gt;</pre></td>\n          <td><div ng-bind=\"snippet\"></div></td>\n        </tr>\n      </table>\n      </div>\n  </doc:source>\n  <doc:scenario>\n    it('should sanitize the html snippet by default', function() {\n      expect(using('#bind-html-with-sanitize').element('div').html()).\n        toBe('<p>an html\\n<em>click here</em>\\nsnippet</p>');\n    });\n\n    it('should inline raw snippet if bound to a trusted value', function() {\n      expect(using('#bind-html-with-trust').element(\"div\").html()).\n        toBe(\"<p style=\\\"color:blue\\\">an html\\n\" +\n             \"<em onmouseover=\\\"this.textContent='PWN3D!'\\\">click here</em>\\n\" +\n             \"snippet</p>\");\n    });\n\n    it('should escape snippet without any filter', function() {\n      expect(using('#bind-default').element('div').html()).\n        toBe(\"&lt;p style=\\\"color:blue\\\"&gt;an html\\n\" +\n             \"&lt;em onmouseover=\\\"this.textContent='PWN3D!'\\\"&gt;click here&lt;/em&gt;\\n\" +\n             \"snippet&lt;/p&gt;\");\n    });\n\n    it('should update', function() {\n      input('snippet').enter('new <b onclick=\"alert(1)\">text</b>');\n      expect(using('#bind-html-with-sanitize').element('div').html()).toBe('new <b>text</b>');\n      expect(using('#bind-html-with-trust').element('div').html()).toBe(\n        'new <b onclick=\"alert(1)\">text</b>');\n      expect(using('#bind-default').element('div').html()).toBe(\n        \"new &lt;b onclick=\\\"alert(1)\\\"&gt;text&lt;/b&gt;\");\n    });\n  </doc:scenario>\n  </doc:example>"
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-sanitize.js",
            "line": 210,
            "example": [
                "\nhtmlParser(htmlString, {\n    start: function(tag, attrs, unary) {},\n    end: function(tag) {},\n    chars: function(text) {},\n    comment: function(text) {}\n});"
            ],
            "params": [
                {
                    "name": "html",
                    "description": "string",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-sanitize.js",
            "line": 354,
            "description": "decodes all entities into regular string",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "A string with decoded entities.",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-sanitize.js",
            "line": 365,
            "description": "Escapes all potentially dangerous characters, so that the\nresulting string can be safely inserted into attribute or\nelement text.",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "escaped text"
            },
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-sanitize.js",
            "line": 382,
            "description": "create an HTML/XML writer which writes to buffer",
            "params": [
                {
                    "name": "buf",
                    "description": "use buf.jain('') to get out sanitized html string",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "in the form of {\n    start: function(tag, attrs, unary) {},\n    end: function(tag) {},\n    chars: function(text) {},\n    comment: function(text) {}\n}",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-sanitize.js",
            "line": 442,
            "ngdoc": "filter",
            "name": "",
            "itemtype": "method",
            "description": "Finds links in text input and turns them into html links. Supports http/https/ftp/mailto and\nplain email address links.\n\nRequires the {@link ngSanitize `ngSanitize`} module to be installed.",
            "params": [
                {
                    "name": "text",
                    "description": "Input text.",
                    "type": "String"
                },
                {
                    "name": "target",
                    "description": "Window (_blank|_self|_parent|_top) or named frame to open links in.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Html-linkified text.",
                "type": "String"
            },
            "usage": "<span ng-bind-html=\"linky_expression | linky\"></span>",
            "example": [
                "\n  <doc:example module=\"ngSanitize\">\n    <doc:source>\n      <script>\n        function Ctrl($scope) {\n          $scope.snippet =\n            'Pretty text with some links:\\n'+\n            'http://angularjs.org/,\\n'+\n            'mailto:us@somewhere.org,\\n'+\n            'another@somewhere.org,\\n'+\n            'and one more: ftp://127.0.0.1/.';\n          $scope.snippetWithTarget = 'http://angularjs.org/';\n        }\n      </script>\n      <div ng-controller=\"Ctrl\">\n      Snippet: <textarea ng-model=\"snippet\" cols=\"60\" rows=\"3\"></textarea>\n      <table>\n        <tr>\n          <td>Filter</td>\n          <td>Source</td>\n          <td>Rendered</td>\n        </tr>\n        <tr id=\"linky-filter\">\n          <td>linky filter</td>\n          <td>\n            <pre>&lt;div ng-bind-html=\"snippet | linky\"&gt;<br>&lt;/div&gt;</pre>\n          </td>\n          <td>\n            <div ng-bind-html=\"snippet | linky\"></div>\n          </td>\n        </tr>\n        <tr id=\"linky-target\">\n         <td>linky target</td>\n         <td>\n           <pre>&lt;div ng-bind-html=\"snippetWithTarget | linky:'_blank'\"&gt;<br>&lt;/div&gt;</pre>\n         </td>\n         <td>\n           <div ng-bind-html=\"snippetWithTarget | linky:'_blank'\"></div>\n         </td>\n        </tr>\n        <tr id=\"escaped-html\">\n          <td>no filter</td>\n          <td><pre>&lt;div ng-bind=\"snippet\"&gt;<br>&lt;/div&gt;</pre></td>\n          <td><div ng-bind=\"snippet\"></div></td>\n        </tr>\n      </table>\n    </doc:source>\n    <doc:scenario>\n      it('should linkify the snippet with urls', function() {\n        expect(using('#linky-filter').binding('snippet | linky')).\n          toBe('Pretty text with some links:&#10;' +\n               '<a href=\"http://angularjs.org/\">http://angularjs.org/</a>,&#10;' +\n               '<a href=\"mailto:us@somewhere.org\">us@somewhere.org</a>,&#10;' +\n               '<a href=\"mailto:another@somewhere.org\">another@somewhere.org</a>,&#10;' +\n               'and one more: <a href=\"ftp://127.0.0.1/\">ftp://127.0.0.1/</a>.');\n      });\n\n      it ('should not linkify snippet without the linky filter', function() {\n        expect(using('#escaped-html').binding('snippet')).\n          toBe(\"Pretty text with some links:\\n\" +\n               \"http://angularjs.org/,\\n\" +\n               \"mailto:us@somewhere.org,\\n\" +\n               \"another@somewhere.org,\\n\" +\n               \"and one more: ftp://127.0.0.1/.\");\n      });\n\n      it('should update', function() {\n        input('snippet').enter('new http://link.');\n        expect(using('#linky-filter').binding('snippet | linky')).\n          toBe('new <a href=\"http://link\">http://link</a>.');\n        expect(using('#escaped-html').binding('snippet')).toBe('new http://link.');\n      });\n\n      it('should work with the target property', function() {\n       expect(using('#linky-target').binding(\"snippetWithTarget | linky:'_blank'\")).\n         toBe('<a target=\"_blank\" href=\"http://angularjs.org/\">http://angularjs.org/</a>');\n      });\n    </doc:scenario>\n  </doc:example>"
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-touch.js",
            "line": 1,
            "license": "AngularJS v1.2.0\n(c) 2010-2012 Google, Inc. http://angularjs.org\nLicense: MIT",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-touch.js",
            "line": 8,
            "ngdoc": "overview",
            "name": "ngTouch",
            "description": "# ngTouch\n\nThe `ngTouch` module provides touch events and other helpers for touch-enabled devices.\nThe implementation is based on jQuery Mobile touch event handling \n([jquerymobile.com](http://jquerymobile.com/)).\n\n{@installModule touch}\n\nSee {@link ngTouch.$swipe `$swipe`} for usage.\n\n<div doc-module-components=\"ngTouch\"></div>",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-touch.js",
            "line": 33,
            "ngdoc": "object",
            "name": "ngTouch.$swipe",
            "description": "The `$swipe` service is a service that abstracts the messier details of hold-and-drag swipe\nbehavior, to make implementing swipe-related directives more convenient.\n\nRequires the {@link ngTouch `ngTouch`} module to be installed.\n\n`$swipe` is used by the `ngSwipeLeft` and `ngSwipeRight` directives in `ngTouch`, and by\n`ngCarousel` in a separate component.\n\n# Usage\nThe `$swipe` service is an object with a single method: `bind`. `bind` takes an element\nwhich is to be watched for swipes, and an object with four handler functions. See the\ndocumentation for `bind` below.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-touch.js",
            "line": 70,
            "ngdoc": "method",
            "name": "ngTouch.$swipe#bind",
            "methodof": "ngTouch.$swipe",
            "description": "The main method of `$swipe`. It takes an element to be watched for swipe motions, and an\nobject containing event handlers.\n\nThe four events are `start`, `move`, `end`, and `cancel`. `start`, `move`, and `end`\nreceive as a parameter a coordinates object of the form `{ x: 150, y: 310 }`.\n\n`start` is called on either `mousedown` or `touchstart`. After this event, `$swipe` is\nwatching for `touchmove` or `mousemove` events. These events are ignored until the total\ndistance moved in either dimension exceeds a small threshold.\n\nOnce this threshold is exceeded, either the horizontal or vertical delta is greater.\n- If the horizontal distance is greater, this is a swipe and `move` and `end` events follow.\n- If the vertical distance is greater, this is a scroll, and we let the browser take over.\n  A `cancel` event is sent.\n\n`move` is called on `mousemove` and `touchmove` after the above logic has determined that\na swipe is in progress.\n\n`end` is called when a swipe is successfully completed with a `touchend` or `mouseup`.\n\n`cancel` is called either on a `touchcancel` from the browser, or when we begin scrolling\nas described above.",
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-touch.js",
            "line": 169,
            "ngdoc": "directive",
            "name": "ngTouch.directive:ngClick",
            "description": "A more powerful replacement for the default ngClick designed to be used on touchscreen\ndevices. Most mobile browsers wait about 300ms after a tap-and-release before sending\nthe click event. This version handles them immediately, and then prevents the\nfollowing click event from propagating.\n\nRequires the {@link ngTouch `ngTouch`} module to be installed.\n\nThis directive can fall back to using an ordinary click event, and so works on desktop\nbrowsers as well as mobile.\n\nThis directive also sets the CSS class `ng-click-active` while the element is being held\ndown (by a mouse click or touch) so you can restyle the depressed element if you wish.",
            "element": "ANY",
            "params": [
                {
                    "name": "ngClick",
                    "description": "{@link guide/expression Expression} to evaluate\nupon tap. (Event object is available as `$event`)",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n   <doc:example>\n     <doc:source>\n       <button ng-click=\"count = count + 1\" ng-init=\"count=0\">\n         Increment\n       </button>\n       count: {{ count }}\n     </doc:source>\n   </doc:example>"
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-touch.js",
            "line": 443,
            "ngdoc": "directive",
            "name": "ngTouch.directive:ngSwipeLeft",
            "description": "Specify custom behavior when an element is swiped to the left on a touchscreen device.\nA leftward swipe is a quick, right-to-left slide of the finger.\nThough ngSwipeLeft is designed for touch-based devices, it will work with a mouse click and drag\ntoo.\n\nRequires the {@link ngTouch `ngTouch`} module to be installed.",
            "element": "ANY",
            "params": [
                {
                    "name": "ngSwipeLeft",
                    "description": "{@link guide/expression Expression} to evaluate\nupon left swipe. (Event object is available as `$event`)",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n   <doc:example>\n     <doc:source>\n       <div ng-show=\"!showActions\" ng-swipe-left=\"showActions = true\">\n         Some list content, like an email in the inbox\n       </div>\n       <div ng-show=\"showActions\" ng-swipe-right=\"showActions = false\">\n         <button ng-click=\"reply()\">Reply</button>\n         <button ng-click=\"delete()\">Delete</button>\n       </div>\n     </doc:source>\n   </doc:example>"
            ],
            "class": ""
        },
        {
            "file": "client/lib/angular/angular-touch.js",
            "line": 473,
            "ngdoc": "directive",
            "name": "ngTouch.directive:ngSwipeRight",
            "description": "Specify custom behavior when an element is swiped to the right on a touchscreen device.\nA rightward swipe is a quick, left-to-right slide of the finger.\nThough ngSwipeRight is designed for touch-based devices, it will work with a mouse click and drag\ntoo.\n\nRequires the {@link ngTouch `ngTouch`} module to be installed.",
            "element": "ANY",
            "params": [
                {
                    "name": "ngSwipeRight",
                    "description": "{@link guide/expression Expression} to evaluate\nupon right swipe. (Event object is available as `$event`)",
                    "type": "Expression"
                }
            ],
            "example": [
                "\n   <doc:example>\n     <doc:source>\n       <div ng-show=\"!showActions\" ng-swipe-left=\"showActions = true\">\n         Some list content, like an email in the inbox\n       </div>\n       <div ng-show=\"showActions\" ng-swipe-right=\"showActions = false\">\n         <button ng-click=\"reply()\">Reply</button>\n         <button ng-click=\"delete()\">Delete</button>\n       </div>\n     </doc:source>\n   </doc:example>"
            ],
            "class": ""
        },
        {
            "file": "client/lib/date/date.js",
            "line": 1,
            "description": "Version: 1.0 Alpha-1 \nBuild Date: 13-Nov-2007\nCopyright (c) 2006-2007, Coolite Inc. (http://www.coolite.com/). All rights reserved.\nLicense: Licensed under The MIT License. See license.txt and http://www.datejs.com/license/. \nWebsite: http://www.datejs.com/ or http://www.coolite.com/datejs/",
            "class": ""
        },
        {
            "file": "frontend/api/resources/GenericAbstractResource.cfc",
            "line": 195,
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/BaseDocumentationService.cfc",
            "line": 84,
            "description": "base init method saves data all extending components will need. Private so only provides super \n\tfunctionality.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/BaseDocumentationService.cfc",
            "line": 96,
            "description": "This will return all documentation items list for a file type such as .cfc or .js",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/BaseDocumentationService.cfc",
            "line": 104,
            "description": "Returns the meta data for an item indexed by name.",
            "return": {
                "description": "The meta data for the file specified by fileName argument"
            },
            "params": [
                {
                    "name": "name",
                    "description": "is the dot.path.name of the item to get meta for."
                }
            ],
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/BaseDocumentationService.cfc",
            "line": 116,
            "description": "This will return use private helper methods to find meta for some filetype as defined by someone \n\telse.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/ColdFusionDocumentationService.cfc",
            "line": 49,
            "description": "Initializes this service.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/ColdFusionDocumentationService.cfc",
            "line": 60,
            "description": "This will return all a list of documentation for a file type such as .cfc",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/ColdFusionDocumentationService.cfc",
            "line": 73,
            "description": "Returns the meta data for an item indexed by name.",
            "return": {
                "description": "The meta data for the file specified by fileName argument"
            },
            "params": [
                {
                    "name": "name",
                    "description": "is the dot.path.name of the item to get meta for."
                }
            ],
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/ColdFusionDocumentationService.cfc",
            "line": 84,
            "description": "Helper method to get meta from a cold fusion source file.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/ColdFusionDocumentationService.cfc",
            "line": 103,
            "description": "Simply returns all files stored in the File[] as dot path",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/ColdFusionDocumentationService.cfc",
            "line": 129,
            "hint": "Removes the leading '/' and replaces the rest with '.'",
            "return": {
                "description": "=Returns the filename as a dot path"
            },
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/ColdFusionDocumentationService.cfc",
            "line": 140,
            "hint": "This scan the filesystem for all .cfc files.",
            "description": "Finds all the files starting with root.",
            "return": {
                "description": "Array listing of all those files as array."
            },
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/ColdFusionDocumentationService.cfc",
            "line": 157,
            "description": "Takes a fileName with full path (Dot notation) and grabs the meta data\nand pushes it into the AllDocumentationItems.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/ColdFusionDocumentationService.cfc",
            "line": 172,
            "description": "Helper method trimAndRemoveExt",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/DocumentationWebService.cfc",
            "line": 1,
            "name": "DocumentationWebService",
            "description": "This will be the primary web service to access the documentation API.",
            "info": "Access to the public methods will be via http GET request only.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/DocumentationWebService.cfc",
            "line": 59,
            "return": {
                "description": "any The meta data for the file specified by fileName argument"
            },
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/DocumentationWebService.cfc",
            "line": 83,
            "description": "Simply returns all files stored in the File[] as dot path",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/DocumentationWebService.cfc",
            "line": 98,
            "description": "=Removes the leading '/' and replaces the rest with '.'",
            "return": {
                "description": "=Returns the filename as a dot path"
            },
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/DocumentationWebService.cfc",
            "line": 110,
            "description": "Finds all the files starting with root.",
            "return": {
                "description": "Array listing of all those files as array.            \n------------------------------------------------------------"
            },
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/DocumentationWebService.cfc",
            "line": 127,
            "description": "Takes a fileName with full path (Dot notation) and grabs the meta data\nand pushes it into the AllDocumentationItems.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/DocumentationWebService.cfc",
            "line": 148,
            "description": "Parse JS file and add back into the file list",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/DocumentationWebService.cfc",
            "line": 155,
            "description": "Helper method trimAndRemoveExt",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/DocumentationWebService.cfc",
            "line": 165,
            "description": "This will return true if the list has another directory and false if the end is reached",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/DocumentationWebService.cfc",
            "line": 172,
            "description": "This will return true if the list has another file and false if the end is reached",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/DocumentationWebService.cfc",
            "line": 179,
            "description": "Parse custom annotations list",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/DocumentationWebService.cfc",
            "line": 186,
            "description": "This will return true on an annotation match, false otherwise.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/DocumentationWebService.cfc",
            "line": 196,
            "description": "Processes a comment in a file and returns a struct of tags for that file",
            "params": [
                {
                    "name": "The",
                    "description": "comment to process"
                },
                {
                    "name": "The",
                    "description": "name of the file where the comment was found"
                }
            ],
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/DocumentationWebService.cfc",
            "line": 207,
            "description": "Gets the next comment in a file\nA comment here is defined as the multiline comment (docs style) found\nin both coldfusion and javascrip.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/DocumentationWebService.cfc",
            "line": 221,
            "description": "Search file will return a struct of matched text in a file using passed in regex or plain text.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JSDoc.cfc",
            "line": 2,
            "description": "jsDoc is a port of jsDoc from javascript to coldfusion. It parses jsDoc comments.",
            "name": "jsDoc",
            "usage": "Takes a file text as a string and returns the parsed comments as a JSON object Tree.",
            "link": "https://code.google.com/p/jsdoc-toolkit/wiki/TagReference",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JSDoc.cfc",
            "line": 34,
            "description": "When function is found in a file, this proceses it.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JSDoc.cfc",
            "line": 41,
            "description": "When a function prototype is found, this processes it.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JSDoc.cfc",
            "line": 48,
            "description": "When a comment is found this parses the tags from the comment.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JSDoc.cfc",
            "line": 55,
            "description": "This is the main parser that calls the other methods.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JSDoc.cfc",
            "line": 80,
            "description": "Helper method for finding and grabbing all regex matches in this case, javadoc comments.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JavaScriptDocumentationService.cfc",
            "line": 50,
            "description": "Initializes this service to search for a specific file extension in a specific directory.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JavaScriptDocumentationService.cfc",
            "line": 62,
            "description": "This will return all a list of documentation for a file type such as .js",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JavaScriptDocumentationService.cfc",
            "line": 75,
            "description": "Returns the meta data for an item indexed by name.",
            "return": {
                "description": "The meta data for the file specified by fileName argument"
            },
            "params": [
                {
                    "name": "name",
                    "description": "is the dot.path.name of the item to get meta for."
                }
            ],
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JavaScriptDocumentationService.cfc",
            "line": 94,
            "description": "Helper method to get meta from a cold fusion source file.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JavaScriptDocumentationService.cfc",
            "line": 113,
            "description": "Simply returns all files stored in the File[] as dot path",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JavaScriptDocumentationService.cfc",
            "line": 138,
            "description": "=Removes the leading '/' and replaces the rest with '.'",
            "return": {
                "description": "=Returns the filename as a dot path"
            },
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JavaScriptDocumentationService.cfc",
            "line": 150,
            "description": "Finds all the files starting with root.",
            "return": {
                "description": "Array listing of all those files as array."
            },
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JavaScriptDocumentationService.cfc",
            "line": 167,
            "description": "Takes a fileName with full path (Dot notation) and grabs the meta data\nand pushes it into the AllDocumentationItems.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JavaScriptDocumentationService.cfc",
            "line": 183,
            "description": "Helper method trimAndRemoveExt",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JavaScriptDocumentationService.cfc",
            "line": 193,
            "description": "Parses JS files for meta data.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JavaScriptDocumentationService.cfc",
            "line": 231,
            "description": "Helper method for finding and grabbing all regex matches in this case, javadoc comments.",
            "class": ""
        },
        {
            "file": "meta/docs/DocumentationService/JavaScriptDocumentationService.cfc",
            "line": 250,
            "description": "Helper function for finding annotations inside of comments.",
            "class": ""
        },
        {
            "file": "meta/docs/js/controllers/BodyController.js",
            "line": 1,
            "description": "Handles rendering the body of the markdown on click.",
            "class": ""
        },
        {
            "file": "meta/docs/js/controllers/NavController.js",
            "line": 1,
            "description": "Handles generating a navigation bar from the readme.md files that live throughout Slatwall.\nReference Section:\n\t\tAPI Access Points\n\t\t\tREST API readme.md with other references coming from the main.cfc in the API directory\n\t\t\tColdFusion API readme.md in Hibachi Scope with examples\n\t\t\tAngularJS  API readme.md in slatscope\n\n\t\tModel\n\t\t\tEntities + Custom\n\t\t\tServices + Custom\n\t\t\tDAO\t\t + Custom\n\t\t\tOther    + Custom\n\t\t\t\tProcess\n\t\t\t\tHandler + Custom\n\t\t\t\tReport + Custom\n\t\t\t\tService\n\t\t\t\tTransient \n\t\t\t\tValidation + Custom\n\t\tOther\n\t\t\tIntegrationServices\n\t\t\tTags\n\t\t\tTemplates\n\t\t\tResource Bundles\n\t\t\tAssets\n\t\t\tTests\n\t\t\tTags",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 1,
            "description": "marked - a markdown parser\nCopyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\nhttps://github.com/chjj/marked",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 9,
            "description": "Block-Level Grammar",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 67,
            "description": "Normal Block Grammar",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 73,
            "description": "GFM Block Grammar",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 88,
            "description": "GFM + Tables Block Grammar",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 97,
            "description": "Block Lexer",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 116,
            "description": "Expose Block Rules",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 122,
            "description": "Static Lex Method",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 131,
            "description": "Preprocessing",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 145,
            "description": "Lexing",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 444,
            "description": "Inline-Level Grammar",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 476,
            "description": "Normal Inline Grammar",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 482,
            "description": "Pedantic Inline Grammar",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 491,
            "description": "GFM Inline Grammar",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 505,
            "description": "GFM + Line Breaks Inline Grammar",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 514,
            "description": "Inline Lexer & Compiler",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 541,
            "description": "Expose Inline Rules",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 547,
            "description": "Static Lexing/Compiling Method",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 556,
            "description": "Lexing/Compiling",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 694,
            "description": "Compile Link",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 707,
            "description": "Smartypants Transformations",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 728,
            "description": "Mangle Links",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 749,
            "description": "Renderer",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 892,
            "description": "Parsing & Compiling",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 905,
            "description": "Static Parse Method",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 914,
            "description": "Parse Loop",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 930,
            "description": "Next Token",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 938,
            "description": "Preview Next Token",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 946,
            "description": "Parse Text Tokens",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 960,
            "description": "Parse Current Token",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 1072,
            "description": "Helpers",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 1131,
            "description": "Marked",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 1219,
            "description": "Options",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/marked.js",
            "line": 1245,
            "description": "Expose",
            "class": ""
        },
        {
            "file": "meta/docs/js/lib/textile.js",
            "line": 1,
            "description": "A tiny markdown to html translator.",
            "class": ""
        },
        {
            "file": "meta/docs/js/routes/DocsMDRouter.js",
            "line": 1,
            "description": "Handles displaying the rendered MD on a nav click.",
            "class": ""
        },
        {
            "file": "meta/tests/functional/admin/DashboardTest.cfc",
            "line": 10,
            "mxunit": ":dataprovider menuItems",
            "class": ""
        },
        {
            "file": "meta/tests/functional/admin/LoginPageTest.cfc",
            "line": 14,
            "mxunit": ":dataprovider invalidLogins",
            "class": ""
        },
        {
            "file": "meta/tests/unit/service/DataServiceTest.cfc",
            "line": 59,
            "mxunit": ":dataprovider titleStrings",
            "class": ""
        },
        {
            "file": "model/service/HibachiUtilityService.cfc",
            "line": 418,
            "description": "Makes a row of a query into a structure.",
            "params": [
                {
                    "name": "query",
                    "description": "The query to work with."
                },
                {
                    "name": "row",
                    "description": "Row number to check. Defaults to row 1."
                }
            ],
            "return": {
                "description": "Returns a structure."
            },
            "author": "Nathan Dintenfass (nathan@changemedia.com)",
            "version": "1, December 11, 2001\nhttp://cflib.org/index.cfm?event=page.udfbyid&udfid=358",
            "class": ""
        },
        {
            "file": "model/service/HibachiUtilityService.cfc",
            "line": 448,
            "description": "exports the given query/array to file.",
            "params": [
                {
                    "name": "data",
                    "description": "Data to export. (Required) (Currently only supports query)."
                },
                {
                    "name": "columns",
                    "description": "list of columns to export. (optional, default: all)"
                },
                {
                    "name": "columnNames",
                    "description": "list of column headers to export. (optional, default: none)"
                },
                {
                    "name": "fileName",
                    "description": "file name for export. (default: guid)"
                },
                {
                    "name": "fileType",
                    "description": "file type for export. (default: csv)"
                },
                {
                    "name": "download",
                    "description": "download the file. (default: true)"
                }
            ],
            "return": {
                "description": "struct with file info."
            },
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiAssets/js/jquery-hashchange-1.3.min.js",
            "line": 1,
            "depends": "/jquery-1.7.1.min.js",
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiAssets/js/jquery-typewatch-2.0.js",
            "line": 1,
            "depends": "/jquery-1.7.1.min.js",
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js",
            "line": 1918,
            "description": "Get the timezone offset as string from a date object (eg '+0530' for UTC+5.5)",
            "params": [
                {
                    "name": "number",
                    "description": "if not a number this value is returned"
                },
                {
                    "name": "boolean",
                    "description": "if true formats in accordance to iso8601 \"+12:45\""
                }
            ],
            "return": {
                "description": "string"
            },
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js",
            "line": 1941,
            "description": "Get the number in minutes that represents a timezone string",
            "params": [
                {
                    "name": "string",
                    "description": "formated like \"+0500\", \"-1245\""
                }
            ],
            "return": {
                "description": "number"
            },
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js",
            "line": 1962,
            "description": "No way to set timezone in js Date, so we must adjust the minutes to compensate. (think setDate, getDate)",
            "params": [
                {
                    "name": "date",
                    "description": ""
                },
                {
                    "name": "string",
                    "description": "formated like \"+0500\", \"-1245\""
                }
            ],
            "return": {
                "description": "date"
            },
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js",
            "line": 1976,
            "description": "Calls `timepicker()` on the `startTime` and `endTime` elements, and configures them to\nenforce date range limits.\nn.b. The input value must be correctly formatted (reformatting is not supported)",
            "params": [
                {
                    "name": "Element",
                    "description": "startTime"
                },
                {
                    "name": "Element",
                    "description": "endTime"
                },
                {
                    "name": "obj",
                    "description": "options Options for the timepicker() call"
                }
            ],
            "return": {
                "description": "jQuery"
            },
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js",
            "line": 1989,
            "description": "Calls `datetimepicker` on the `startTime` and `endTime` elements, and configures them to\nenforce date range limits.",
            "params": [
                {
                    "name": "Element",
                    "description": "startTime"
                },
                {
                    "name": "Element",
                    "description": "endTime"
                },
                {
                    "name": "obj",
                    "description": "options Options for the `timepicker()` call. Also supports `reformat`,\n  a boolean value that can be used to reformat the input values to the `dateFormat`."
                },
                {
                    "name": "string",
                    "description": "method Can be used to specify the type of picker to be added"
                }
            ],
            "return": {
                "description": "jQuery"
            },
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js",
            "line": 2003,
            "description": "Calls `method` on the `startTime` and `endTime` elements, and configures them to\nenforce date range limits.",
            "params": [
                {
                    "name": "Element",
                    "description": "startTime"
                },
                {
                    "name": "Element",
                    "description": "endTime"
                },
                {
                    "name": "obj",
                    "description": "options Options for the `timepicker()` call. Also supports `reformat`,\n  a boolean value that can be used to reformat the input values to the `dateFormat`."
                }
            ],
            "return": {
                "description": "jQuery"
            },
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js",
            "line": 2016,
            "description": "Calls `method` on the `startTime` and `endTime` elements, and configures them to\nenforce date range limits.",
            "params": [
                {
                    "name": "string",
                    "description": "method Can be used to specify the type of picker to be added"
                },
                {
                    "name": "Element",
                    "description": "startTime"
                },
                {
                    "name": "Element",
                    "description": "endTime"
                },
                {
                    "name": "obj",
                    "description": "options Options for the `timepicker()` call. Also supports `reformat`,\n  a boolean value that can be used to reformat the input values to the `dateFormat`."
                }
            ],
            "return": {
                "description": "jQuery"
            },
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js",
            "line": 2099,
            "description": "Log error or data to the console during error or debugging",
            "params": [
                {
                    "name": "Object",
                    "description": "err pass any type object to log to the console during error or debugging"
                }
            ],
            "return": {
                "description": "void"
            },
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiAssets/js/jquery-validate-1.9.0.min.js",
            "line": 1,
            "description": "jQuery Validation Plugin 1.9.0\n\nhttp://bassistance.de/jquery-plugins/jquery-plugin-validation/\nhttp://docs.jquery.com/Plugins/Validation\n\nCopyright (c) 2006 - 2011 J�rn Zaefferer\n\nDual licensed under the MIT and GPL licenses:\n  http://www.opensource.org/licenses/mit-license.php\n  http://www.gnu.org/licenses/gpl.html",
            "depends": "/jquery-1.7.1.min.js",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckeditor/samples/plugins/dialog/assets/my_dialog.js",
            "line": 1,
            "description": "Copyright (c) 2003-2014, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md or http://ckeditor.com/license",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckeditor/samples/sample.js",
            "line": 1,
            "description": "Copyright (c) 2003-2014, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md or http://ckeditor.com/license",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckeditor/build-config.js",
            "line": 1,
            "license": "Copyright (c) 2003-2014, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md or http://ckeditor.com/license",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckeditor/build-config.js",
            "line": 6,
            "description": "This file was added automatically by CKEditor builder.\nYou may re-use it at any time to build CKEditor again.\n\nIf you would like to build CKEditor online again\n(for example to upgrade), visit one the following links:\n\n(1) http://ckeditor.com/builder\n    Visit online builder to build CKEditor from scratch.\n\n(2) http://ckeditor.com/builder/e6b8a045f8f984a69463975ca3e6524a\n    Visit online builder to build CKEditor, starting with the same setup as before.\n\n(3) http://ckeditor.com/builder/download/e6b8a045f8f984a69463975ca3e6524a\n    Straight download link to the latest version of CKEditor (Optimized) with the same setup as before.\n\nNOTE:\n   This file is not used by CKEditor, you may remove it.\n   Changing this file will not change your CKEditor configuration.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckeditor/config.js",
            "line": 1,
            "license": "Copyright (c) 2003-2014, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md or http://ckeditor.com/license",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckeditor/styles.js",
            "line": 1,
            "description": "Copyright (c) 2003-2014, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md or http://ckeditor.com/license",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/bg.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Bulgarian\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/bg.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/cs.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Czech\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/cs.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/cy.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Welsh\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/cy.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/da.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Danish\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/da.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/de.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the German\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/de.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/el.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Greek\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/el.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/en.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the English\n\t\tlanguage. This is the base file for all translations.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/en.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/eo.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Esperanto\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/eo.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/es-mx.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Latin American Spanish\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/es-mx.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/es.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Spanish\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/es.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/et.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Estonian\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/et.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/fa.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Persian\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/fa.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/fi.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Finnish\n\t\tlanguage. Translated into Finnish 2010-12-15 by Petteri Salmela,\n\t\tupdated.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/fi.js",
            "line": 20,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/fr.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the French\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/fr.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/gu.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Gujarati\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/gu.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/he.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Hebrew\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/he.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/hi.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Hindi\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/hi.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/hr.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Croatian\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/hr.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/hu.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Hungarian\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/hu.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/it.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Italian\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/it.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/ja.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Japanese\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/ja.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/lt.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Lithuanian\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/lt.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/lv.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Latvian\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/lv.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/nb.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Norwegian\n\t\tBokmål language.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/nb.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/nl.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Dutch\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/nl.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/nn.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Norwegian\n\t\tNynorsk language.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/nn.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/no.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Norwegian\n\t\tBokmål language.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/no.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/pl.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Polish\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/pl.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/pt-br.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Brazilian Portuguese\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/pt-br.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/ro.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Romanian\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/ro.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/ru.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Russian\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/ru.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/sk.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Slovak\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/sk.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/sl.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Slovenian\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/sl.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/sv.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Swedish\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/sv.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/tr.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object, for the Turkish\n\t\tlanguage.\n\n\tTurkish translation by Abdullah M CEYLAN a.k.a. Kenan Balamir. Updated.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/tr.js",
            "line": 21,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/vi.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Vietnamese\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/vi.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/zh-cn.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Chinese-Simplified\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/zh-cn.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/zh-tw.js",
            "line": 14,
            "fileoverview": "Defines the {@link CKFinder.lang} object for the Chinese (Taiwan)\n\t\tlanguage.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/lang/zh-tw.js",
            "line": 19,
            "description": "Contains the dictionary of language entries.",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/plugins/dummy/plugin.js",
            "line": 1,
            "description": "Copyright (c) 2003-2012, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.html or http://ckeditor.com/license\n\nCKFinder 2.x - sample \"dummy\" plugin.\n\nTo enable it, add the following line to config.js:\n    config.extraPlugins = 'dummy';",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/plugins/dummy/plugin.js",
            "line": 11,
            "description": "See http://docs.cksource.com/ckfinder_2.x_api/symbols/CKFinder.html#.addPlugin",
            "class": ""
        },
        {
            "file": "org/Hibachi/ckfinder/plugins/fileeditor/codemirror/js/undo.js",
            "line": 1,
            "description": "Storage and control for undo information within a CodeMirror\neditor. 'Why on earth is such a complicated mess required for\nthat?', I hear you ask. The goal, in implementing this, was to make\nthe complexity of storing and reverting undo information depend\nonly on the size of the edited or restored content, not on the size\nof the whole document. This makes it necessary to use a kind of\n'diff' system, which, when applied to a DOM tree, causes some\ncomplexity and hackery.\n\nIn short, the editor 'touches' BR elements as it parses them, and\nthe UndoHistory stores these. When nothing is touched in commitDelay\nmilliseconds, the changes are committed: It goes over all touched\nnodes, throws out the ones that did not change since last commit or\nare no longer in the document, and assembles the rest into zero or\nmore 'chains' -- arrays of adjacent lines. Links back to these\nchains are added to the BR nodes, while the chain that previously\nspanned these nodes is added to the undo history. Undoing a change\nmeans taking such a chain off the undo history, restoring its\ncontent (text is saved per line) and linking it back into the\ndocument.",
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiService.cfc",
            "line": 190,
            "description": "exports the given query/array to file.",
            "params": [
                {
                    "name": "data",
                    "description": "Data to export. (Required) (Currently only supports query)."
                },
                {
                    "name": "columns",
                    "description": "list of columns to export. (optional, default: all)"
                },
                {
                    "name": "columnNames",
                    "description": "list of column headers to export. (optional, default: none)"
                },
                {
                    "name": "fileName",
                    "description": "file name for export. (default: uuid)"
                },
                {
                    "name": "fileType",
                    "description": "file type for export. (default: csv)"
                }
            ],
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiService.cfc",
            "line": 234,
            "description": "Generic ORM CRUD methods and dynamic methods by convention via onMissingMethod.\n\nSee all onMissing* method comments and other method signatures for usage.\n\nCREDIT:\n  Heavily influenced by ColdSpring 2.0-pre-alpha's coldspring.orm.hibernate.AbstractGateway.\n  So, thank you Mark Mandel and Bob Silverberg :)\n\nProvides dynamic methods, by convention, on missing method:\n\n  newXXX()\n\n  countXXX()\n\n  saveXXX( required any xxxEntity )\n\n  deleteXXX( required any xxxEntity )\n\n  getXXX( required any ID, boolean isReturnNewOnNotFound = false )\n\n  getXXXByYYY( required any yyyFilterValue, boolean isReturnNewOnNotFound = false )\n\n  getXXXByYYYANDZZZ( required array [yyyFilterValue,zzzFilterValue], boolean isReturnNewOnNotFound = false )\n\t\tAND here is case sensetive to avoid matching in property name i.e brAND\n\n  listXXX( struct filterCriteria, string sortOrder, struct options )\n\n  listXXXFilterByYYY( required any yyyFilterValue, string sortOrder, struct options )\n\n  listXXXOrderByZZZ( struct filterCriteria, struct options )\n\n  listXXXFilterByYYYOrderByZZZ( required any yyyFilterValue, struct options )\n\n...in which XXX is an ORM entity name, and YYY and ZZZ are entity property names.\n\n\t exportXXX()\n\nNOTE: Ordered arguments only--named arguments not supported.",
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiService.cfc",
            "line": 304,
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiService.cfc",
            "line": 310,
            "description": "Provides dynamic get methods, by convention, on missing method:\n\n  getXXX( required any ID, boolean isReturnNewOnNotFound = false )\n\n  getXXXByYYY( required any yyyFilterValue, boolean isReturnNewOnNotFound = false )\n\n  getXXXByYYYAndZZZ( required array [yyyFilterValue,zzzFilterValue], boolean isReturnNewOnNotFound = false )\n\t\tAND here is case sensetive to avoid matching in property name i.e brAND\n\n...in which XXX is an ORM entity name, and YYY is an entity property name.\n\nNOTE: Ordered arguments only--named arguments not supported.",
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiService.cfc",
            "line": 349,
            "description": "Provides dynamic getSmarList method, by convention, on missing method:\n\n  getXXXSmartList( struct data )\n\n...in which XXX is an ORM entity name\n\nNOTE: Ordered arguments only--named arguments not supported.",
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiService.cfc",
            "line": 373,
            "description": "Provides dynamic list methods, by convention, on missing method:\n\n  listXXX( struct filterCriteria, string sortOrder, struct options )\n\n  listXXXFilterByYYY( required any yyyFilterValue, string sortOrder, struct options )\n\n  listXXXOrderByZZZ( struct filterCriteria, struct options )\n\n  listXXXFilterByYYYOrderByZZZ( required any yyyFilterValue, struct options )\n\n...in which XXX is an ORM entity name, and YYY and ZZZ are entity property names.\n\nNOTE: Ordered arguments only--named arguments not supported.",
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiService.cfc",
            "line": 415,
            "description": "Provides dynamic list method, by convention, on missing method:\n\n  listXXX( struct filterCriteria, string sortOrder, struct options )\n\n...in which XXX is an ORM entity name.\n\nNOTE: Ordered arguments only--named arguments not supported.",
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiService.cfc",
            "line": 445,
            "description": "Provides dynamic list method, by convention, on missing method:\n\n  listXXXFilterByYYY( required any yyyFilterValue, string sortOrder, struct options )\n\n...in which XXX is an ORM entity name, and YYY is an entity property name.\n\nNOTE: Ordered arguments only--named arguments not supported.",
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiService.cfc",
            "line": 480,
            "description": "Provides dynamic list method, by convention, on missing method:\n\n  listXXXFilterByYYYOrderByZZZ( required any yyyFilterValue, struct options )\n\n...in which XXX is an ORM entity name, and YYY and ZZZ are entity property names.\n\nNOTE: Ordered arguments only--named arguments not supported.",
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiService.cfc",
            "line": 514,
            "description": "Provides dynamic list method, by convention, on missing method:\n\n  listXXXOrderByZZZ( struct filterCriteria, struct options )\n\n...in which XXX is an ORM entity name, and ZZZ is an entity property name.\n\nNOTE: Ordered arguments only--named arguments not supported.",
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiService.cfc",
            "line": 549,
            "description": "Provides dynamic count methods, by convention, on missing method:\n\n  countXXX()\n\n...in which XXX is an ORM entity name.",
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiService.cfc",
            "line": 589,
            "description": "Provides dynamic export methods, by convention, on missing method:\n\n  exportXXX()\n\n...in which XXX is an ORM entity name.",
            "class": ""
        },
        {
            "file": "org/Hibachi/HibachiUtilityService.cfc",
            "line": 172,
            "description": "Concatenates two arrays.",
            "params": [
                {
                    "name": "a1",
                    "description": "The first array."
                },
                {
                    "name": "a2",
                    "description": "The second array."
                }
            ],
            "return": {
                "description": "Returns an array."
            },
            "author": "Craig Fisher (craig@altainetractive.com)",
            "version": "1, September 13, 2001\nModified by Tony Garcia 18Oct09 to deal with metadata arrays, which don't act like normal arrays",
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: license",
            "line": " client/lib/angular/angular-animate.js:1"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-animate.js:10"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-animate.js:10"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-animate.js:243"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-animate.js:243"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-animate.js:304"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-animate.js:304"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " client/lib/angular/angular-animate.js:304"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-animate.js:324"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-animate.js:324"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-animate.js:324"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " client/lib/angular/angular-animate.js:324"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-animate.js:362"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-animate.js:362"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-animate.js:362"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " client/lib/angular/angular-animate.js:362"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-animate.js:400"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-animate.js:400"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-animate.js:400"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " client/lib/angular/angular-animate.js:400"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-animate.js:440"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-animate.js:440"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-animate.js:440"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-animate.js:476"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-animate.js:476"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-animate.js:476"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-animate.js:512"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-animate.js:512"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-animate.js:512"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " client/lib/angular/angular-animate.js:512"
        },
        {
            "message": "unknown tag: license",
            "line": " client/lib/angular/angular-cookies.js:1"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-cookies.js:8"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-cookies.js:8"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-cookies.js:27"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-cookies.js:27"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-cookies.js:136"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-cookies.js:136"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-cookies.js:153"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-cookies.js:153"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-cookies.js:153"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " client/lib/angular/angular-cookies.js:153"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-cookies.js:169"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-cookies.js:169"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-cookies.js:169"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-cookies.js:184"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-cookies.js:184"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-cookies.js:184"
        },
        {
            "message": "unknown tag: license",
            "line": " client/lib/angular/angular-loader.js:1"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-loader.js:9"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-loader.js:9"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-loader.js:29"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-loader.js:29"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " client/lib/angular/angular-loader.js:29"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-loader.js:105"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-loader.js:105"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " client/lib/angular/angular-loader.js:105"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " client/lib/angular/angular-loader.js:105"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-loader.js:116"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-loader.js:116"
        },
        {
            "message": "unknown tag: propertyof",
            "line": " client/lib/angular/angular-loader.js:116"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " client/lib/angular/angular-loader.js:116"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-loader.js:126"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-loader.js:126"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-loader.js:126"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-loader.js:138"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-loader.js:138"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-loader.js:138"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-loader.js:149"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-loader.js:149"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-loader.js:149"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-loader.js:160"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-loader.js:160"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-loader.js:160"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-loader.js:171"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-loader.js:171"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-loader.js:171"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-loader.js:183"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-loader.js:183"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-loader.js:183"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-loader.js:217"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-loader.js:217"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-loader.js:217"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-loader.js:228"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-loader.js:228"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-loader.js:228"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-loader.js:240"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-loader.js:240"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-loader.js:240"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-loader.js:253"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-loader.js:253"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-loader.js:253"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-loader.js:264"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-loader.js:264"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-loader.js:264"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " client/lib/angular/angular-loader.js:286"
        },
        {
            "message": "unknown tag: typedef",
            "line": " client/lib/angular/angular-loader.js:306"
        },
        {
            "message": "unknown tag: license",
            "line": " client/lib/angular/angular-resource.js:1"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-resource.js:10"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-resource.js:10"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-resource.js:27"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-resource.js:27"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " client/lib/angular/angular-resource.js:27"
        },
        {
            "message": "unknown tag: license",
            "line": " client/lib/angular/angular-route.js:1"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-route.js:8"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-route.js:8"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-route.js:25"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-route.js:25"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " client/lib/angular/angular-route.js:25"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-route.js:43"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-route.js:43"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-route.js:43"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " client/lib/angular/angular-route.js:43"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-route.js:206"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-route.js:206"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-route.js:206"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " client/lib/angular/angular-route.js:206"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-route.js:234"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-route.js:234"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-route.js:364"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-route.js:364"
        },
        {
            "message": "unknown tag: eventof",
            "line": " client/lib/angular/angular-route.js:364"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " client/lib/angular/angular-route.js:364"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-route.js:381"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-route.js:381"
        },
        {
            "message": "unknown tag: eventof",
            "line": " client/lib/angular/angular-route.js:381"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " client/lib/angular/angular-route.js:381"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-route.js:397"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-route.js:397"
        },
        {
            "message": "unknown tag: eventof",
            "line": " client/lib/angular/angular-route.js:397"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " client/lib/angular/angular-route.js:397"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-route.js:411"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-route.js:411"
        },
        {
            "message": "unknown tag: eventof",
            "line": " client/lib/angular/angular-route.js:411"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " client/lib/angular/angular-route.js:411"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-route.js:426"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-route.js:426"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-route.js:426"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " client/lib/angular/angular-route.js:560"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " client/lib/angular/angular-route.js:578"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-route.js:602"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-route.js:602"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-route.js:641"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-route.js:641"
        },
        {
            "message": "unknown tag: restrict",
            "line": " client/lib/angular/angular-route.js:641"
        },
        {
            "message": "unknown tag: animations",
            "line": " client/lib/angular/angular-route.js:641"
        },
        {
            "message": "unknown tag: scope",
            "line": " client/lib/angular/angular-route.js:641"
        },
        {
            "message": "unknown tag: priority",
            "line": " client/lib/angular/angular-route.js:641"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-route.js:797"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-route.js:797"
        },
        {
            "message": "unknown tag: eventof",
            "line": " client/lib/angular/angular-route.js:797"
        },
        {
            "message": "unknown tag: eventtype",
            "line": " client/lib/angular/angular-route.js:797"
        },
        {
            "message": "unknown tag: license",
            "line": " client/lib/angular/angular-sanitize.js:1"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-sanitize.js:10"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-sanitize.js:10"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-sanitize.js:43"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-sanitize.js:43"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " client/lib/angular/angular-sanitize.js:43"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " client/lib/angular/angular-sanitize.js:43"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " client/lib/angular/angular-sanitize.js:354"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " client/lib/angular/angular-sanitize.js:365"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " client/lib/angular/angular-sanitize.js:382"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-sanitize.js:442"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-sanitize.js:442"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " client/lib/angular/angular-sanitize.js:442"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " client/lib/angular/angular-sanitize.js:442"
        },
        {
            "message": "unknown tag: usage",
            "line": " client/lib/angular/angular-sanitize.js:442"
        },
        {
            "message": "unknown tag: license",
            "line": " client/lib/angular/angular-touch.js:1"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-touch.js:8"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-touch.js:8"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-touch.js:33"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-touch.js:33"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-touch.js:70"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-touch.js:70"
        },
        {
            "message": "unknown tag: methodof",
            "line": " client/lib/angular/angular-touch.js:70"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-touch.js:169"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-touch.js:169"
        },
        {
            "message": "unknown tag: element",
            "line": " client/lib/angular/angular-touch.js:169"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-touch.js:443"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-touch.js:443"
        },
        {
            "message": "unknown tag: element",
            "line": " client/lib/angular/angular-touch.js:443"
        },
        {
            "message": "unknown tag: ngdoc",
            "line": " client/lib/angular/angular-touch.js:473"
        },
        {
            "message": "unknown tag: name",
            "line": " client/lib/angular/angular-touch.js:473"
        },
        {
            "message": "unknown tag: element",
            "line": " client/lib/angular/angular-touch.js:473"
        },
        {
            "message": "unknown tag: hint",
            "line": " meta/docs/DocumentationService/ColdFusionDocumentationService.cfc:129"
        },
        {
            "message": "unknown tag: hint",
            "line": " meta/docs/DocumentationService/ColdFusionDocumentationService.cfc:140"
        },
        {
            "message": "unknown tag: name",
            "line": " meta/docs/DocumentationService/DocumentationWebService.cfc:1"
        },
        {
            "message": "unknown tag: info",
            "line": " meta/docs/DocumentationService/DocumentationWebService.cfc:1"
        },
        {
            "message": "unknown tag: name",
            "line": " meta/docs/DocumentationService/JSDoc.cfc:2"
        },
        {
            "message": "unknown tag: usage",
            "line": " meta/docs/DocumentationService/JSDoc.cfc:2"
        },
        {
            "message": "unknown tag: link",
            "line": " meta/docs/DocumentationService/JSDoc.cfc:2"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " meta/docs/DocumentationService/JavaScriptDocumentationService.cfc:75"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " meta/docs/DocumentationService/JavaScriptDocumentationService.cfc:138"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " meta/docs/DocumentationService/JavaScriptDocumentationService.cfc:150"
        },
        {
            "message": "unknown tag: mxunit",
            "line": " meta/tests/functional/admin/DashboardTest.cfc:10"
        },
        {
            "message": "unknown tag: mxunit",
            "line": " meta/tests/functional/admin/LoginPageTest.cfc:14"
        },
        {
            "message": "unknown tag: mxunit",
            "line": " meta/tests/unit/service/DataServiceTest.cfc:59"
        },
        {
            "message": "unknown tag: version",
            "line": " model/service/HibachiUtilityService.cfc:418"
        },
        {
            "message": "unknown tag: depends",
            "line": " org/Hibachi/HibachiAssets/js/jquery-hashchange-1.3.min.js:1"
        },
        {
            "message": "unknown tag: depends",
            "line": " org/Hibachi/HibachiAssets/js/jquery-typewatch-2.0.js:1"
        },
        {
            "message": "unknown tag: depends",
            "line": " org/Hibachi/HibachiAssets/js/jquery-validate-1.9.0.min.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " org/Hibachi/ckeditor/build-config.js:1"
        },
        {
            "message": "unknown tag: license",
            "line": " org/Hibachi/ckeditor/config.js:1"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/bg.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/cs.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/cy.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/da.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/de.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/el.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/en.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/eo.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/es-mx.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/es.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/et.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/fa.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/fi.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/fr.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/gu.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/he.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/hi.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/hr.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/hu.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/it.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/ja.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/lt.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/lv.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/nb.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/nl.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/nn.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/no.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/pl.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/pt-br.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/ro.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/ru.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/sk.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/sl.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/sv.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/tr.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/vi.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/zh-cn.js:14"
        },
        {
            "message": "unknown tag: fileoverview",
            "line": " org/Hibachi/ckfinder/lang/zh-tw.js:14"
        },
        {
            "message": "unknown tag: version",
            "line": " org/Hibachi/HibachiUtilityService.cfc:172"
        },
        {
            "message": "Missing item type",
            "line": " client/lib/angular/angular-animate.js:1"
        },
        {
            "message": "Missing item type\n# ngAnimate\n\nThe `ngAnimate` module provides support for JavaScript, CSS3 transition and CSS3 keyframe animation hooks within existing core and custom directives.\n\n{@installModule animate}\n\n<div doc-module-components=\"ngAnimate\"></div>\n\n# Usage\n\nTo see animations in action, all that is required is to define the appropriate CSS classes\nor to register a JavaScript animation via the myModule.animation() function. The directives that support animation automatically are:\n`ngRepeat`, `ngInclude`, `ngIf`, `ngSwitch`, `ngShow`, `ngHide`, `ngView` and `ngClass`. Custom directives can take advantage of animation\nby using the `$animate` service.\n\nBelow is a more detailed breakdown of the supported animation events provided by pre-existing ng directives:\n\n| Directive                                                 | Supported Animations                               |\n|---------------------------------------------------------- |----------------------------------------------------|\n| {@link ng.directive:ngRepeat#usage_animations ngRepeat}         | enter, leave and move                              |\n| {@link ngRoute.directive:ngView#usage_animations ngView}        | enter and leave                                    |\n| {@link ng.directive:ngInclude#usage_animations ngInclude}       | enter and leave                                    |\n| {@link ng.directive:ngSwitch#usage_animations ngSwitch}         | enter and leave                                    |\n| {@link ng.directive:ngIf#usage_animations ngIf}                 | enter and leave                                    |\n| {@link ng.directive:ngClass#usage_animations ngClass}           | add and remove                                     |\n| {@link ng.directive:ngShow#usage_animations ngShow & ngHide}    | add and remove (the ng-hide class value)           |\n\nYou can find out more information about animations upon visiting each directive page.\n\nBelow is an example of how to apply animations to a directive that supports animation hooks:\n\n<pre>\n<style type=\"text/css\">\n.slide.ng-enter, .slide.ng-leave {\n  -webkit-transition:0.5s linear all;\n  transition:0.5s linear all;\n}\n\n.slide.ng-enter { }        /&#42; starting animations for enter &#42;/\n.slide.ng-enter-active { } /&#42; terminal animations for enter &#42;/\n.slide.ng-leave { }        /&#42; starting animations for leave &#42;/\n.slide.ng-leave-active { } /&#42; terminal animations for leave &#42;/\n</style>\n\n<!--\nthe animate service will automatically add .ng-enter and .ng-leave to the element\nto trigger the CSS transition/animations\n-->\n<ANY class=\"slide\" ng-include=\"...\"></ANY>\n</pre>\n\nKeep in mind that if an animation is running, any child elements cannot be animated until the parent element's\nanimation has completed.\n\n<h2>CSS-defined Animations</h2>\nThe animate service will automatically apply two CSS classes to the animated element and these two CSS classes\nare designed to contain the start and end CSS styling. Both CSS transitions and keyframe animations are supported\nand can be used to play along with this naming structure.\n\nThe following code below demonstrates how to perform animations using **CSS transitions** with Angular:\n\n<pre>\n<style type=\"text/css\">\n/&#42;\n The animate class is apart of the element and the ng-enter class\n is attached to the element once the enter animation event is triggered\n&#42;/\n.reveal-animation.ng-enter {\n -webkit-transition: 1s linear all; /&#42; Safari/Chrome &#42;/\n transition: 1s linear all; /&#42; All other modern browsers and IE10+ &#42;/\n\n /&#42; The animation preparation code &#42;/\n opacity: 0;\n}\n\n/&#42;\n Keep in mind that you want to combine both CSS\n classes together to avoid any CSS-specificity\n conflicts\n&#42;/\n.reveal-animation.ng-enter.ng-enter-active {\n /&#42; The animation code itself &#42;/\n opacity: 1;\n}\n</style>\n\n<div class=\"view-container\">\n  <div ng-view class=\"reveal-animation\"></div>\n</div>\n</pre>\n\nThe following code below demonstrates how to perform animations using **CSS animations** with Angular:\n\n<pre>\n<style type=\"text/css\">\n.reveal-animation.ng-enter {\n  -webkit-animation: enter_sequence 1s linear; /&#42; Safari/Chrome &#42;/\n  animation: enter_sequence 1s linear; /&#42; IE10+ and Future Browsers &#42;/\n}\n&#64-webkit-keyframes enter_sequence {\n  from { opacity:0; }\n  to { opacity:1; }\n}\n&#64keyframes enter_sequence {\n  from { opacity:0; }\n  to { opacity:1; }\n}\n</style>\n\n<div class=\"view-container\">\n  <div ng-view class=\"reveal-animation\"></div>\n</div>\n</pre>\n\nBoth CSS3 animations and transitions can be used together and the animate service will figure out the correct duration and delay timing.\n\nUpon DOM mutation, the event class is added first (something like `ng-enter`), then the browser prepares itself to add\nthe active class (in this case `ng-enter-active`) which then triggers the animation. The animation module will automatically\ndetect the CSS code to determine when the animation ends. Once the animation is over then both CSS classes will be\nremoved from the DOM. If a browser does not support CSS transitions or CSS animations then the animation will start and end\nimmediately resulting in a DOM element that is at its final state. This final state is when the DOM element\nhas no CSS transition/animation classes applied to it.\n\n<h3>CSS Staggering Animations</h3>\nA Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a\ncurtain-like effect. The ngAnimate module, as of 1.2.0, supports staggering animations and the stagger effect can be\nperformed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for\nthe animation. The style property expected within the stagger class can either be a **transition-delay** or an\n**animation-delay** property (or both if your animation contains both transitions and keyframe animations).\n\n<pre>\n.my-animation.ng-enter {\n  /&#42; standard transition code &#42;/\n  -webkit-transition: 1s linear all;\n  transition: 1s linear all;\n  opacity:0;\n}\n.my-animation.ng-enter-stagger {\n  /&#42; this will have a 100ms delay between each successive leave animation &#42;/\n  -webkit-transition-delay: 0.1s;\n  transition-delay: 0.1s;\n\n  /&#42; in case the stagger doesn't work then these two values\n   must be set to 0 to avoid an accidental CSS inheritance &#42;/\n  -webkit-transition-duration: 0s;\n  transition-duration: 0s;\n}\n.my-animation.ng-enter.ng-enter-active {\n  /&#42; standard transition styles &#42;/\n  opacity:1;\n}\n</pre>\n\nStaggering animations work by default in ngRepeat (so long as the CSS class is defiend). Outside of ngRepeat, to use staggering animations\non your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this\nare that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation\nwill also be reset if more than 10ms has passed after the last animation has been fired.\n\nThe following code will issue the **ng-leave-stagger** event on the element provided:\n\n<pre>\nvar kids = parent.children();\n\n$animate.leave(kids[0]); //stagger index=0\n$animate.leave(kids[1]); //stagger index=1\n$animate.leave(kids[2]); //stagger index=2\n$animate.leave(kids[3]); //stagger index=3\n$animate.leave(kids[4]); //stagger index=4\n\n$timeout(function() {\n  //stagger has reset itself\n  $animate.leave(kids[5]); //stagger index=0\n  $animate.leave(kids[6]); //stagger index=1\n}, 100, false);\n</pre>\n\nStagger animations are currently only supported within CSS-defined animations.\n\n<h2>JavaScript-defined Animations</h2>\nIn the event that you do not want to use CSS3 transitions or CSS3 animations or if you wish to offer animations on browsers that do not\nyet support CSS transitions/animations, then you can make use of JavaScript animations defined inside of your AngularJS module.\n\n<pre>\n//!annotate=\"YourApp\" Your AngularJS Module|Replace this or ngModule with the module that you used to define your application.\nvar ngModule = angular.module('YourApp', []);\nngModule.animation('.my-crazy-animation', function() {\n  return {\n    enter: function(element, done) {\n      //run the animation here and call done when the animation is complete\n      return function(cancelled) {\n        //this (optional) function will be called when the animation\n        //completes or when the animation is cancelled (the cancelled\n        //flag will be set to true if cancelled).\n      }\n    }\n    leave: function(element, done) { },\n    move: function(element, done) { },\n\n    //animation that can be triggered before the class is added\n    beforeAddClass: function(element, className, done) { },\n\n    //animation that can be triggered after the class is added\n    addClass: function(element, className, done) { },\n\n    //animation that can be triggered before the class is removed\n    beforeRemoveClass: function(element, className, done) { },\n\n    //animation that can be triggered after the class is removed\n    removeClass: function(element, className, done) { }\n  }\n});\n</pre>\n\nJavaScript-defined animations are created with a CSS-like class selector and a collection of events which are set to run\na javascript callback function. When an animation is triggered, $animate will look for a matching animation which fits\nthe element's CSS class attribute value and then run the matching animation event function (if found).\nIn other words, if the CSS classes present on the animated element match any of the JavaScript animations then the callback function\nbe executed. It should be also noted that only simple, single class selectors are allowed (compound class selectors are not supported).\n\nWithin a JavaScript animation, an object containing various event callback animation functions is expected to be returned.\nAs explained above, these callbacks are triggered based on the animation event. Therefore if an enter animation is run,\nand the JavaScript animation is found, then the enter callback will handle that animation (in addition to the CSS keyframe animation\nor transition code that is defined via a stylesheet).",
            "line": " client/lib/angular/angular-animate.js:10"
        },
        {
            "message": "Missing item type\nThe `$animateProvider` allows developers to register JavaScript animation event handlers directly inside of a module.\nWhen an animation is triggered, the $animate service will query the $animate service to find any animations that match\nthe provided name value.\n\nRequires the {@link ngAnimate `ngAnimate`} module to be installed.\n\nPlease visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.",
            "line": " client/lib/angular/angular-animate.js:243"
        },
        {
            "message": "Missing item type\nTriggers a custom animation event based off the className variable and then attaches the className value to the element as a CSS class.\nUnlike the other animation methods, the animate service will suffix the className value with {@type -add} in order to provide\nthe animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if no CSS transitions\nor keyframes are defined on the -add or base CSS class).\n\nBelow is a breakdown of each step that occurs during addClass animation:\n\n| Animation Step                                                                                 | What the element class attribute looks like |\n|------------------------------------------------------------------------------------------------|---------------------------------------------|\n| 1. $animate.addClass(element, 'super') is called                                               | class=\"my-animation\"                        |\n| 2. $animate runs any JavaScript-defined animations on the element                              | class=\"my-animation ng-animate\"             |\n| 3. the .super-add class are added to the element                                               | class=\"my-animation ng-animate super-add\"   |\n| 4. $animate scans the element styles to get the CSS transition/animation duration and delay    | class=\"my-animation ng-animate super-add\"   |\n| 5. $animate waits for 10ms (this performs a reflow)                                            | class=\"my-animation ng-animate super-add\"   |\n| 6. the .super, .super-add-active and .ng-animate-active classes are added (this triggers the CSS transition/animation) | class=\"my-animation ng-animate ng-animate-active super super-add super-add-active\"          |\n| 7. $animate waits for X milliseconds for the animation to complete                             | class=\"my-animation super-add super-add-active\"  |\n| 8. The animation ends and all generated CSS classes are removed from the element               | class=\"my-animation super\"                  |\n| 9. The super class is kept on the element                                                      | class=\"my-animation super\"                  |\n| 10. The doneCallback() callback is fired (if provided)                                         | class=\"my-animation super\"                  |",
            "line": " client/lib/angular/angular-animate.js:440"
        },
        {
            "message": "Missing item type\nTriggers a custom animation event based off the className variable and then removes the CSS class provided by the className value\nfrom the element. Unlike the other animation methods, the animate service will suffix the className value with {@type -remove} in\norder to provide the animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if\nno CSS transitions or keyframes are defined on the -remove or base CSS classes).\n\nBelow is a breakdown of each step that occurs during removeClass animation:\n\n| Animation Step                                                                                | What the element class attribute looks like     |\n|-----------------------------------------------------------------------------------------------|---------------------------------------------|\n| 1. $animate.removeClass(element, 'super') is called                                           | class=\"my-animation super\"                  |\n| 2. $animate runs any JavaScript-defined animations on the element                             | class=\"my-animation super ng-animate\"       |\n| 3. the .super-remove class are added to the element                                           | class=\"my-animation super ng-animate super-remove\"|\n| 4. $animate scans the element styles to get the CSS transition/animation duration and delay   | class=\"my-animation super ng-animate super-remove\"   |\n| 5. $animate waits for 10ms (this performs a reflow)                                           | class=\"my-animation super ng-animate super-remove\"   |\n| 6. the .super-remove-active and .ng-animate-active classes are added and .super is removed (this triggers the CSS transition/animation) | class=\"my-animation ng-animate ng-animate-active super-remove super-remove-active\"          |\n| 7. $animate waits for X milliseconds for the animation to complete                            | class=\"my-animation ng-animate ng-animate-active super-remove super-remove-active\"   |\n| 8. The animation ends and all generated CSS classes are removed from the element              | class=\"my-animation\"                        |\n| 9. The doneCallback() callback is fired (if provided)                                         | class=\"my-animation\"                        |",
            "line": " client/lib/angular/angular-animate.js:476"
        },
        {
            "message": "Missing item type",
            "line": " client/lib/angular/angular-cookies.js:1"
        },
        {
            "message": "Missing item type\n# ngCookies\n\nThe `ngCookies` module provides a convenient wrapper for reading and writing browser cookies. \n\n{@installModule cookies}\n\n<div doc-module-components=\"ngCookies\"></div>\n\nSee {@link ngCookies.$cookies `$cookies`} and\n{@link ngCookies.$cookieStore `$cookieStore`} for usage.",
            "line": " client/lib/angular/angular-cookies.js:8"
        },
        {
            "message": "Missing item type\nProvides read/write access to browser's cookies.\n\nOnly a simple Object is exposed and by adding or removing properties to/from\nthis object, new cookies are created/deleted at the end of current $eval.\n\nRequires the {@link ngCookies `ngCookies`} module to be installed.",
            "line": " client/lib/angular/angular-cookies.js:27"
        },
        {
            "message": "Missing item type\nPushes all the cookies from the service to the browser and verifies if all cookies were\nstored.",
            "line": " client/lib/angular/angular-cookies.js:83"
        },
        {
            "message": "Missing item type\nProvides a key-value (string-object) storage, that is backed by session cookies.\nObjects put or retrieved from this storage are automatically serialized or\ndeserialized by angular's toJson/fromJson.\n\nRequires the {@link ngCookies `ngCookies`} module to be installed.",
            "line": " client/lib/angular/angular-cookies.js:136"
        },
        {
            "message": "Missing item type\nReturns the value of given cookie key",
            "line": " client/lib/angular/angular-cookies.js:153"
        },
        {
            "message": "Missing item type\nSets a value for given cookie key",
            "line": " client/lib/angular/angular-cookies.js:169"
        },
        {
            "message": "Missing item type\nRemove given cookie",
            "line": " client/lib/angular/angular-cookies.js:184"
        },
        {
            "message": "Missing item type",
            "line": " client/lib/angular/angular-loader.js:1"
        },
        {
            "message": "Missing item type\nInterface for configuring angular {@link angular.module modules}.",
            "line": " client/lib/angular/angular-loader.js:9"
        },
        {
            "message": "Missing item type",
            "line": " client/lib/angular/angular-loader.js:26"
        },
        {
            "message": "Missing item type\nThe `angular.module` is a global place for creating, registering and retrieving Angular\nmodules.\nAll modules (angular core or 3rd party) that should be available to an application must be\nregistered using this mechanism.\n\nWhen passed two or more arguments, a new module is created.  If passed only one argument, an\nexisting module (the name passed as the first argument to `module`) is retrieved.\n\n\n# Module\n\nA module is a collection of services, directives, filters, and configuration information.\n`angular.module` is used to configure the {@link AUTO.$injector $injector}.\n\n<pre>\n// Create a new module\nvar myModule = angular.module('myModule', []);\n\n// register a new service\nmyModule.value('appName', 'MyCoolApp');\n\n// configure existing services inside initialization blocks.\nmyModule.config(function($locationProvider) {'use strict';\n  // Configure existing providers\n  $locationProvider.hashPrefix('!');\n});\n</pre>\n\nThen you can create an injector and load your modules like this:\n\n<pre>\nvar injector = angular.injector(['ng', 'MyModule'])\n</pre>\n\nHowever it's more likely that you'll just use\n{@link ng.directive:ngApp ngApp} or\n{@link angular.bootstrap} to simplify this process for you.",
            "line": " client/lib/angular/angular-loader.js:29"
        },
        {
            "message": "Missing item type",
            "line": " client/lib/angular/angular-loader.js:91"
        },
        {
            "message": "Missing item type",
            "line": " client/lib/angular/angular-loader.js:94"
        },
        {
            "message": "Missing item type",
            "line": " client/lib/angular/angular-loader.js:99"
        },
        {
            "message": "Missing item type\nHolds the list of modules which the injector will load before the current module is\nloaded.",
            "line": " client/lib/angular/angular-loader.js:105"
        },
        {
            "message": "Missing item type",
            "line": " client/lib/angular/angular-loader.js:116"
        },
        {
            "message": "Missing item type\nSee {@link AUTO.$provide#provider $provide.provider()}.",
            "line": " client/lib/angular/angular-loader.js:126"
        },
        {
            "message": "Missing item type\nSee {@link AUTO.$provide#factory $provide.factory()}.",
            "line": " client/lib/angular/angular-loader.js:138"
        },
        {
            "message": "Missing item type\nSee {@link AUTO.$provide#service $provide.service()}.",
            "line": " client/lib/angular/angular-loader.js:149"
        },
        {
            "message": "Missing item type\nSee {@link AUTO.$provide#value $provide.value()}.",
            "line": " client/lib/angular/angular-loader.js:160"
        },
        {
            "message": "Missing item type\nBecause the constant are fixed, they get applied before other provide methods.\nSee {@link AUTO.$provide#constant $provide.constant()}.",
            "line": " client/lib/angular/angular-loader.js:171"
        },
        {
            "message": "Missing item type\n**NOTE**: animations take effect only if the **ngAnimate** module is loaded.\n\n\nDefines an animation hook that can be later used with\n{@link ngAnimate.$animate $animate} service and directives that use this service.\n\n<pre>\nmodule.animation('.animation-name', function($inject1, $inject2) {\n  return {\n    eventName : function(element, done) {\n      //code to run the animation\n      //once complete, then run done()\n      return function cancellationFunction(element) {\n        //code to cancel the animation\n      }\n    }\n  }\n})\n</pre>\n\nSee {@link ngAnimate.$animateProvider#register $animateProvider.register()} and\n{@link ngAnimate ngAnimate module} for more information.",
            "line": " client/lib/angular/angular-loader.js:183"
        },
        {
            "message": "Missing item type\nSee {@link ng.$filterProvider#register $filterProvider.register()}.",
            "line": " client/lib/angular/angular-loader.js:217"
        },
        {
            "message": "Missing item type\nSee {@link ng.$controllerProvider#register $controllerProvider.register()}.",
            "line": " client/lib/angular/angular-loader.js:228"
        },
        {
            "message": "Missing item type\nSee {@link ng.$compileProvider#methods_directive $compileProvider.directive()}.",
            "line": " client/lib/angular/angular-loader.js:240"
        },
        {
            "message": "Missing item type\nUse this method to register work which needs to be performed on module loading.",
            "line": " client/lib/angular/angular-loader.js:253"
        },
        {
            "message": "Missing item type\nUse this method to register work which should be performed when the injector is done\nloading all modules.",
            "line": " client/lib/angular/angular-loader.js:264"
        },
        {
            "message": "Missing item type",
            "line": " client/lib/angular/angular-loader.js:286"
        },
        {
            "message": "Missing item type\nClosure compiler type information",
            "line": " client/lib/angular/angular-loader.js:306"
        },
        {
            "message": "Missing item type",
            "line": " client/lib/angular/angular-resource.js:1"
        },
        {
            "message": "Missing item type\n# ngResource\n\nThe `ngResource` module provides interaction support with RESTful services\nvia the $resource service.\n\n{@installModule resource}\n\n<div doc-module-components=\"ngResource\"></div>\n\nSee {@link ngResource.$resource `$resource`} for usage.",
            "line": " client/lib/angular/angular-resource.js:10"
        },
        {
            "message": "Missing item type\nA factory which creates a resource object that lets you interact with\n[RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.\n\nThe returned resource object has action methods which provide high-level behaviors without\nthe need to interact with the low level {@link ng.$http $http} service.\n\nRequires the {@link ngResource `ngResource`} module to be installed.",
            "line": " client/lib/angular/angular-resource.js:27"
        },
        {
            "message": "Missing item type\nWe need our custom method because encodeURIComponent is too aggressive and doesn't follow\nhttp://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path\nsegments:\n   segment       = *pchar\n   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   pct-encoded   = \"%\" HEXDIG HEXDIG\n   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                    / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
            "line": " client/lib/angular/angular-resource.js:310"
        },
        {
            "message": "Missing item type\nThis method is intended for encoding *key* or *value* parts of query component. We need a\ncustom method because encodeURIComponent is too aggressive and encodes stuff that doesn't\nhave to be encoded per http://tools.ietf.org/html/rfc3986:\n   query       = *( pchar / \"/\" / \"?\" )\n   pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   pct-encoded   = \"%\" HEXDIG HEXDIG\n   sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n                    / \"*\" / \"+\" / \",\" / \";\" / \"=\"",
            "line": " client/lib/angular/angular-resource.js:329"
        },
        {
            "message": "Missing item type",
            "line": " client/lib/angular/angular-route.js:1"
        },
        {
            "message": "Missing item type\n# ngRoute\n\nThe `ngRoute` module provides routing and deeplinking services and directives for angular apps.\n\n{@installModule route}\n\n<div doc-module-components=\"ngRoute\"></div>",
            "line": " client/lib/angular/angular-route.js:8"
        },
        {
            "message": "Missing item type\nAdds a new route definition to the `$route` service.",
            "line": " client/lib/angular/angular-route.js:43"
        },
        {
            "message": "Missing item type\nNormalizes the given path, returning a regular expression\nand the original path.\n\nInspired by pathRexp in visionmedia/express/lib/utils.js.",
            "line": " client/lib/angular/angular-route.js:165"
        },
        {
            "message": "Missing item type\nSets route definition that will be used on route change when no other route definition\nis matched.",
            "line": " client/lib/angular/angular-route.js:206"
        },
        {
            "message": "Missing item type\nBroadcasted before a route change. At this  point the route services starts\nresolving all of the dependencies needed for the route change to occurs.\nTypically this involves fetching the view template as well as any dependencies\ndefined in `resolve` route property. Once  all of the dependencies are resolved\n`$routeChangeSuccess` is fired.",
            "line": " client/lib/angular/angular-route.js:364"
        },
        {
            "message": "Missing item type\nBroadcasted after a route dependencies are resolved.\n{@link ngRoute.directive:ngView ngView} listens for the directive\nto instantiate the controller and render the view.",
            "line": " client/lib/angular/angular-route.js:381"
        },
        {
            "message": "Missing item type\nBroadcasted if any of the resolve promises are rejected.",
            "line": " client/lib/angular/angular-route.js:397"
        },
        {
            "message": "Missing item type\nThe `reloadOnSearch` property has been set to false, and we are reusing the same\ninstance of the Controller.",
            "line": " client/lib/angular/angular-route.js:411"
        },
        {
            "message": "Missing item type\nCauses `$route` service to reload the current route even if\n{@link ng.$location $location} hasn't changed.\n\nAs a result of that, {@link ngRoute.directive:ngView ngView}\ncreates new scope, reinstantiates the controller.",
            "line": " client/lib/angular/angular-route.js:426"
        },
        {
            "message": "Missing item type\nCheck if the route matches the current url.\n\nInspired by match in\nvisionmedia/express/lib/router/router.js.",
            "line": " client/lib/angular/angular-route.js:450"
        },
        {
            "message": "Missing item type",
            "line": " client/lib/angular/angular-route.js:560"
        },
        {
            "message": "Missing item type",
            "line": " client/lib/angular/angular-route.js:578"
        },
        {
            "message": "Missing item type\nThe `$routeParams` service allows you to retrieve the current set of route parameters.\n\nRequires the {@link ngRoute `ngRoute`} module to be installed.\n\nThe route parameters are a combination of {@link ng.$location `$location`}'s\n{@link ng.$location#methods_search `search()`} and {@link ng.$location#methods_path `path()`}.\nThe `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.\n\nIn case of parameter name collision, `path` params take precedence over `search` params.\n\nThe service guarantees that the identity of the `$routeParams` object will remain unchanged\n(but its properties will likely change) even when a route change occurs.\n\nNote that the `$routeParams` are only updated *after* a route change completes successfully.\nThis means that you cannot rely on `$routeParams` being correct in route resolve functions.\nInstead you can use `$route.current.params` to access the new route's parameters.",
            "line": " client/lib/angular/angular-route.js:602"
        },
        {
            "message": "Missing item type\n# Overview\n`ngView` is a directive that complements the {@link ngRoute.$route $route} service by\nincluding the rendered template of the current route into the main layout (`index.html`) file.\nEvery time the current route changes, the included view changes with it according to the\nconfiguration of the `$route` service.\n\nRequires the {@link ngRoute `ngRoute`} module to be installed.",
            "line": " client/lib/angular/angular-route.js:641"
        },
        {
            "message": "Missing item type\nEmitted every time the ngView content is reloaded.",
            "line": " client/lib/angular/angular-route.js:797"
        },
        {
            "message": "Missing item type",
            "line": " client/lib/angular/angular-sanitize.js:1"
        },
        {
            "message": "Missing item type\n# ngSanitize\n\nThe `ngSanitize` module provides functionality to sanitize HTML.\n\n{@installModule sanitize}\n\n<div doc-module-components=\"ngSanitize\"></div>\n\nSee {@link ngSanitize.$sanitize `$sanitize`} for usage.",
            "line": " client/lib/angular/angular-sanitize.js:10"
        },
        {
            "message": "Missing item type",
            "line": " client/lib/angular/angular-sanitize.js:210"
        },
        {
            "message": "Missing item type\ndecodes all entities into regular string",
            "line": " client/lib/angular/angular-sanitize.js:354"
        },
        {
            "message": "Missing item type\nEscapes all potentially dangerous characters, so that the\nresulting string can be safely inserted into attribute or\nelement text.",
            "line": " client/lib/angular/angular-sanitize.js:365"
        },
        {
            "message": "Missing item type\ncreate an HTML/XML writer which writes to buffer",
            "line": " client/lib/angular/angular-sanitize.js:382"
        },
        {
            "message": "Missing item type",
            "line": " client/lib/angular/angular-touch.js:1"
        },
        {
            "message": "Missing item type\n# ngTouch\n\nThe `ngTouch` module provides touch events and other helpers for touch-enabled devices.\nThe implementation is based on jQuery Mobile touch event handling \n([jquerymobile.com](http://jquerymobile.com/)).\n\n{@installModule touch}\n\nSee {@link ngTouch.$swipe `$swipe`} for usage.\n\n<div doc-module-components=\"ngTouch\"></div>",
            "line": " client/lib/angular/angular-touch.js:8"
        },
        {
            "message": "Missing item type\nThe `$swipe` service is a service that abstracts the messier details of hold-and-drag swipe\nbehavior, to make implementing swipe-related directives more convenient.\n\nRequires the {@link ngTouch `ngTouch`} module to be installed.\n\n`$swipe` is used by the `ngSwipeLeft` and `ngSwipeRight` directives in `ngTouch`, and by\n`ngCarousel` in a separate component.\n\n# Usage\nThe `$swipe` service is an object with a single method: `bind`. `bind` takes an element\nwhich is to be watched for swipes, and an object with four handler functions. See the\ndocumentation for `bind` below.",
            "line": " client/lib/angular/angular-touch.js:33"
        },
        {
            "message": "Missing item type\nThe main method of `$swipe`. It takes an element to be watched for swipe motions, and an\nobject containing event handlers.\n\nThe four events are `start`, `move`, `end`, and `cancel`. `start`, `move`, and `end`\nreceive as a parameter a coordinates object of the form `{ x: 150, y: 310 }`.\n\n`start` is called on either `mousedown` or `touchstart`. After this event, `$swipe` is\nwatching for `touchmove` or `mousemove` events. These events are ignored until the total\ndistance moved in either dimension exceeds a small threshold.\n\nOnce this threshold is exceeded, either the horizontal or vertical delta is greater.\n- If the horizontal distance is greater, this is a swipe and `move` and `end` events follow.\n- If the vertical distance is greater, this is a scroll, and we let the browser take over.\n  A `cancel` event is sent.\n\n`move` is called on `mousemove` and `touchmove` after the above logic has determined that\na swipe is in progress.\n\n`end` is called when a swipe is successfully completed with a `touchend` or `mouseup`.\n\n`cancel` is called either on a `touchcancel` from the browser, or when we begin scrolling\nas described above.",
            "line": " client/lib/angular/angular-touch.js:70"
        },
        {
            "message": "Missing item type\nA more powerful replacement for the default ngClick designed to be used on touchscreen\ndevices. Most mobile browsers wait about 300ms after a tap-and-release before sending\nthe click event. This version handles them immediately, and then prevents the\nfollowing click event from propagating.\n\nRequires the {@link ngTouch `ngTouch`} module to be installed.\n\nThis directive can fall back to using an ordinary click event, and so works on desktop\nbrowsers as well as mobile.\n\nThis directive also sets the CSS class `ng-click-active` while the element is being held\ndown (by a mouse click or touch) so you can restyle the depressed element if you wish.",
            "line": " client/lib/angular/angular-touch.js:169"
        },
        {
            "message": "Missing item type\nSpecify custom behavior when an element is swiped to the left on a touchscreen device.\nA leftward swipe is a quick, right-to-left slide of the finger.\nThough ngSwipeLeft is designed for touch-based devices, it will work with a mouse click and drag\ntoo.\n\nRequires the {@link ngTouch `ngTouch`} module to be installed.",
            "line": " client/lib/angular/angular-touch.js:443"
        },
        {
            "message": "Missing item type\nSpecify custom behavior when an element is swiped to the right on a touchscreen device.\nA rightward swipe is a quick, left-to-right slide of the finger.\nThough ngSwipeRight is designed for touch-based devices, it will work with a mouse click and drag\ntoo.\n\nRequires the {@link ngTouch `ngTouch`} module to be installed.",
            "line": " client/lib/angular/angular-touch.js:473"
        },
        {
            "message": "Missing item type\nVersion: 1.0 Alpha-1 \nBuild Date: 13-Nov-2007\nCopyright (c) 2006-2007, Coolite Inc. (http://www.coolite.com/). All rights reserved.\nLicense: Licensed under The MIT License. See license.txt and http://www.datejs.com/license/. \nWebsite: http://www.datejs.com/ or http://www.coolite.com/datejs/",
            "line": " client/lib/date/date.js:1"
        },
        {
            "message": "Missing item type",
            "line": " frontend/api/resources/GenericAbstractResource.cfc:195"
        },
        {
            "message": "Missing item type\nbase init method saves data all extending components will need. Private so only provides super \n\tfunctionality.",
            "line": " meta/docs/DocumentationService/BaseDocumentationService.cfc:84"
        },
        {
            "message": "Missing item type\nThis will return all documentation items list for a file type such as .cfc or .js",
            "line": " meta/docs/DocumentationService/BaseDocumentationService.cfc:96"
        },
        {
            "message": "Missing item type\nReturns the meta data for an item indexed by name.",
            "line": " meta/docs/DocumentationService/BaseDocumentationService.cfc:104"
        },
        {
            "message": "Missing item type\nThis will return use private helper methods to find meta for some filetype as defined by someone \n\telse.",
            "line": " meta/docs/DocumentationService/BaseDocumentationService.cfc:116"
        },
        {
            "message": "Missing item type\nInitializes this service.",
            "line": " meta/docs/DocumentationService/ColdFusionDocumentationService.cfc:49"
        },
        {
            "message": "Missing item type\nThis will return all a list of documentation for a file type such as .cfc",
            "line": " meta/docs/DocumentationService/ColdFusionDocumentationService.cfc:60"
        },
        {
            "message": "Missing item type\nReturns the meta data for an item indexed by name.",
            "line": " meta/docs/DocumentationService/ColdFusionDocumentationService.cfc:73"
        },
        {
            "message": "Missing item type\nHelper method to get meta from a cold fusion source file.",
            "line": " meta/docs/DocumentationService/ColdFusionDocumentationService.cfc:84"
        },
        {
            "message": "Missing item type\nSimply returns all files stored in the File[] as dot path",
            "line": " meta/docs/DocumentationService/ColdFusionDocumentationService.cfc:103"
        },
        {
            "message": "Missing item type",
            "line": " meta/docs/DocumentationService/ColdFusionDocumentationService.cfc:129"
        },
        {
            "message": "Missing item type\nFinds all the files starting with root.",
            "line": " meta/docs/DocumentationService/ColdFusionDocumentationService.cfc:140"
        },
        {
            "message": "Missing item type\nTakes a fileName with full path (Dot notation) and grabs the meta data\nand pushes it into the AllDocumentationItems.",
            "line": " meta/docs/DocumentationService/ColdFusionDocumentationService.cfc:157"
        },
        {
            "message": "Missing item type\nHelper method trimAndRemoveExt",
            "line": " meta/docs/DocumentationService/ColdFusionDocumentationService.cfc:172"
        },
        {
            "message": "Missing item type\nThis will be the primary web service to access the documentation API.",
            "line": " meta/docs/DocumentationService/DocumentationWebService.cfc:1"
        },
        {
            "message": "Missing item type",
            "line": " meta/docs/DocumentationService/DocumentationWebService.cfc:59"
        },
        {
            "message": "Missing item type\nSimply returns all files stored in the File[] as dot path",
            "line": " meta/docs/DocumentationService/DocumentationWebService.cfc:83"
        },
        {
            "message": "Missing item type\n=Removes the leading '/' and replaces the rest with '.'",
            "line": " meta/docs/DocumentationService/DocumentationWebService.cfc:98"
        },
        {
            "message": "Missing item type\nFinds all the files starting with root.",
            "line": " meta/docs/DocumentationService/DocumentationWebService.cfc:110"
        },
        {
            "message": "Missing item type\nTakes a fileName with full path (Dot notation) and grabs the meta data\nand pushes it into the AllDocumentationItems.",
            "line": " meta/docs/DocumentationService/DocumentationWebService.cfc:127"
        },
        {
            "message": "Missing item type\nParse JS file and add back into the file list",
            "line": " meta/docs/DocumentationService/DocumentationWebService.cfc:148"
        },
        {
            "message": "Missing item type\nHelper method trimAndRemoveExt",
            "line": " meta/docs/DocumentationService/DocumentationWebService.cfc:155"
        },
        {
            "message": "Missing item type\nThis will return true if the list has another directory and false if the end is reached",
            "line": " meta/docs/DocumentationService/DocumentationWebService.cfc:165"
        },
        {
            "message": "Missing item type\nThis will return true if the list has another file and false if the end is reached",
            "line": " meta/docs/DocumentationService/DocumentationWebService.cfc:172"
        },
        {
            "message": "Missing item type\nParse custom annotations list",
            "line": " meta/docs/DocumentationService/DocumentationWebService.cfc:179"
        },
        {
            "message": "Missing item type\nThis will return true on an annotation match, false otherwise.",
            "line": " meta/docs/DocumentationService/DocumentationWebService.cfc:186"
        },
        {
            "message": "Missing item type\nProcesses a comment in a file and returns a struct of tags for that file",
            "line": " meta/docs/DocumentationService/DocumentationWebService.cfc:196"
        },
        {
            "message": "Missing item type\nGets the next comment in a file\nA comment here is defined as the multiline comment (docs style) found\nin both coldfusion and javascrip.",
            "line": " meta/docs/DocumentationService/DocumentationWebService.cfc:207"
        },
        {
            "message": "Missing item type\nSearch file will return a struct of matched text in a file using passed in regex or plain text.",
            "line": " meta/docs/DocumentationService/DocumentationWebService.cfc:221"
        },
        {
            "message": "Missing item type\njsDoc is a port of jsDoc from javascript to coldfusion. It parses jsDoc comments.",
            "line": " meta/docs/DocumentationService/JSDoc.cfc:2"
        },
        {
            "message": "Missing item type\nWhen function is found in a file, this proceses it.",
            "line": " meta/docs/DocumentationService/JSDoc.cfc:34"
        },
        {
            "message": "Missing item type\nWhen a function prototype is found, this processes it.",
            "line": " meta/docs/DocumentationService/JSDoc.cfc:41"
        },
        {
            "message": "Missing item type\nWhen a comment is found this parses the tags from the comment.",
            "line": " meta/docs/DocumentationService/JSDoc.cfc:48"
        },
        {
            "message": "Missing item type\nThis is the main parser that calls the other methods.",
            "line": " meta/docs/DocumentationService/JSDoc.cfc:55"
        },
        {
            "message": "Missing item type\nHelper method for finding and grabbing all regex matches in this case, javadoc comments.",
            "line": " meta/docs/DocumentationService/JSDoc.cfc:80"
        },
        {
            "message": "Missing item type\nInitializes this service to search for a specific file extension in a specific directory.",
            "line": " meta/docs/DocumentationService/JavaScriptDocumentationService.cfc:50"
        },
        {
            "message": "Missing item type\nThis will return all a list of documentation for a file type such as .js",
            "line": " meta/docs/DocumentationService/JavaScriptDocumentationService.cfc:62"
        },
        {
            "message": "Missing item type\nReturns the meta data for an item indexed by name.",
            "line": " meta/docs/DocumentationService/JavaScriptDocumentationService.cfc:75"
        },
        {
            "message": "Missing item type\nHelper method to get meta from a cold fusion source file.",
            "line": " meta/docs/DocumentationService/JavaScriptDocumentationService.cfc:94"
        },
        {
            "message": "Missing item type\nSimply returns all files stored in the File[] as dot path",
            "line": " meta/docs/DocumentationService/JavaScriptDocumentationService.cfc:113"
        },
        {
            "message": "Missing item type\n=Removes the leading '/' and replaces the rest with '.'",
            "line": " meta/docs/DocumentationService/JavaScriptDocumentationService.cfc:138"
        },
        {
            "message": "Missing item type\nFinds all the files starting with root.",
            "line": " meta/docs/DocumentationService/JavaScriptDocumentationService.cfc:150"
        },
        {
            "message": "Missing item type\nTakes a fileName with full path (Dot notation) and grabs the meta data\nand pushes it into the AllDocumentationItems.",
            "line": " meta/docs/DocumentationService/JavaScriptDocumentationService.cfc:167"
        },
        {
            "message": "Missing item type\nHelper method trimAndRemoveExt",
            "line": " meta/docs/DocumentationService/JavaScriptDocumentationService.cfc:183"
        },
        {
            "message": "Missing item type\nParses JS files for meta data.",
            "line": " meta/docs/DocumentationService/JavaScriptDocumentationService.cfc:193"
        },
        {
            "message": "Missing item type\nHelper method for finding and grabbing all regex matches in this case, javadoc comments.",
            "line": " meta/docs/DocumentationService/JavaScriptDocumentationService.cfc:231"
        },
        {
            "message": "Missing item type\nHelper function for finding annotations inside of comments.",
            "line": " meta/docs/DocumentationService/JavaScriptDocumentationService.cfc:250"
        },
        {
            "message": "Missing item type\nHandles rendering the body of the markdown on click.",
            "line": " meta/docs/js/controllers/BodyController.js:1"
        },
        {
            "message": "Missing item type\nHandles generating a navigation bar from the readme.md files that live throughout Slatwall.\nReference Section:\n\t\tAPI Access Points\n\t\t\tREST API readme.md with other references coming from the main.cfc in the API directory\n\t\t\tColdFusion API readme.md in Hibachi Scope with examples\n\t\t\tAngularJS  API readme.md in slatscope\n\n\t\tModel\n\t\t\tEntities + Custom\n\t\t\tServices + Custom\n\t\t\tDAO\t\t + Custom\n\t\t\tOther    + Custom\n\t\t\t\tProcess\n\t\t\t\tHandler + Custom\n\t\t\t\tReport + Custom\n\t\t\t\tService\n\t\t\t\tTransient \n\t\t\t\tValidation + Custom\n\t\tOther\n\t\t\tIntegrationServices\n\t\t\tTags\n\t\t\tTemplates\n\t\t\tResource Bundles\n\t\t\tAssets\n\t\t\tTests\n\t\t\tTags",
            "line": " meta/docs/js/controllers/NavController.js:1"
        },
        {
            "message": "Missing item type\nmarked - a markdown parser\nCopyright (c) 2011-2014, Christopher Jeffrey. (MIT Licensed)\nhttps://github.com/chjj/marked",
            "line": " meta/docs/js/lib/marked.js:1"
        },
        {
            "message": "Missing item type\nBlock-Level Grammar",
            "line": " meta/docs/js/lib/marked.js:9"
        },
        {
            "message": "Missing item type\nNormal Block Grammar",
            "line": " meta/docs/js/lib/marked.js:67"
        },
        {
            "message": "Missing item type\nGFM Block Grammar",
            "line": " meta/docs/js/lib/marked.js:73"
        },
        {
            "message": "Missing item type\nGFM + Tables Block Grammar",
            "line": " meta/docs/js/lib/marked.js:88"
        },
        {
            "message": "Missing item type\nBlock Lexer",
            "line": " meta/docs/js/lib/marked.js:97"
        },
        {
            "message": "Missing item type\nExpose Block Rules",
            "line": " meta/docs/js/lib/marked.js:116"
        },
        {
            "message": "Missing item type\nStatic Lex Method",
            "line": " meta/docs/js/lib/marked.js:122"
        },
        {
            "message": "Missing item type\nPreprocessing",
            "line": " meta/docs/js/lib/marked.js:131"
        },
        {
            "message": "Missing item type\nLexing",
            "line": " meta/docs/js/lib/marked.js:145"
        },
        {
            "message": "Missing item type\nInline-Level Grammar",
            "line": " meta/docs/js/lib/marked.js:444"
        },
        {
            "message": "Missing item type\nNormal Inline Grammar",
            "line": " meta/docs/js/lib/marked.js:476"
        },
        {
            "message": "Missing item type\nPedantic Inline Grammar",
            "line": " meta/docs/js/lib/marked.js:482"
        },
        {
            "message": "Missing item type\nGFM Inline Grammar",
            "line": " meta/docs/js/lib/marked.js:491"
        },
        {
            "message": "Missing item type\nGFM + Line Breaks Inline Grammar",
            "line": " meta/docs/js/lib/marked.js:505"
        },
        {
            "message": "Missing item type\nInline Lexer & Compiler",
            "line": " meta/docs/js/lib/marked.js:514"
        },
        {
            "message": "Missing item type\nExpose Inline Rules",
            "line": " meta/docs/js/lib/marked.js:541"
        },
        {
            "message": "Missing item type\nStatic Lexing/Compiling Method",
            "line": " meta/docs/js/lib/marked.js:547"
        },
        {
            "message": "Missing item type\nLexing/Compiling",
            "line": " meta/docs/js/lib/marked.js:556"
        },
        {
            "message": "Missing item type\nCompile Link",
            "line": " meta/docs/js/lib/marked.js:694"
        },
        {
            "message": "Missing item type\nSmartypants Transformations",
            "line": " meta/docs/js/lib/marked.js:707"
        },
        {
            "message": "Missing item type\nMangle Links",
            "line": " meta/docs/js/lib/marked.js:728"
        },
        {
            "message": "Missing item type\nRenderer",
            "line": " meta/docs/js/lib/marked.js:749"
        },
        {
            "message": "Missing item type\nParsing & Compiling",
            "line": " meta/docs/js/lib/marked.js:892"
        },
        {
            "message": "Missing item type\nStatic Parse Method",
            "line": " meta/docs/js/lib/marked.js:905"
        },
        {
            "message": "Missing item type\nParse Loop",
            "line": " meta/docs/js/lib/marked.js:914"
        },
        {
            "message": "Missing item type\nNext Token",
            "line": " meta/docs/js/lib/marked.js:930"
        },
        {
            "message": "Missing item type\nPreview Next Token",
            "line": " meta/docs/js/lib/marked.js:938"
        },
        {
            "message": "Missing item type\nParse Text Tokens",
            "line": " meta/docs/js/lib/marked.js:946"
        },
        {
            "message": "Missing item type\nParse Current Token",
            "line": " meta/docs/js/lib/marked.js:960"
        },
        {
            "message": "Missing item type\nHelpers",
            "line": " meta/docs/js/lib/marked.js:1072"
        },
        {
            "message": "Missing item type\nMarked",
            "line": " meta/docs/js/lib/marked.js:1131"
        },
        {
            "message": "Missing item type\nOptions",
            "line": " meta/docs/js/lib/marked.js:1219"
        },
        {
            "message": "Missing item type\nExpose",
            "line": " meta/docs/js/lib/marked.js:1245"
        },
        {
            "message": "Missing item type\nA tiny markdown to html translator.",
            "line": " meta/docs/js/lib/textile.js:1"
        },
        {
            "message": "Missing item type\nHandles displaying the rendered MD on a nav click.",
            "line": " meta/docs/js/routes/DocsMDRouter.js:1"
        },
        {
            "message": "Missing item type",
            "line": " meta/tests/functional/admin/DashboardTest.cfc:10"
        },
        {
            "message": "Missing item type",
            "line": " meta/tests/functional/admin/LoginPageTest.cfc:14"
        },
        {
            "message": "Missing item type",
            "line": " meta/tests/unit/service/DataServiceTest.cfc:59"
        },
        {
            "message": "Missing item type\nMakes a row of a query into a structure.",
            "line": " model/service/HibachiUtilityService.cfc:418"
        },
        {
            "message": "Missing item type\nexports the given query/array to file.",
            "line": " model/service/HibachiUtilityService.cfc:448"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/HibachiAssets/js/jquery-hashchange-1.3.min.js:1"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/HibachiAssets/js/jquery-typewatch-2.0.js:1"
        },
        {
            "message": "Missing item type\nGet the timezone offset as string from a date object (eg '+0530' for UTC+5.5)",
            "line": " org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js:1918"
        },
        {
            "message": "Missing item type\nGet the number in minutes that represents a timezone string",
            "line": " org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js:1941"
        },
        {
            "message": "Missing item type\nNo way to set timezone in js Date, so we must adjust the minutes to compensate. (think setDate, getDate)",
            "line": " org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js:1962"
        },
        {
            "message": "Missing item type\nCalls `timepicker()` on the `startTime` and `endTime` elements, and configures them to\nenforce date range limits.\nn.b. The input value must be correctly formatted (reformatting is not supported)",
            "line": " org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js:1976"
        },
        {
            "message": "Missing item type\nCalls `datetimepicker` on the `startTime` and `endTime` elements, and configures them to\nenforce date range limits.",
            "line": " org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js:1989"
        },
        {
            "message": "Missing item type\nCalls `method` on the `startTime` and `endTime` elements, and configures them to\nenforce date range limits.",
            "line": " org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js:2003"
        },
        {
            "message": "Missing item type\nCalls `method` on the `startTime` and `endTime` elements, and configures them to\nenforce date range limits.",
            "line": " org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js:2016"
        },
        {
            "message": "Missing item type\nLog error or data to the console during error or debugging",
            "line": " org/Hibachi/HibachiAssets/js/jquery-ui-timepicker-addon-1.3.1.js:2099"
        },
        {
            "message": "Missing item type\njQuery Validation Plugin 1.9.0\n\nhttp://bassistance.de/jquery-plugins/jquery-plugin-validation/\nhttp://docs.jquery.com/Plugins/Validation\n\nCopyright (c) 2006 - 2011 J�rn Zaefferer\n\nDual licensed under the MIT and GPL licenses:\n  http://www.opensource.org/licenses/mit-license.php\n  http://www.gnu.org/licenses/gpl.html",
            "line": " org/Hibachi/HibachiAssets/js/jquery-validate-1.9.0.min.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2003-2014, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md or http://ckeditor.com/license",
            "line": " org/Hibachi/ckeditor/samples/plugins/dialog/assets/my_dialog.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2003-2014, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md or http://ckeditor.com/license",
            "line": " org/Hibachi/ckeditor/samples/sample.js:1"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckeditor/build-config.js:1"
        },
        {
            "message": "Missing item type\nThis file was added automatically by CKEditor builder.\nYou may re-use it at any time to build CKEditor again.\n\nIf you would like to build CKEditor online again\n(for example to upgrade), visit one the following links:\n\n(1) http://ckeditor.com/builder\n    Visit online builder to build CKEditor from scratch.\n\n(2) http://ckeditor.com/builder/e6b8a045f8f984a69463975ca3e6524a\n    Visit online builder to build CKEditor, starting with the same setup as before.\n\n(3) http://ckeditor.com/builder/download/e6b8a045f8f984a69463975ca3e6524a\n    Straight download link to the latest version of CKEditor (Optimized) with the same setup as before.\n\nNOTE:\n   This file is not used by CKEditor, you may remove it.\n   Changing this file will not change your CKEditor configuration.",
            "line": " org/Hibachi/ckeditor/build-config.js:6"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckeditor/config.js:1"
        },
        {
            "message": "Missing item type\nCopyright (c) 2003-2014, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md or http://ckeditor.com/license",
            "line": " org/Hibachi/ckeditor/styles.js:1"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/bg.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/bg.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/cs.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/cs.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/cy.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/cy.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/da.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/da.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/de.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/de.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/el.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/el.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/en.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/en.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/eo.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/eo.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/es-mx.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/es-mx.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/es.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/es.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/et.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/et.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/fa.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/fa.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/fi.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/fi.js:20"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/fr.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/fr.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/gu.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/gu.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/he.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/he.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/hi.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/hi.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/hr.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/hr.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/hu.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/hu.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/it.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/it.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/ja.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/ja.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/lt.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/lt.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/lv.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/lv.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/nb.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/nb.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/nl.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/nl.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/nn.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/nn.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/no.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/no.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/pl.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/pl.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/pt-br.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/pt-br.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/ro.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/ro.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/ru.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/ru.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/sk.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/sk.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/sl.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/sl.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/sv.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/sv.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/tr.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/tr.js:21"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/vi.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/vi.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/zh-cn.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/zh-cn.js:19"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/ckfinder/lang/zh-tw.js:14"
        },
        {
            "message": "Missing item type\nContains the dictionary of language entries.",
            "line": " org/Hibachi/ckfinder/lang/zh-tw.js:19"
        },
        {
            "message": "Missing item type\nCopyright (c) 2003-2012, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.html or http://ckeditor.com/license\n\nCKFinder 2.x - sample \"dummy\" plugin.\n\nTo enable it, add the following line to config.js:\n    config.extraPlugins = 'dummy';",
            "line": " org/Hibachi/ckfinder/plugins/dummy/plugin.js:1"
        },
        {
            "message": "Missing item type\nSee http://docs.cksource.com/ckfinder_2.x_api/symbols/CKFinder.html#.addPlugin",
            "line": " org/Hibachi/ckfinder/plugins/dummy/plugin.js:11"
        },
        {
            "message": "Missing item type\nStorage and control for undo information within a CodeMirror\neditor. 'Why on earth is such a complicated mess required for\nthat?', I hear you ask. The goal, in implementing this, was to make\nthe complexity of storing and reverting undo information depend\nonly on the size of the edited or restored content, not on the size\nof the whole document. This makes it necessary to use a kind of\n'diff' system, which, when applied to a DOM tree, causes some\ncomplexity and hackery.\n\nIn short, the editor 'touches' BR elements as it parses them, and\nthe UndoHistory stores these. When nothing is touched in commitDelay\nmilliseconds, the changes are committed: It goes over all touched\nnodes, throws out the ones that did not change since last commit or\nare no longer in the document, and assembles the rest into zero or\nmore 'chains' -- arrays of adjacent lines. Links back to these\nchains are added to the BR nodes, while the chain that previously\nspanned these nodes is added to the undo history. Undoing a change\nmeans taking such a chain off the undo history, restoring its\ncontent (text is saved per line) and linking it back into the\ndocument.",
            "line": " org/Hibachi/ckfinder/plugins/fileeditor/codemirror/js/undo.js:1"
        },
        {
            "message": "Missing item type\nexports the given query/array to file.",
            "line": " org/Hibachi/HibachiService.cfc:190"
        },
        {
            "message": "Missing item type\nGeneric ORM CRUD methods and dynamic methods by convention via onMissingMethod.\n\nSee all onMissing* method comments and other method signatures for usage.\n\nCREDIT:\n  Heavily influenced by ColdSpring 2.0-pre-alpha's coldspring.orm.hibernate.AbstractGateway.\n  So, thank you Mark Mandel and Bob Silverberg :)\n\nProvides dynamic methods, by convention, on missing method:\n\n  newXXX()\n\n  countXXX()\n\n  saveXXX( required any xxxEntity )\n\n  deleteXXX( required any xxxEntity )\n\n  getXXX( required any ID, boolean isReturnNewOnNotFound = false )\n\n  getXXXByYYY( required any yyyFilterValue, boolean isReturnNewOnNotFound = false )\n\n  getXXXByYYYANDZZZ( required array [yyyFilterValue,zzzFilterValue], boolean isReturnNewOnNotFound = false )\n\t\tAND here is case sensetive to avoid matching in property name i.e brAND\n\n  listXXX( struct filterCriteria, string sortOrder, struct options )\n\n  listXXXFilterByYYY( required any yyyFilterValue, string sortOrder, struct options )\n\n  listXXXOrderByZZZ( struct filterCriteria, struct options )\n\n  listXXXFilterByYYYOrderByZZZ( required any yyyFilterValue, struct options )\n\n...in which XXX is an ORM entity name, and YYY and ZZZ are entity property names.\n\n\t exportXXX()\n\nNOTE: Ordered arguments only--named arguments not supported.",
            "line": " org/Hibachi/HibachiService.cfc:234"
        },
        {
            "message": "Missing item type",
            "line": " org/Hibachi/HibachiService.cfc:304"
        },
        {
            "message": "Missing item type\nProvides dynamic get methods, by convention, on missing method:\n\n  getXXX( required any ID, boolean isReturnNewOnNotFound = false )\n\n  getXXXByYYY( required any yyyFilterValue, boolean isReturnNewOnNotFound = false )\n\n  getXXXByYYYAndZZZ( required array [yyyFilterValue,zzzFilterValue], boolean isReturnNewOnNotFound = false )\n\t\tAND here is case sensetive to avoid matching in property name i.e brAND\n\n...in which XXX is an ORM entity name, and YYY is an entity property name.\n\nNOTE: Ordered arguments only--named arguments not supported.",
            "line": " org/Hibachi/HibachiService.cfc:310"
        },
        {
            "message": "Missing item type\nProvides dynamic getSmarList method, by convention, on missing method:\n\n  getXXXSmartList( struct data )\n\n...in which XXX is an ORM entity name\n\nNOTE: Ordered arguments only--named arguments not supported.",
            "line": " org/Hibachi/HibachiService.cfc:349"
        },
        {
            "message": "Missing item type\nProvides dynamic list methods, by convention, on missing method:\n\n  listXXX( struct filterCriteria, string sortOrder, struct options )\n\n  listXXXFilterByYYY( required any yyyFilterValue, string sortOrder, struct options )\n\n  listXXXOrderByZZZ( struct filterCriteria, struct options )\n\n  listXXXFilterByYYYOrderByZZZ( required any yyyFilterValue, struct options )\n\n...in which XXX is an ORM entity name, and YYY and ZZZ are entity property names.\n\nNOTE: Ordered arguments only--named arguments not supported.",
            "line": " org/Hibachi/HibachiService.cfc:373"
        },
        {
            "message": "Missing item type\nProvides dynamic list method, by convention, on missing method:\n\n  listXXX( struct filterCriteria, string sortOrder, struct options )\n\n...in which XXX is an ORM entity name.\n\nNOTE: Ordered arguments only--named arguments not supported.",
            "line": " org/Hibachi/HibachiService.cfc:415"
        },
        {
            "message": "Missing item type\nProvides dynamic list method, by convention, on missing method:\n\n  listXXXFilterByYYY( required any yyyFilterValue, string sortOrder, struct options )\n\n...in which XXX is an ORM entity name, and YYY is an entity property name.\n\nNOTE: Ordered arguments only--named arguments not supported.",
            "line": " org/Hibachi/HibachiService.cfc:445"
        },
        {
            "message": "Missing item type\nProvides dynamic list method, by convention, on missing method:\n\n  listXXXFilterByYYYOrderByZZZ( required any yyyFilterValue, struct options )\n\n...in which XXX is an ORM entity name, and YYY and ZZZ are entity property names.\n\nNOTE: Ordered arguments only--named arguments not supported.",
            "line": " org/Hibachi/HibachiService.cfc:480"
        },
        {
            "message": "Missing item type\nProvides dynamic list method, by convention, on missing method:\n\n  listXXXOrderByZZZ( struct filterCriteria, struct options )\n\n...in which XXX is an ORM entity name, and ZZZ is an entity property name.\n\nNOTE: Ordered arguments only--named arguments not supported.",
            "line": " org/Hibachi/HibachiService.cfc:514"
        },
        {
            "message": "Missing item type\nProvides dynamic count methods, by convention, on missing method:\n\n  countXXX()\n\n...in which XXX is an ORM entity name.",
            "line": " org/Hibachi/HibachiService.cfc:549"
        },
        {
            "message": "Missing item type\nProvides dynamic export methods, by convention, on missing method:\n\n  exportXXX()\n\n...in which XXX is an ORM entity name.",
            "line": " org/Hibachi/HibachiService.cfc:589"
        },
        {
            "message": "Missing item type\nConcatenates two arrays.",
            "line": " org/Hibachi/HibachiUtilityService.cfc:172"
        }
    ]
}