{"version":3,"names":[],"mappings":"","sources":["controllers/preprocessaccount_addaccountpayment.js"],"sourcesContent":["'use strict';\nangular.module('slatwalladmin').controller('preprocessaccount_addaccountpayment', ['$scope', '$compile', function ($scope, $compile) {\n    //Define the different payment types used here\n    var paymentType = { aptCharge: \"444df32dd2b0583d59a19f1b77869025\", aptCredit: \"444df32e9b448ea196c18c66e1454c46\", aptAdjustment: \"68e3fb57d8102b47acc0003906d16ddd\" };\n    $scope.totalAmountToApply = 0; //Default value to show on new form\n    $scope.paymentTypeName = $.slatwall.rbKey('define.charge'); //Default payment type\n    $scope.paymentTypeLock = true; //Used to lock down the order payment type dropdowns\n    $scope.amount = 0;\n    $scope.updatePaymentType = function () {\n        //Change all order payment types here\n        angular.forEach($scope.appliedOrderPayment, function (obj, key) {\n            //Only change the payment type if the type isn't adjustment'\n            if ($scope.paymentType != paymentType.aptAdjustment)\n                obj.paymentType = $scope.paymentType;\n        });\n        if ($scope.paymentType == paymentType.aptCharge) {\n            $scope.paymentTypeName = $.slatwall.rbKey('define.charge');\n            $scope.paymentTypeLock = true;\n        }\n        else if ($scope.paymentType == paymentType.aptCredit) {\n            $scope.paymentTypeName = $.slatwall.rbKey('define.credit');\n            $scope.paymentTypeLock = true;\n        }\n        else if ($scope.paymentType == paymentType.aptAdjustment) {\n            $scope.paymentTypeLock = false;\n            $scope.paymentTypeName = $.slatwall.rbKey('define.adjustment');\n            $scope.amount = 0;\n        }\n        //Update the subtotal now that we changed the payment type\n        $scope.updateSubTotal();\n    };\n    $scope.updateSubTotal = function () {\n        $scope.totalAmountToApply = 0; //Reset the subtotal before we loop\n        //Loop through all the amount fields and create a running subtotal\n        angular.forEach($scope.appliedOrderPayment, function (obj, key) {\n            //Don't count the field if its undefied or not a number\n            if (obj.amount != undefined && !isNaN(obj.amount)) {\n                //Charge / adjustment condition for subtotal\n                if ($scope.paymentType == paymentType.aptCharge || $scope.paymentType == paymentType.aptAdjustment) {\n                    if (obj.paymentType == paymentType.aptCharge)\n                        $scope.totalAmountToApply += parseFloat(obj.amount);\n                    else if (obj.paymentType == paymentType.aptCredit)\n                        $scope.totalAmountToApply -= parseFloat(obj.amount);\n                }\n                else if ($scope.paymentType == paymentType.aptCredit) {\n                    if (obj.paymentType == paymentType.aptCharge)\n                        $scope.totalAmountToApply -= parseFloat(obj.amount);\n                    else if (obj.paymentType == paymentType.aptCredit)\n                        $scope.totalAmountToApply += parseFloat(obj.amount);\n                }\n            }\n        });\n        //The amount not applied to an order\n        $scope.amountUnapplied = (Math.round(($scope.amount - $scope.totalAmountToApply) * 100) / 100);\n        $scope.accountBalanceChange = parseFloat($scope.amount);\n        //Switch the account balance display amount to a negative if you are doing a charge\n        if ($scope.paymentType == paymentType.aptCharge)\n            $scope.accountBalanceChange = parseFloat($scope.accountBalanceChange * -1); //If charge, change to neg since we are lowering account balance\n        else if ($scope.paymentType == paymentType.aptAdjustment)\n            $scope.accountBalanceChange += parseFloat($scope.amountUnapplied); //If adjustment, use the amount unapplied to determine the balance change\n    };\n}]);\n\n//# sourceMappingURL=../controllers/preprocessaccount_addaccountpayment.js.map"],"file":"controllers/preprocessaccount_addaccountpayment.js","sourceRoot":"/source/"}