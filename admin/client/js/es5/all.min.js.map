{"version":3,"sources":["slatwalladmin.js","alertservice.js","alertcontroller.js","collections.js","collectionstabcontroller.js","confirmationcontroller.js","create-bundle-controller.js","globalsearch.js","pagedialog.js","preprocessaccount_addaccountpayment.js","routercontroller.js"],"names":["angular","module","config","$provide","$logProvider","$filterProvider","$httpProvider","$routeProvider","$injector","$locationProvider","datepickerConfig","datepickerPopupConfig","showWeeks","format","toggleWeeksText","slatwallAngular","hashbang","html5Mode","hashPrefix","constant","$","slatwall","getConfig","baseURL","_partialsPath","forEach","constantPaths","constantPath","key","constantKey","charAt","toLowerCase","slice","constantPartialsPath","debugEnabled","debugFlag","register","text","isDefined","isString","replace","RegExp","input","chars","breakOnWord","isNaN","length","substring","substr","lastspace","lastIndexOf","interceptors","push","when","template","params","entityDirectiveExists","has","entityName","controller","otherwise","templateUrl","run","$rootScope","$filter","$anchorScroll","$slatwall","dialogService","yOffset","openPageDialog","partial","addPageDialog","closePageDialog","index","removePageDialog","loadedResourceBundle","hasResourceBundle","rbListener","$watch","newValue","oldValue","$broadcast","filter","getRBKey","factory","$timeout","_alerts","alertService","addAlert","alert","splice","addAlerts","alerts","formatMessagesToAlerts","messages","message","msg","type","messageType","fade","dismissable","getAlerts","removeAlert","i","removeOldestAlert","_alert","$scope","$id","$location","$log","collectionService","metadataService","paginationService","QueryString","query_string","query","window","location","search","vars","split","pair","arr","collectionID","currentPage","getCurrentPage","pageShow","getPageShow","pageStart","getPageStart","pageEnd","getPageEnd","recordsCount","getRecordsCount","autoScrollPage","autoScrollDisabled","appendToCollection","debug","collection","totalPages","collectionListingPromise","getEntity","id","then","value","pageRecords","concat","reason","keywords","loadingCollection","searchPromise","searchCollection","$timout","cancel","setCurrentPage","getCollection","collectionInitial","copy","isUndefined","collectionConfig","fromJson","filterGroups","filterGroup","setFilterCount","filterItemCounter","unbindCollectionObserver","filterPropertiesList","filterPropertiesPromise","getFilterPropertiesByBaseEntityName","baseEntityAlias","setPropertiesList","getPropertiesListByBaseEntityAlias","formatPropertiesList","setCollectionForm","form","collectionForm","collectionDetails","isOpen","openCollectionDetails","errorMessage","filterGroupArray","filterItemCount","$$isNew","saveCollection","isFormValid","collectionConfigString","stringifyJSON","data","saveCollectionPromise","saveEntity","errors","$invalid","angularForm","formValid","field","error","$error","$pristine","$setViewValue","$viewValue","copyExistingCollection","selectedExistingCollection","setSelectedExistingCollection","setSelectedFilterProperty","selectedFilterProperty","filterCount","getFilterCount","$modalInstance","deleteEntity","entity","this","close","dismiss","$window","productBundleService","formService","partialsPath","getParameterByName","name","regex","results","exec","decodeURIComponent","scrollToTopOfDialog","productID","productBundleConstructor","product","newProduct","brand","newBrand","productType","newProductType","$$setBrand","$$setProductType","$$addSku","skus","productBundleGroups","productBundleGroup","productPromise","getProduct","promise","$$getSkus","$$getProductBundleGroups","$$getProductBundleGroupType","decorateProductBundleGroup","$$editing","saveProductBundle","closeDialogIndex","newSaving","dIndex","$$save","closeSaving","searchResultsOpen","sidebarClass","loading","resultsFound","searchResults","title","resultNameFilter","productName","brandName","brandID","account","firstName","lastName","accountID","vendor","vendorName","vendorID","_timeoutPromise","_loadingCount","updateSearchResults","showResults","hideResults","Object","keys","deferkey","link","_foundResults","_thisEntityName","onclick","event","_targetClassOfSearch","target","parentElement","offsetParent","classList","contains","$apply","$setPristine","pageDialogs","getPageDialogs","hash","pageDialogStyle","z-index","$compile","paymentType","aptCharge","aptCredit","aptAdjustment","totalAmountToApply","paymentTypeName","rbKey","paymentTypeLock","amount","updatePaymentType","appliedOrderPayment","obj","updateSubTotal","undefined","parseFloat","amountUnapplied","Math","round","accountBalanceChange","$routeParams","partialRoute","path","controllerType","entityID"],"mappings":"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","file":"all.min.js","sourcesContent":["\"use strict\";\n\nangular.module(\"slatwalladmin\", [\"ngSlatwall\", \"ui.bootstrap\", \"ngAnimate\", \"ngRoute\"]).config([\"$provide\", \"$logProvider\", \"$filterProvider\", \"$httpProvider\", \"$routeProvider\", \"$injector\", \"$locationProvider\", \"datepickerConfig\", \"datepickerPopupConfig\", function ($provide, $logProvider, $filterProvider, $httpProvider, $routeProvider, $injector, $locationProvider, datepickerConfig, datepickerPopupConfig) {\n\tdatepickerConfig.showWeeks = false;\n\tdatepickerConfig.format = \"MMM dd, yyyy hh:mm a\";\n\tdatepickerPopupConfig.toggleWeeksText = null;\n\tif (slatwallAngular.hashbang) {\n\t\t$locationProvider.html5Mode(false).hashPrefix(\"!\");\n\t}\n\t//\n\t$provide.constant(\"baseURL\", $.slatwall.getConfig().baseURL);\n\n\tvar _partialsPath = $.slatwall.getConfig().baseURL + \"/admin/client/partials/\";\n\n\t$provide.constant(\"partialsPath\", _partialsPath);\n\t$provide.constant(\"productBundlePartialsPath\", _partialsPath + \"productbundle/\");\n\n\n\tangular.forEach(slatwallAngular.constantPaths, function (constantPath, key) {\n\t\tvar constantKey = constantPath.charAt(0).toLowerCase() + constantPath.slice(1) + \"PartialsPath\";\n\t\tvar constantPartialsPath = _partialsPath + constantPath.toLowerCase() + \"/\";\n\t\t$provide.constant(constantKey, constantPartialsPath);\n\t});\n\n\t$logProvider.debugEnabled($.slatwall.getConfig().debugFlag);\n\t$filterProvider.register(\"likeFilter\", function () {\n\t\treturn function (text) {\n\t\t\tif (angular.isDefined(text) && angular.isString(text)) {\n\t\t\t\treturn text.replace(new RegExp(\"%\", \"g\"), \"\");\n\t\t\t}\n\t\t};\n\t});\n\n\t$filterProvider.register(\"truncate\", function () {\n\t\treturn function (input, chars, breakOnWord) {\n\t\t\tif (isNaN(chars)) return input;\n\t\t\tif (chars <= 0) return \"\";\n\t\t\tif (input && input.length > chars) {\n\t\t\t\tinput = input.substring(0, chars);\n\t\t\t\tif (!breakOnWord) {\n\t\t\t\t\tvar lastspace = input.lastIndexOf(\" \");\n\t\t\t\t\t//get last space\n\t\t\t\t\tif (lastspace !== -1) {\n\t\t\t\t\t\tinput = input.substr(0, lastspace);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\twhile (input.charAt(input.length - 1) === \" \") {\n\t\t\t\t\t\tinput = input.substr(0, input.length - 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn input + \"...\";\n\t\t\t}\n\t\t\treturn input;\n\t\t};\n\t});\n\n\t$httpProvider.interceptors.push(\"slatwallInterceptor\");\n\n\t// route provider configuration\n\t$routeProvider.when(\"/entity/:entityName/\", {\n\t\ttemplate: function (params) {\n\t\t\tvar entityDirectiveExists = $injector.has(\"sw\" + params.entityName + \"ListDirective\");\n\t\t\tif (entityDirectiveExists) {\n\t\t\t\treturn \"<sw-\" + params.entityName.toLowerCase() + \"-list>\";\n\t\t\t} else {\n\t\t\t\treturn \"<sw-list></sw-list>\";\n\t\t\t}\n\t\t},\n\t\tcontroller: \"routerController\"\n\t}).when(\"/entity/:entityName/:entityID\", {\n\t\ttemplate: function (params) {\n\t\t\tvar entityDirectiveExists = $injector.has(\"sw\" + params.entityName + \"DetailDirective\");\n\t\t\tif (entityDirectiveExists) {\n\t\t\t\treturn \"<sw-\" + params.entityName.toLowerCase() + \"-detail>\";\n\t\t\t} else {\n\t\t\t\treturn \"<sw-detail></sw-detail>\";\n\t\t\t}\n\t\t},\n\t\tcontroller: \"routerController\" }).otherwise({\n\t\ttemplateUrl: $.slatwall.getConfig().baseURL + \"/admin/client/js/partials/otherwise.html\" });\n}]).run([\"$rootScope\", \"$filter\", \"$anchorScroll\", \"$slatwall\", \"dialogService\", function ($rootScope, $filter, $anchorScroll, $slatwall, dialogService) {\n\t$anchorScroll.yOffset = 100;\n\n\t$rootScope.openPageDialog = function (partial) {\n\t\tdialogService.addPageDialog(partial);\n\t};\n\n\t$rootScope.closePageDialog = function (index) {\n\t\tdialogService.removePageDialog(index);\n\t};\n\n\t$rootScope.loadedResourceBundle = false;\n\t$rootScope.loadedResourceBundle = $slatwall.hasResourceBundle();\n\n\tvar rbListener = $rootScope.$watch(\"loadedResourceBundle\", function (newValue, oldValue) {\n\t\tif (newValue !== oldValue) {\n\t\t\t$rootScope.$broadcast(\"hasResourceBundle\");\n\t\t\trbListener();\n\t\t}\n\t});\n}]).filter(\"entityRBKey\", [\"$slatwall\", function ($slatwall) {\n\treturn function (text) {\n\t\tif (angular.isDefined(text) && angular.isString(text)) {\n\t\t\ttext = text.replace(\"_\", \"\").toLowerCase();\n\t\t\ttext = $slatwall.getRBKey(\"entity.\" + text);\n\t\t\treturn text;\n\t\t}\n\t};\n}]);","/*services return promises which can be handled uniquely based on success or failure by the controller*/\n\"use strict\";\nangular.module(\"slatwalladmin\").factory(\"alertService\", [\"$timeout\", function ($timeout) {\n\tvar _alerts = [];\n\n\tvar alertService = {\n\t\taddAlert: function (alert) {\n\t\t\t_alerts.push(alert);\n\t\t\t$timeout(function () {\n\t\t\t\t_alerts.splice(0, 1);\n\t\t\t}, 3500);\n\t\t},\n\t\taddAlerts: function (alerts) {\n\t\t\tfor (var alert in alerts) {\n\t\t\t\t_alerts.push(alerts[alert]);\n\t\t\t\t$timeout(function () {\n\t\t\t\t\t_alerts.splice(0, 1);\n\t\t\t\t}, 3500);\n\t\t\t}\n\t\t},\n\t\tformatMessagesToAlerts: function (messages) {\n\t\t\tvar alerts = [];\n\t\t\tfor (var message in messages) {\n\t\t\t\tvar alert = {\n\t\t\t\t\tmsg: messages[message].message,\n\t\t\t\t\ttype: messages[message].messageType\n\t\t\t\t};\n\t\t\t\talerts.push(alert);\n\t\t\t\tif (alert.type === \"success\" || alert.type === \"error\") {\n\t\t\t\t\t$timeout(function () {\n\t\t\t\t\t\talert.fade = true;\n\t\t\t\t\t}, 3500);\n\n\t\t\t\t\talert.dismissable = false;\n\t\t\t\t} else {\n\t\t\t\t\talert.fade = false;\n\t\t\t\t\talert.dismissable = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn alerts;\n\t\t},\n\t\tgetAlerts: function () {\n\t\t\treturn _alerts;\n\t\t},\n\t\tremoveAlert: function (alert) {\n\t\t\tfor (var i in _alerts) {\n\t\t\t\tif (_alerts[i] === alert) {\n\t\t\t\t\tdelete _alerts[i];\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tremoveOldestAlert: function () {\n\t\t\t_alert.splice(0, 1);\n\t\t}\n\t};\n\n\treturn alertService;\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\").controller(\"alertController\", [\"$scope\", \"alertService\", function ($scope, alertService) {\n\t$scope.$id = \"alertController\";\n\t$scope.alerts = alertService.getAlerts();\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\")\n//using $location to get url params, this will probably change to using routes eventually\n.controller(\"collections\", [\"$scope\", \"$location\", \"$log\", \"$timeout\", \"$slatwall\", \"collectionService\", \"metadataService\", \"paginationService\", function ($scope, $location, $log, $timeout, $slatwall, collectionService, metadataService, paginationService) {\n\t//init values\n\t//$scope.collectionTabs =[{tabTitle:'PROPERTIES',isActive:true},{tabTitle:'FILTERS ('+filterCount+')',isActive:false},{tabTitle:'DISPLAY OPTIONS',isActive:false}];\n\t$scope.$id = \"collectionsController\";\n\n\t/*used til we convert to use route params*/\n\tvar QueryString = (function () {\n\t\t// This function is anonymous, is executed immediately and\n\t\t// the return value is assigned to QueryString!\n\t\tvar query_string = {};\n\t\tvar query = window.location.search.substring(1);\n\t\tvar vars = query.split(\"&\");\n\t\tfor (var i = 0; i < vars.length; i++) {\n\t\t\tvar pair = vars[i].split(\"=\");\n\t\t\t// If first entry with this name\n\t\t\tif (typeof query_string[pair[0]] === \"undefined\") {\n\t\t\t\tquery_string[pair[0]] = pair[1];\n\t\t\t\t// If second entry with this name\n\t\t\t} else if (typeof query_string[pair[0]] === \"string\") {\n\t\t\t\tvar arr = [query_string[pair[0]], pair[1]];\n\t\t\t\tquery_string[pair[0]] = arr;\n\t\t\t\t// If third or later entry with this name\n\t\t\t} else {\n\t\t\t\tquery_string[pair[0]].push(pair[1]);\n\t\t\t}\n\t\t}\n\t\treturn query_string;\n\t})();\n\t//get url param to retrieve collection listing\n\t$scope.collectionID = QueryString.collectionID;\n\n\t$scope.currentPage = paginationService.getCurrentPage();\n\t$scope.pageShow = paginationService.getPageShow();\n\t$scope.pageStart = paginationService.getPageStart;\n\t$scope.pageEnd = paginationService.getPageEnd;\n\t$scope.recordsCount = paginationService.getRecordsCount;\n\t$scope.autoScrollPage = 1;\n\t$scope.autoScrollDisabled = false;\n\n\n\t$scope.appendToCollection = function () {\n\t\tif ($scope.pageShow === \"Auto\") {\n\t\t\t$log.debug(\"AppendToCollection\");\n\t\t\tif ($scope.autoScrollPage < $scope.collection.totalPages) {\n\t\t\t\t$scope.autoScrollDisabled = true;\n\t\t\t\t$scope.autoScrollPage++;\n\n\t\t\t\tvar collectionListingPromise = $slatwall.getEntity(\"collection\", { id: $scope.collectionID, currentPage: $scope.autoScrollPage, pageShow: 50 });\n\t\t\t\tcollectionListingPromise.then(function (value) {\n\t\t\t\t\t$scope.collection.pageRecords = $scope.collection.pageRecords.concat(value.pageRecords);\n\t\t\t\t\t$scope.autoScrollDisabled = false;\n\t\t\t\t}, function (reason) {});\n\t\t\t}\n\t\t}\n\t};\n\n\t$scope.keywords = \"\";\n\t$scope.loadingCollection = false;\n\tvar searchPromise;\n\t$scope.searchCollection = function ($timout) {\n\t\tif (searchPromise) {\n\t\t\t$timeout.cancel(searchPromise);\n\t\t}\n\n\t\tsearchPromise = $timeout(function () {\n\t\t\t$log.debug(\"search with keywords\");\n\t\t\t$log.debug($scope.keywords);\n\t\t\t//Set current page here so that the pagination does not break when getting collection\n\t\t\tpaginationService.setCurrentPage(1);\n\t\t\t$scope.loadingCollection = true;\n\t\t\t$scope.getCollection();\n\t\t}, 500);\n\t};\n\n\n\n\t$scope.getCollection = function () {\n\t\tvar pageShow = 50;\n\t\tif ($scope.pageShow !== \"Auto\") {\n\t\t\tpageShow = $scope.pageShow;\n\t\t}\n\n\t\tvar collectionListingPromise = $slatwall.getEntity(\"collection\", { id: $scope.collectionID, currentPage: $scope.currentPage, pageShow: pageShow, keywords: $scope.keywords });\n\t\tcollectionListingPromise.then(function (value) {\n\t\t\t$scope.collection = value;\n\n\t\t\t$scope.collectionInitial = angular.copy($scope.collection);\n\t\t\tif (angular.isUndefined($scope.collectionConfig)) {\n\t\t\t\t$scope.collectionConfig = angular.fromJson($scope.collection.collectionConfig);\n\t\t\t}\n\n\t\t\t//check if we have any filter Groups\n\t\t\tif (angular.isUndefined($scope.collectionConfig.filterGroups)) {\n\t\t\t\t$scope.collectionConfig.filterGroups = [{\n\t\t\t\t\tfilterGroup: []\n\t\t\t\t}];\n\t\t\t}\n\t\t\tcollectionService.setFilterCount(filterItemCounter());\n\t\t\t$scope.loadingCollection = false;\n\t\t}, function (reason) {});\n\t};\n\n\t$scope.getCollection();\n\n\tvar unbindCollectionObserver = $scope.$watch(\"collection\", function (newValue, oldValue) {\n\t\tif (newValue !== oldValue) {\n\t\t\tif (angular.isUndefined($scope.filterPropertiesList)) {\n\t\t\t\t$scope.filterPropertiesList = {};\n\t\t\t\tvar filterPropertiesPromise = $slatwall.getFilterPropertiesByBaseEntityName($scope.collectionConfig.baseEntityAlias);\n\t\t\t\tfilterPropertiesPromise.then(function (value) {\n\t\t\t\t\tmetadataService.setPropertiesList(value, $scope.collectionConfig.baseEntityAlias);\n\t\t\t\t\t$scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias] = metadataService.getPropertiesListByBaseEntityAlias($scope.collectionConfig.baseEntityAlias);\n\t\t\t\t\tmetadataService.formatPropertiesList($scope.filterPropertiesList[$scope.collectionConfig.baseEntityAlias], $scope.collectionConfig.baseEntityAlias);\n\t\t\t\t});\n\t\t\t}\n\t\t\tunbindCollectionObserver();\n\t\t}\n\t});\n\n\t$scope.setCollectionForm = function (form) {\n\t\t$scope.collectionForm = form;\n\t};\n\n\n\t$scope.collectionDetails = {\n\t\tisOpen: false,\n\t\topenCollectionDetails: function () {\n\t\t\t$scope.collectionDetails.isOpen = true;\n\t\t}\n\t};\n\n\t$scope.errorMessage = {};\n\n\tvar filterItemCounter = function (filterGroupArray) {\n\t\tvar filterItemCount = 0;\n\n\t\tif (!angular.isDefined(filterGroupArray)) {\n\t\t\tfilterGroupArray = $scope.collectionConfig.filterGroups[0].filterGroup;\n\t\t}\n\n\t\t//Start out loop\n\t\tfor (var index in filterGroupArray) {\n\t\t\t//If filter isn't new then increment the count\n\t\t\tif (!filterGroupArray[index].$$isNew && !angular.isDefined(filterGroupArray[index].filterGroup)) {\n\t\t\t\tfilterItemCount++;\n\t\t\t\t// If there are nested filter groups run introspectively\n\t\t\t} else if (angular.isDefined(filterGroupArray[index].filterGroup)) {\n\t\t\t\t//Call function recursively\n\t\t\t\tfilterItemCount += filterItemCounter(filterGroupArray[index].filterGroup);\n\n\t\t\t\t//Otherwise make like the foo fighters and \"Break Out!\"\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn filterItemCount;\n\t};\n\n\n\t$scope.saveCollection = function () {\n\t\t$timeout(function () {\n\t\t\t$log.debug(\"saving Collection\");\n\t\t\tvar entityName = \"collection\";\n\t\t\tvar collection = $scope.collection;\n\t\t\t$log.debug($scope.collectionConfig);\n\n\t\t\tif (isFormValid($scope.collectionForm)) {\n\t\t\t\tvar collectionConfigString = collectionService.stringifyJSON($scope.collectionConfig);\n\t\t\t\t$log.debug(collectionConfigString);\n\t\t\t\tvar data = angular.copy(collection);\n\n\t\t\t\tdata.collectionConfig = collectionConfigString;\n\t\t\t\t//has to be removed in order to save transient correctly\n\t\t\t\tdelete data.pageRecords;\n\t\t\t\tvar saveCollectionPromise = $slatwall.saveEntity(entityName, collection.collectionID, data);\n\t\t\t\tsaveCollectionPromise.then(function (value) {\n\t\t\t\t\t$scope.errorMessage = {};\n\t\t\t\t\t//Set current page here so that the pagination does not break when getting collection\n\t\t\t\t\tpaginationService.setCurrentPage(1);\n\t\t\t\t\t$scope.getCollection();\n\t\t\t\t\t$scope.collectionDetails.isOpen = false;\n\t\t\t\t}, function (reason) {\n\t\t\t\t\t//revert to original\n\t\t\t\t\tangular.forEach(reason.errors, function (value, key) {\n\t\t\t\t\t\t$scope.collectionForm[key].$invalid = true;\n\t\t\t\t\t\t$scope.errorMessage[key] = value[0];\n\t\t\t\t\t});\n\t\t\t\t\t//$scope.collection = angular.copy($scope.collectionInitial);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tcollectionService.setFilterCount(filterItemCounter());\n\t\t});\n\t};\n\n\tvar isFormValid = function (angularForm) {\n\t\t$log.debug(\"validateForm\");\n\t\tvar formValid = true;\n\t\tfor (var field in angularForm) {\n\t\t\t// look at each form input with a name attribute set\n\t\t\t// checking if it is pristine and not a '$' special field\n\t\t\tif (field[0] != \"$\") {\n\t\t\t\t// need to use formValid variable instead of formController.$valid because checkbox dropdown is not an input\n\t\t\t\t// and somehow formController didn't invalid if checkbox dropdown is invalid\n\t\t\t\tif (angularForm[field].$invalid) {\n\t\t\t\t\tformValid = false;\n\t\t\t\t\tfor (var error in angularForm[field].$error) {\n\t\t\t\t\t\tif (error == \"required\") {\n\t\t\t\t\t\t\t$scope.errorMessage[field] = \"This field is required\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (angularForm[field].$pristine) {\n\t\t\t\t\tif (angular.isUndefined(angularForm[field].$viewValue)) {\n\t\t\t\t\t\tangularForm[field].$setViewValue(\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tangularForm[field].$setViewValue(angularForm[field].$viewValue);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn formValid;\n\t};\n\n\t$scope.copyExistingCollection = function () {\n\t\t$scope.collection.collectionConfig = $scope.selectedExistingCollection;\n\t};\n\n\t$scope.setSelectedExistingCollection = function (selectedExistingCollection) {\n\t\t$scope.selectedExistingCollection = selectedExistingCollection;\n\t};\n\n\t$scope.setSelectedFilterProperty = function (selectedFilterProperty) {\n\t\t$scope.selectedFilterProperty = selectedFilterProperty;\n\t};\n\n\t$scope.filterCount = collectionService.getFilterCount;\n}]);","\"use strict\";\n\nangular.module(\"slatwalladmin\")\n//using $location to get url params, this will probably change to using routes eventually\n.controller(\"collectionsTabController\", [\"$scope\", function ($scope) {}]);\n//$scope.tabSelected = function(tab,tabArray){\n\n//}","\"use strict\";\nangular.module(\"slatwalladmin\").controller(\"confirmationController\", [\"$scope\", \"$log\", \"$modalInstance\", function ($scope, $log, $modalInstance) {\n  $scope.deleteEntity = function (entity) {\n    $log.debug(\"Deleting an entity.\");\n    $log.debug($scope.entity);\n    this.close();\n  };\n  /**\n   * Closes the modal window\n   */\n  $scope.close = function () {\n    $modalInstance.close();\n  };\n  /**\n   * Cancels the modal window\n   */\n  $scope.cancel = function () {\n    $modalInstance.dismiss(\"cancel\");\n  };\n\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\").controller(\"create-bundle-controller\", [\"$scope\", \"$location\", \"$log\", \"$rootScope\", \"$window\", \"$slatwall\", \"dialogService\", \"alertService\", \"productBundleService\", \"formService\", \"partialsPath\", function ($scope, $location, $log, $rootScope, $window, $slatwall, dialogService, alertService, productBundleService, formService, partialsPath) {\n\t$scope.partialsPath = partialsPath;\n\n\tfunction getParameterByName(name) {\n\t\tname = name.replace(/[\\[]/, \"\\\\[\").replace(/[\\]]/, \"\\\\]\");\n\t\tvar regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\"),\n\t\t    results = regex.exec(location.search);\n\t\treturn results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n\t}\n\n\t$scope.$id = \"create-bundle-controller\";\n\t//if this view is part of the dialog section, call the inherited function\n\tif (angular.isDefined($scope.scrollToTopOfDialog)) {\n\t\t$scope.scrollToTopOfDialog();\n\t}\n\n\tvar productID = getParameterByName(\"productID\");\n\n\tvar productBundleConstructor = function () {\n\t\t$scope.product = $slatwall.newProduct();\n\t\tvar brand = $slatwall.newBrand();\n\t\tvar productType = $slatwall.newProductType();\n\t\t$scope.product.$$setBrand(brand);\n\t\t$scope.product.$$setProductType(productType);\n\t\t$scope.product.$$addSku();\n\t\t$scope.product.data.skus[0].data.productBundleGroups = [];\n\t};\n\n\t$scope.productBundleGroup;\n\n\tif (angular.isDefined(productID) && productID !== \"\") {\n\t\tvar productPromise = $slatwall.getProduct({ id: productID });\n\n\t\tproductPromise.promise.then(function () {\n\t\t\t$log.debug(productPromise.value);\n\t\t\tproductPromise.value.$$getSkus().then(function () {\n\t\t\t\tproductPromise.value.data.skus[0].$$getProductBundleGroups().then(function () {\n\t\t\t\t\t$scope.product = productPromise.value;\n\t\t\t\t\tangular.forEach($scope.product.data.skus[0].data.productBundleGroups, function (productBundleGroup) {\n\t\t\t\t\t\tproductBundleGroup.$$getProductBundleGroupType();\n\t\t\t\t\t\tproductBundleService.decorateProductBundleGroup(productBundleGroup);\n\t\t\t\t\t\tproductBundleGroup.data.$$editing = false;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t}, productBundleConstructor());\n\t} else {\n\t\tproductBundleConstructor();\n\t}\n\n\t$scope.saveProductBundle = function (closeDialogIndex) {\n\t\t$scope.newSaving = true;\n\t\t$log.debug($scope.newSaving);\n\t\t$scope.dIndex = closeDialogIndex;\n\t\t$scope.product.$$save().then(function () {\n\t\t\t$log.debug(\"Turn off the loader after saving.\");\n\t\t\t$scope.newSaving = false;\n\t\t\tif (angular.isDefined($scope.dIndex)) {\n\t\t\t\t$scope.closeSaving = true;\n\t\t\t\t$rootScope.closePageDialog($scope.dIndex);\n\t\t\t}\n\t\t});\n\n\n\n\t};\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\").controller(\"globalSearch\", [\"$scope\", \"$log\", \"$window\", \"$timeout\", \"$slatwall\", function ($scope, $log, $window, $timeout, $slatwall) {\n\t$scope.keywords = \"\";\n\t$scope.searchResultsOpen = false;\n\t$scope.sidebarClass = \"sidebar\";\n\t$scope.loading = false; //Set loading wheel to false\n\t$scope.resultsFound = true; // Set the results Found to true because no search has been done yet\n\n\t$scope.searchResults = {\n\t\tproduct: {\n\t\t\ttitle: \"Products\",\n\t\t\tresultNameFilter: function (data) {\n\t\t\t\treturn data.productName;\n\t\t\t},\n\t\t\tresults: [],\n\t\t\tid: function (data) {\n\t\t\t\treturn data.productID;\n\t\t\t}\n\t\t},\n\t\tbrand: {\n\t\t\ttitle: $slatwall.getRBKey(\"entity.Brands\"),\n\t\t\tresultNameFilter: function (data) {\n\t\t\t\treturn data.brandName;\n\t\t\t},\n\t\t\tresults: [],\n\t\t\tid: function (data) {\n\t\t\t\treturn data.brandID;\n\t\t\t}\n\t\t},\n\t\taccount: {\n\t\t\ttitle: \"Accounts\",\n\t\t\tresultNameFilter: function (data) {\n\t\t\t\treturn data.firstName + \" \" + data.lastName;\n\t\t\t},\n\t\t\tresults: [],\n\t\t\tid: function (data) {\n\t\t\t\treturn data.accountID;\n\t\t\t}\n\t\t},\n\t\tvendor: {\n\t\t\ttitle: \"Vendors\",\n\t\t\tresultNameFilter: function (data) {\n\t\t\t\treturn data.vendorName;\n\t\t\t},\n\t\t\tresults: [],\n\t\t\tid: function (data) {\n\t\t\t\treturn data.vendorID;\n\t\t\t}\n\t\t}\n\t};\n\n\n\tvar _timeoutPromise;\n\tvar _loadingCount = 0;\n\n\t$scope.updateSearchResults = function () {\n\t\t$scope.loading = true;\n\t\t$scope.showResults();\n\n\t\tif (_timeoutPromise) {\n\t\t\t$timeout.cancel(_timeoutPromise);\n\t\t}\n\n\t\t_timeoutPromise = $timeout(function () {\n\t\t\t// If no keywords, then set everything back to their defaults\n\t\t\tif ($scope.keywords === \"\") {\n\t\t\t\t$scope.hideResults();\n\n\t\t\t\t// Otherwise performe the search\n\t\t\t} else {\n\t\t\t\t$scope.showResults();\n\n\t\t\t\t// Set the loadingCount to the number of AJAX Calls we are about to do\n\t\t\t\t_loadingCount = Object.keys($scope.searchResults).length;\n\n\t\t\t\tfor (var entityName in $scope.searchResults) {\n\t\t\t\t\t(function (entityName) {\n\t\t\t\t\t\tvar searchPromise = $slatwall.getEntity(entityName, { keywords: $scope.keywords, pageShow: 4, deferkey: \"global-search-\" + entityName });\n\n\t\t\t\t\t\tsearchPromise.then(function (data) {\n\t\t\t\t\t\t\t// Clear out the old Results\n\t\t\t\t\t\t\t$scope.searchResults[entityName].results = [];\n\t\t\t\t\t\t\t$scope.searchResults[entityName].title = $slatwall.getRBKey(\"entity.\" + entityName.toLowerCase() + \"_plural\");\n\t\t\t\t\t\t\t// push in the new results\n\t\t\t\t\t\t\tfor (var i in data.pageRecords) {\n\t\t\t\t\t\t\t\t$scope.searchResults[entityName].results.push({\n\t\t\t\t\t\t\t\t\tname: $scope.searchResults[entityName].resultNameFilter(data.pageRecords[i]),\n\t\t\t\t\t\t\t\t\tlink: \"?slatAction=entity.detail\" + entityName + \"&\" + entityName + \"ID=\" + $scope.searchResults[entityName].id(data.pageRecords[i]) });\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Increment Down The Loading Count\n\t\t\t\t\t\t\t_loadingCount--;\n\n\t\t\t\t\t\t\t// If the loadingCount drops to 0, then we can update scope\n\t\t\t\t\t\t\tif (_loadingCount == 0) {\n\t\t\t\t\t\t\t\t$scope.loading = false;\n\n\t\t\t\t\t\t\t\tvar _foundResults = false;\n\t\t\t\t\t\t\t\tfor (var _thisEntityName in $scope.searchResults) {\n\t\t\t\t\t\t\t\t\tif ($scope.searchResults[_thisEntityName].results.length) {\n\t\t\t\t\t\t\t\t\t\t_foundResults = true;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t$scope.resultsFound = _foundResults;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t})(entityName);\n\t\t\t\t}\n\t\t\t}\n\t\t}, 500);\n\n\t};\n\n\n\t$scope.showResults = function () {\n\t\t$scope.searchResultsOpen = true;\n\t\t$scope.sidebarClass = \"sidebar s-search-width\";\n\t\t$window.onclick = function (event) {\n\t\t\tvar _targetClassOfSearch = event.target.parentElement.offsetParent.classList.contains(\"sidebar\");\n\t\t\tif (!_targetClassOfSearch) {\n\t\t\t\t$scope.hideResults();\n\t\t\t\t$scope.$apply();\n\t\t\t}\n\t\t};\n\t};\n\n\t$scope.hideResults = function () {\n\t\t$scope.searchResultsOpen = false;\n\t\t$scope.sidebarClass = \"sidebar\";\n\t\t$scope.search.$setPristine();\n\t\t$scope.keywords = \"\";\n\t\t$window.onclick = null;\n\t\t$scope.loading = false;\n\t\t$scope.resultsFound = true;\n\n\t\tfor (var entityName in $scope.searchResults) {\n\t\t\t$scope.searchResults[entityName].results = [];\n\t\t}\n\t};\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\").controller(\"pageDialog\", [\"$scope\", \"$location\", \"$log\", \"$anchorScroll\", \"$slatwall\", \"dialogService\", function ($scope, $location, $log, $anchorScroll, $slatwall, dialogService) {\n\t$scope.$id = \"pageDialogController\";\n\n\t//get url param to retrieve collection listing\n\t$scope.pageDialogs = dialogService.getPageDialogs();\n\t$scope.scrollToTopOfDialog = function () {\n\t\t$location.hash(\"/#topOfPageDialog\");\n\t\t$anchorScroll();\n\t};\n\t$scope.pageDialogStyle = { \"z-index\": 3000 };\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\").controller(\"preprocessaccount_addaccountpayment\", [\"$scope\", \"$compile\", function ($scope, $compile) {\n\t//Define the different payment types used here\n\tvar paymentType = { aptCharge: \"444df32dd2b0583d59a19f1b77869025\", aptCredit: \"444df32e9b448ea196c18c66e1454c46\", aptAdjustment: \"68e3fb57d8102b47acc0003906d16ddd\" };\n\n\t$scope.totalAmountToApply = 0; //Default value to show on new form\n\t$scope.paymentTypeName = $.slatwall.rbKey(\"define.charge\"); //Default payment type\n\t$scope.paymentTypeLock = true; //Used to lock down the order payment type dropdowns\n\t$scope.amount = 0;\n\n\t$scope.updatePaymentType = function () {\n\t\t//Change all order payment types here\n\t\tangular.forEach($scope.appliedOrderPayment, function (obj, key) {\n\t\t\t//Only change the payment type if the type isn't adjustment'\n\t\t\tif ($scope.paymentType != paymentType.aptAdjustment) obj.paymentType = $scope.paymentType;\n\t\t});\n\n\t\tif ($scope.paymentType == paymentType.aptCharge) {\n\t\t\t$scope.paymentTypeName = $.slatwall.rbKey(\"define.charge\");\n\t\t\t$scope.paymentTypeLock = true;\n\t\t} else if ($scope.paymentType == paymentType.aptCredit) {\n\t\t\t$scope.paymentTypeName = $.slatwall.rbKey(\"define.credit\");\n\t\t\t$scope.paymentTypeLock = true;\n\t\t} else if ($scope.paymentType == paymentType.aptAdjustment) {\n\t\t\t$scope.paymentTypeLock = false;\n\t\t\t$scope.paymentTypeName = $.slatwall.rbKey(\"define.adjustment\");\n\t\t\t$scope.amount = 0;\n\t\t}\n\n\t\t//Update the subtotal now that we changed the payment type\n\t\t$scope.updateSubTotal();\n\t};\n\n\t$scope.updateSubTotal = function () {\n\t\t$scope.totalAmountToApply = 0; //Reset the subtotal before we loop\n\n\t\t//Loop through all the amount fields and create a running subtotal\n\t\tangular.forEach($scope.appliedOrderPayment, function (obj, key) {\n\t\t\t//Don't count the field if its undefied or not a number\n\t\t\tif (obj.amount != undefined && !isNaN(obj.amount)) {\n\t\t\t\t//Charge / adjustment condition for subtotal\n\t\t\t\tif ($scope.paymentType == paymentType.aptCharge || $scope.paymentType == paymentType.aptAdjustment) {\n\t\t\t\t\tif (obj.paymentType == paymentType.aptCharge) $scope.totalAmountToApply += parseFloat(obj.amount);else if (obj.paymentType == paymentType.aptCredit) $scope.totalAmountToApply -= parseFloat(obj.amount);\n\n\t\t\t\t\t//Credit condition for subtotal\n\t\t\t\t} else if ($scope.paymentType == paymentType.aptCredit) {\n\t\t\t\t\tif (obj.paymentType == paymentType.aptCharge) $scope.totalAmountToApply -= parseFloat(obj.amount);else if (obj.paymentType == paymentType.aptCredit) $scope.totalAmountToApply += parseFloat(obj.amount);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t//The amount not applied to an order\n\t\t$scope.amountUnapplied = Math.round(($scope.amount - $scope.totalAmountToApply) * 100) / 100;\n\t\t$scope.accountBalanceChange = parseFloat($scope.amount);\n\n\t\t//Switch the account balance display amount to a negative if you are doing a charge\n\t\tif ($scope.paymentType == paymentType.aptCharge) $scope.accountBalanceChange = parseFloat($scope.accountBalanceChange * -1); //If charge, change to neg since we are lowering account balance\n\t\telse if ($scope.paymentType == paymentType.aptAdjustment) $scope.accountBalanceChange += parseFloat($scope.amountUnapplied); //If adjustment, use the amount unapplied to determine the balance change\n\t};\n}]);","\"use strict\";\nangular.module(\"slatwalladmin\").controller(\"routerController\", [\"$scope\", \"$routeParams\", \"$location\", \"$log\", \"partialsPath\", \"baseURL\", function ($scope, $routeParams, $location, $log, partialsPath, baseURL) {\n\t$scope.$id = \"routerController\";\n\t$scope.partialRoute = \"\";\n\n\t$log.debug($routeParams);\n\t$log.debug($location);\n\tvar path = $location.path();\n\t$scope.controllerType = path.split(\"/\")[1];\n\tvar type;\n\n\tif ($scope.controllerType === \"entity\") {\n\t\t$scope.entityName = $routeParams.entityName;\n\t\tif (angular.isDefined($routeParams.entityID)) {\n\t\t\t$scope.entityID = $routeParams.entityID || \"\";\n\t\t}\n\t}\n}]);"],"sourceRoot":"/source/"}