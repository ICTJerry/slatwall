{"version":3,"names":[],"mappings":"","sources":["services/metadataservice.js"],"sourcesContent":["'use strict';\nangular.module('slatwalladmin').factory('metadataService', [\n    '$filter',\n    '$log',\n    function ($filter, $log) {\n        var _propertiesList = {};\n        var _orderBy = $filter('orderBy');\n        var metadataService = {\n            getPropertiesList: function () {\n                return _propertiesList;\n            },\n            getPropertiesListByBaseEntityAlias: function (baseEntityAlias) {\n                return _propertiesList[baseEntityAlias];\n            },\n            setPropertiesList: function (value, key) {\n                _propertiesList[key] = value;\n            },\n            formatPropertiesList: function (propertiesList, propertyIdentifier) {\n                var simpleGroup = {\n                    $$group: 'simple',\n                };\n                propertiesList.data.push(simpleGroup);\n                var drillDownGroup = {\n                    $$group: 'drilldown',\n                };\n                propertiesList.data.push(drillDownGroup);\n                var compareCollections = {\n                    $$group: 'compareCollections',\n                };\n                propertiesList.data.push(compareCollections);\n                var attributeCollections = {\n                    $$group: 'attribute',\n                };\n                propertiesList.data.push(attributeCollections);\n                for (var i in propertiesList.data) {\n                    if (angular.isDefined(propertiesList.data[i].ormtype)) {\n                        if (angular.isDefined(propertiesList.data[i].attributeID)) {\n                            propertiesList.data[i].$$group = 'attribute';\n                        }\n                        else {\n                            propertiesList.data[i].$$group = 'simple';\n                        }\n                    }\n                    if (angular.isDefined(propertiesList.data[i].fieldtype)) {\n                        if (propertiesList.data[i].fieldtype === 'id') {\n                            propertiesList.data[i].$$group = 'simple';\n                        }\n                        if (propertiesList.data[i].fieldtype === 'many-to-one') {\n                            propertiesList.data[i].$$group = 'drilldown';\n                        }\n                        if (propertiesList.data[i].fieldtype === 'many-to-many' || propertiesList.data[i].fieldtype === 'one-to-many') {\n                            propertiesList.data[i].$$group = 'compareCollections';\n                        }\n                    }\n                    propertiesList.data[i].propertyIdentifier = propertyIdentifier + '.' + propertiesList.data[i].name;\n                }\n                //propertiesList.data = _orderBy(propertiesList.data,['displayPropertyIdentifier'],false);\n                //--------------------------------Removes empty lines from dropdown.\n                var temp = [];\n                for (var i = 0; i <= propertiesList.data.length - 1; i++) {\n                    if (propertiesList.data[i].propertyIdentifier.indexOf(\".undefined\") != -1) {\n                        $log.debug(\"removing: \" + propertiesList.data[i].displayPropertyIdentifier);\n                        propertiesList.data[i].displayPropertyIdentifier = \"hide\";\n                    }\n                    else {\n                        temp.push(propertiesList.data[i]);\n                        $log.debug(propertiesList.data[i]);\n                    }\n                }\n                temp.sort;\n                propertiesList.data = temp;\n                $log.debug(\"----------------------PropertyList\\n\\n\\n\\n\\n\");\n                propertiesList.data = _orderBy(propertiesList.data, ['propertyIdentifier'], false);\n                //--------------------------------End remove empty lines.\n            },\n            orderBy: function (propertiesList, predicate, reverse) {\n                return _orderBy(propertiesList, predicate, reverse);\n            }\n        };\n        return metadataService;\n    }\n]);\n\n//# sourceMappingURL=../services/metadataservice.js.map"],"file":"services/metadataservice.js","sourceRoot":"/source/"}