{"version":3,"names":[],"mappings":"","sources":["directives/orderitem/sworderitem.js"],"sourcesContent":["'use strict';\nangular.module('slatwalladmin').directive('swOrderItem', ['$log', '$compile', '$http', '$templateCache', '$slatwall', 'partialsPath', function ($log, $compile, $http, $templateCache, $slatwall, partialsPath) {\n    return {\n        restrict: \"A\",\n        scope: {\n            orderItem: \"=\",\n            orderId: \"@\",\n            attributes: \"=\"\n        },\n        templateUrl: partialsPath + \"orderitem.html\",\n        link: function (scope, element, attr) {\n            $log.debug('order item init');\n            $log.debug(scope.orderItem);\n            scope.orderItem.clicked = false; //Never been clicked\n            scope.orderItem.details = [];\n            scope.orderItem.events = [];\n            scope.orderItem.queuePosition;\n            scope.orderItem.onWaitlist = false;\n            scope.orderItem.isPending = false;\n            scope.orderItem.isRegistered = false;\n            var foundPosition = false;\n            if (scope.orderItem.data.sku.data.product.data.productType.data.systemCode === 'event') {\n                var eventRegistrationPromise = scope.orderItem.$$getEventRegistrations();\n                eventRegistrationPromise.then(function () {\n                    angular.forEach(scope.orderItem.data.eventRegistrations, function (eventRegistration) {\n                        $log.debug(eventRegistration);\n                        var eventRegistrationPromise = eventRegistration.$$getEventRegistrationStatusType();\n                        eventRegistrationPromise.then(function (rec) {\n                            $log.debug(rec);\n                            angular.forEach(rec.records, function (record) {\n                                $log.debug(\"Records\");\n                                $log.debug(record.eventRegistrationStatusType);\n                                angular.forEach(record.eventRegistrationStatusType, function (statusType) {\n                                    if ((angular.isDefined(statusType.systemCode) && statusType.systemCode !== null) && statusType.systemCode === \"erstWaitlisted\") {\n                                        scope.orderItem.onWaitlist = true;\n                                        $log.debug(\"Found + \" + statusType.systemCode);\n                                        //Because the customer is waitlisted, we need to get the number of customers ahead of them in the queue.\n                                        var position = getPositionInQueueFor(scope.orderItem);\n                                        scope.orderItem.queuePosition = position;\n                                    }\n                                    else if ((angular.isDefined(statusType.systemCode) && statusType.systemCode !== null) && statusType.systemCode === \"erstRegistered\") {\n                                        scope.orderItem.isRegistered = true;\n                                        $log.debug(\"Found + \" + statusType.systemCode);\n                                    }\n                                    else if ((angular.isDefined(statusType.systemCode) && statusType.systemCode !== null) && statusType.systemCode === \"erstPendingApproval\") {\n                                        scope.orderItem.isPending = true;\n                                        $log.debug(\"Found + \" + statusType.systemCode);\n                                    }\n                                    else {\n                                        $log.error(\"Couldn't resolve a status type for: \" + statusType.systemCode);\n                                    }\n                                });\n                            });\n                        });\n                    });\n                });\n            }\n            /**\n             * Returns the current position in the queue for an orderItem that's on the waiting list.\n             */\n            var getPositionInQueueFor = function (orderItem) {\n                $log.debug(\"Retrieving position in Queue: \");\n                var queueConfig = [\n                    {\n                        \"propertyIdentifier\": \"_eventregistration.waitlistQueuePositionStruct\",\n                        \"isVisible\": true,\n                        \"persistent\": false,\n                        \"title\": \"Event Registrations\"\n                    }\n                ];\n                var queueGroupsConfig = [\n                    {\n                        \"filterGroup\": [\n                            {\n                                \"propertyIdentifier\": \"_eventregistration.orderItem.orderItemID\",\n                                \"comparisonOperator\": \"=\",\n                                \"value\": orderItem.$$getID(),\n                            }\n                        ]\n                    }\n                ];\n                var queueOptions = {\n                    columnsConfig: angular.toJson(queueConfig),\n                    filterGroupsConfig: angular.toJson(queueGroupsConfig),\n                    allRecords: true\n                };\n                var positionPromise = $slatwall.getEntity('EventRegistration', queueOptions);\n                $log.debug(positionPromise);\n                positionPromise.then(function (value) {\n                    angular.forEach(value.records, function (position) {\n                        $log.debug(\"Position: \" + position.waitlistQueuePositionStruct);\n                        if (position.waitlistQueuePositionStruct !== -1) {\n                            scope.orderItem.queuePosition = position.waitlistQueuePositionStruct; //Use the value.\n                            return position.waitlistQueuePositionStruct;\n                        }\n                    });\n                });\n            };\n            //define how we get child order items\n            var columnsConfig = [\n                {\n                    \"isDeletable\": false,\n                    \"isExportable\": true,\n                    \"propertyIdentifier\": \"_orderitem.orderItemID\",\n                    \"ormtype\": \"id\",\n                    \"isVisible\": true,\n                    \"isSearchable\": true,\n                    \"title\": \"Order Item ID\"\n                },\n                {\n                    \"title\": \"Order Item Type\",\n                    \"propertyIdentifier\": \"_orderitem.orderItemType\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Order Item Price\",\n                    \"propertyIdentifier\": \"_orderitem.price\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Sku Name\",\n                    \"propertyIdentifier\": \"_orderitem.sku.skuName\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Sku Price\",\n                    \"propertyIdentifier\": \"_orderitem.skuPrice\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Sku ID\",\n                    \"propertyIdentifier\": \"_orderitem.sku.skuID\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"SKU Code\",\n                    \"propertyIdentifier\": \"_orderitem.sku.skuCode\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Product Bundle Group\",\n                    \"propertyIdentifier\": \"_orderitem.productBundleGroup.productBundleGroupID\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Product ID\",\n                    \"propertyIdentifier\": \"_orderitem.sku.product.productID\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Product Name\",\n                    \"propertyIdentifier\": \"_orderitem.sku.product.productName\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Product Type\",\n                    \"propertyIdentifier\": \"_orderitem.sku.product.productType\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Product Description\",\n                    \"propertyIdentifier\": \"_orderitem.sku.product.productDescription\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"propertyIdentifier\": \"_orderitem.sku.baseProductType\",\n                    \"persistent\": false\n                },\n                {\n                    \"title\": \"Event Start Date\",\n                    \"propertyIdentifier\": \"_orderitem.sku.eventStartDateTime\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Product Description\",\n                    \"propertyIdentifier\": \"_orderitem.sku.options\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"propertyIdentifier\": \"_orderitem.sku.skuPrice\",\n                    \"ormtype\": \"string\"\n                },\n                {\n                    \"title\": \"Image File Name\",\n                    \"propertyIdentifier\": \"_orderitem.sku.imageFile\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Qty.\",\n                    \"propertyIdentifier\": \"_orderitem.quantity\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Fulfillment Method Name\",\n                    \"propertyIdentifier\": \"_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodName\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Fulfillment ID\",\n                    \"propertyIdentifier\": \"_orderitem.orderFulfillment.orderFulfillmentID\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Fulfillment Method Type\",\n                    \"propertyIdentifier\": \"_orderitem.orderFulfillment.fulfillmentMethod.fulfillmentMethodType\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"propertyIdentifier\": \"_orderitem.orderFulfillment.pickupLocation.primaryAddress.address\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Street Address\",\n                    \"propertyIdentifier\": \"_orderitem.orderFulfillment.shippingAddress.streetAddress\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Street Address 2\",\n                    \"propertyIdentifier\": \"_orderitem.orderFulfillment.shippingAddress.street2Address\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Postal Code\",\n                    \"propertyIdentifier\": \"_orderitem.orderFulfillment.shippingAddress.postalCode\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"City\",\n                    \"propertyIdentifier\": \"_orderitem.orderFulfillment.shippingAddress.city\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"State\",\n                    \"propertyIdentifier\": \"_orderitem.orderFulfillment.shippingAddress.stateCode\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Country\",\n                    \"propertyIdentifier\": \"_orderitem.orderFulfillment.shippingAddress.countryCode\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"propertyIdentifier\": \"_orderitem.orderFulfillment.pickupLocation.primaryAddress.address\",\n                    \"isVisible\": true,\n                    \"isDeletable\": true\n                },\n                {\n                    \"title\": \"Total\",\n                    \"propertyIdentifier\": \"_orderitem.itemTotal\",\n                    \"persistent\": false\n                },\n                {\n                    \"title\": \"Discount Amount\",\n                    \"propertyIdentifier\": \"_orderitem.discountAmount\",\n                    \"persistent\": false\n                },\n                {\n                    \"title\": \"Tax Amount\",\n                    \"propertyIdentifier\": \"_orderitem.taxAmount\",\n                    \"persistent\": false\n                },\n                {\n                    \"propertyIdentifier\": \"_orderitem.extendedPrice\",\n                    \"persistent\": false\n                },\n                {\n                    \"propertyIdentifier\": \"_orderitem.productBundleGroup.amount\",\n                    \"ormtype\": \"big_decimal\"\n                },\n                {\n                    \"propertyIdentifier\": \"_orderitem.productBundleGroup.amountType\",\n                    \"ormtype\": \"string\"\n                },\n                {\n                    \"propertyIdentifier\": \"_orderitem.productBundleGroupPrice\",\n                    \"persistent\": false\n                },\n                {\n                    \"propertyIdentifier\": \"_orderitem.productBundlePrice\",\n                    \"persistent\": false\n                }\n            ];\n            //Add attributes to the column configuration\n            angular.forEach(scope.attributes, function (attribute) {\n                var attributeColumn = {\n                    propertyIdentifier: \"_orderitem.\" + attribute.attributeCode,\n                    attributeID: attribute.attributeID,\n                    attributeSetObject: \"orderItem\"\n                };\n                columnsConfig.push(attributeColumn);\n            });\n            var filterGroupsConfig = [\n                {\n                    \"filterGroup\": [\n                        {\n                            \"propertyIdentifier\": \"_orderitem.parentOrderItem.orderItemID\",\n                            \"comparisonOperator\": \"=\",\n                            \"value\": scope.orderItem.$$getID(),\n                        }\n                    ]\n                }\n            ];\n            var options = {\n                columnsConfig: angular.toJson(columnsConfig),\n                filterGroupsConfig: angular.toJson(filterGroupsConfig),\n                allRecords: true\n            };\n            //Create a list of order items.\n            scope.childOrderItems = [];\n            scope.orderItem.depth = 1;\n            /**\n             * Hide orderItem children on clicking the details link.\n             */\n            scope.hideChildren = function (orderItem) {\n                //Set all child order items to clicked = false.\n                angular.forEach(scope.childOrderItems, function (child) {\n                    $log.debug(\"hideing\");\n                    child.hide = !child.hide;\n                    scope.orderItem.clicked = !scope.orderItem.clicked;\n                });\n            };\n            //Delete orderItem\n            scope.deleteEntity = function () {\n                $log.debug(\"Deleting\");\n                $log.debug(scope.orderItem);\n                var deletePromise = scope.orderItem.$$delete();\n                deletePromise.then(function () {\n                    delete scope.orderItem;\n                });\n            };\n            /**\n             * Gets a list of child order items if they exist.\n             */\n            scope.getChildOrderItems = function () {\n                if (!scope.orderItem.childItemsRetrieved) {\n                    scope.orderItem.clicked = !scope.orderItem.clicked;\n                    scope.orderItem.hide = !scope.orderItem.hide;\n                    scope.orderItem.childItemsRetrieved = true;\n                    var orderItemsPromise = $slatwall.getEntity('orderItem', options);\n                    orderItemsPromise.then(function (value) {\n                        var collectionConfig = {};\n                        collectionConfig.columns = columnsConfig;\n                        collectionConfig.baseEntityName = 'SlatwallOrderItem';\n                        collectionConfig.baseEntityAlias = '_orderitem';\n                        var childOrderItems = $slatwall.populateCollection(value.records, collectionConfig);\n                        angular.forEach(childOrderItems, function (childOrderItem) {\n                            childOrderItem.depth = scope.orderItem.depth + 1;\n                            scope.childOrderItems.push(childOrderItem);\n                            childOrderItem.data.productBundleGroupPercentage = 1;\n                            if (childOrderItem.data.productBundleGroup.data.amountType === 'skuPricePercentageIncrease') {\n                                childOrderItem.data.productBundleGroupPercentage = 1 + childOrderItem.data.productBundleGroup.data.amount / 100;\n                            }\n                            else if (childOrderItem.data.productBundleGroup.data.amountType === 'skuPricePercentageDecrease') {\n                                childOrderItem.data.productBundleGroupPercentage = 1 - childOrderItem.data.productBundleGroup.data.amount / 100;\n                            }\n                        });\n                    });\n                }\n                else {\n                    //We already have the items so we just need to show them.\n                    angular.forEach(scope.childOrderItems, function (child) {\n                        child.hide = !child.hide;\n                        scope.orderItem.clicked = !scope.orderItem.clicked;\n                    });\n                }\n            };\n        }\n    };\n}]);\n\n//# sourceMappingURL=../../directives/orderitem/sworderitem.js.map"],"file":"directives/orderitem/sworderitem.js","sourceRoot":"/source/"}