{"version":3,"names":[],"mappings":"","sources":["directives/productBundleGroup/swproductbundlegrouptype.js"],"sourcesContent":["/**\n * Handles user selections of Product Group Types.\n */\n'use strict';\nangular.module('slatwalladmin').directive('swProductBundleGroupType', [\n    '$http',\n    '$log',\n    '$slatwall',\n    'formService',\n    'productBundlePartialsPath',\n    'productBundleService',\n    function ($http, $log, $slatwall, formService, productBundlePartialsPath, productBundleService) {\n        return {\n            restrict: 'A',\n            templateUrl: productBundlePartialsPath + \"productbundlegrouptype.html\",\n            scope: {\n                productBundleGroup: \"=\"\n            },\n            controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n                $log.debug('productBundleGrouptype');\n                $log.debug($scope.productBundleGroup);\n                $scope.productBundleGroupTypes = {};\n                $scope.$$id = \"productBundleGroupType\";\n                $scope.productBundleGroupTypes.value = [];\n                $scope.productBundleGroupTypes.$$adding = false;\n                $scope.productBundleGroupType = {};\n                if (angular.isUndefined($scope.productBundleGroup.data.productBundleGroupType)) {\n                    var productBundleGroupType = $slatwall.newType();\n                    var parentType = $slatwall.newType();\n                    parentType.data.typeID = '154dcdd2f3fd4b5ab5498e93470957b8';\n                    productBundleGroupType.$$setParentType(parentType);\n                    $scope.productBundleGroup.$$setProductBundleGroupType(productBundleGroupType);\n                }\n                /**\n                 * Sets the state to adding and sets the initial data.\n                 */\n                $scope.productBundleGroupTypes.setAdding = function (isAdding) {\n                    $scope.productBundleGroupTypes.$$adding = isAdding;\n                    var productBundleGroupType = $slatwall.newType();\n                    var parentType = $slatwall.newType();\n                    parentType.data.typeID = '154dcdd2f3fd4b5ab5498e93470957b8';\n                    productBundleGroupType.$$setParentType(parentType);\n                    productBundleGroupType.data.typeName = $scope.productBundleGroup.data.productBundleGroupType.data.typeName;\n                    productBundleGroupType.data.typeDescription = '';\n                    productBundleGroupType.data.typeNameCode = '';\n                    angular.extend($scope.productBundleGroup.data.productBundleGroupType, productBundleGroupType);\n                };\n                $scope.showAddProductBundleGroupTypeBtn = false;\n                /**\n                 * Handles looking up the keyword and populating the dropdown as a user types.\n                 */\n                $scope.productBundleGroupTypes.getTypesByKeyword = function (keyword) {\n                    $log.debug('getTypesByKeyword');\n                    var filterGroupsConfig = '[' + ' {  ' + '\"filterGroup\":[  ' + ' {  ' + ' \"propertyIdentifier\":\"_type.parentType.systemCode\",' + ' \"comparisonOperator\":\"=\",' + ' \"value\":\"productBundleGroupType\",' + ' \"ormtype\":\"string\",' + ' \"conditionDisplay\":\"Equals\"' + '},' + '{' + '\"logicalOperator\":\"AND\",' + ' \"propertyIdentifier\":\"_type.typeName\",' + ' \"comparisonOperator\":\"like\",' + ' \"ormtype\":\"string\",' + ' \"value\":\"%' + keyword + '%\"' + '  }' + ' ]' + ' }' + ']';\n                    return $slatwall.getEntity('type', { filterGroupsConfig: filterGroupsConfig.trim() }).then(function (value) {\n                        $log.debug('typesByKeyword');\n                        $log.debug(value);\n                        $scope.productBundleGroupTypes.value = value.pageRecords;\n                        var myLength = keyword.length;\n                        if (myLength > 0) {\n                            $scope.showAddProductBundleGroupTypeBtn = true;\n                        }\n                        else {\n                            $scope.showAddProductBundleGroupTypeBtn = false;\n                        }\n                        return $scope.productBundleGroupTypes.value;\n                    });\n                };\n                /**\n                 * Handles user selection of the dropdown.\n                 */\n                $scope.selectProductBundleGroupType = function ($item, $model, $label) {\n                    console.log(\"Selecting\");\n                    $scope.$item = $item;\n                    $scope.$model = $model;\n                    $scope.$label = $label;\n                    angular.extend($scope.productBundleGroup.data.productBundleGroupType.data, $item);\n                    var parentType = $slatwall.newType();\n                    parentType.data.typeID = '154dcdd2f3fd4b5ab5498e93470957b8';\n                    $scope.productBundleGroup.data.productBundleGroupType.$$setParentType(parentType);\n                    $scope.showAddProductBundleGroupTypeBtn = false;\n                };\n                /**\n                 * Closes the add screen\n                 */\n                $scope.closeAddScreen = function () {\n                    $scope.productBundleGroupTypes.$$adding = false;\n                    $scope.showAddProductBundleGroupTypeBtn = false;\n                };\n                /**\n                 * Clears the type name\n                 */\n                $scope.clearTypeName = function () {\n                    if (angular.isDefined($scope.productBundleGroup.data.productBundleGroupType)) {\n                        $scope.productBundleGroup.data.productBundleGroupType.data.typeName = '';\n                    }\n                };\n                /**\n                 * Saves product bundle group type\n                 */\n                $scope.saveProductBundleGroupType = function () {\n                    //Gets the promise from save\n                    var promise = $scope.productBundleGroup.data.productBundleGroupType.$$save();\n                    promise.then(function (response) {\n                        //Calls close function\n                        if (promise.valid) {\n                            $scope.closeAddScreen();\n                        }\n                    });\n                };\n                //Sets up clickOutside Directive call back arguments\n                $scope.clickOutsideArgs = {\n                    callBackActions: [$scope.closeAddScreen, $scope.clearTypeName]\n                };\n                /**\n                 * Works with swclickoutside directive to close dialog\n                 */\n                $scope.closeThis = function (clickOutsideArgs) {\n                    //Check against the object state\n                    if (!$scope.productBundleGroup.data.productBundleGroupType.$$isPersisted()) {\n                        for (var callBackAction in clickOutsideArgs.callBackActions) {\n                            clickOutsideArgs.callBackActions[callBackAction]();\n                        }\n                    }\n                };\n            }]\n        };\n    }\n]);\n\n//# sourceMappingURL=../../directives/productBundleGroup/swproductbundlegrouptype.js.map"],"file":"directives/productBundleGroup/swproductbundlegrouptype.js","sourceRoot":"/source/"}