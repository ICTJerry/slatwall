{"version":3,"names":[],"mappings":"","sources":["directives/common/validation/swvalidationuniqueornull.js"],"sourcesContent":["/**\n * Validates true if the given object is 'unique' and false otherwise.\n */\nangular.module('slatwalladmin').directive(\"swvalidationuniqueornull\", ['$http', '$q', '$slatwall', '$log', function ($http, $q, $slatwall, $log) {\n    return {\n        restrict: \"A\",\n        require: \"ngModel\",\n        link: function (scope, element, attributes, ngModel) {\n            ngModel.$asyncValidators.swvalidationuniqueornull = function (modelValue, viewValue) {\n                $log.debug('async');\n                var deferred = $q.defer(), currentValue = modelValue || viewValue, key = scope.propertyDisplay.object.metaData.className, property = scope.propertyDisplay.property;\n                //First time the asyncValidators function is loaded the\n                //key won't be set  so ensure that we have \n                //key and propertyName before checking with the server \n                if (key && property) {\n                    $slatwall.checkUniqueOrNullValue(key, property, currentValue).then(function (unique) {\n                        $log.debug('uniquetest');\n                        $log.debug(unique);\n                        if (unique) {\n                            deferred.resolve(); //It's unique\n                        }\n                        else {\n                            deferred.reject(); //Add unique to $errors\n                        }\n                    });\n                }\n                else {\n                    deferred.resolve(); //Ensure promise is resolved if we hit this \n                }\n                return deferred.promise;\n            };\n        }\n    };\n}]);\n\n//# sourceMappingURL=../../../directives/common/validation/swvalidationuniqueornull.js.map"],"file":"directives/common/validation/swvalidationuniqueornull.js","sourceRoot":"/source/"}