{"version":3,"names":[],"mappings":"","sources":["directives/workflow/swworkflowtaskactions.js"],"sourcesContent":["angular.module('slatwalladmin').directive('swWorkflowTaskActions', [\n    '$log',\n    '$slatwall',\n    'metadataService',\n    'collectionService',\n    'workflowPartialsPath',\n    function ($log, $slatwall, metadataService, collectionService, workflowPartialsPath) {\n        return {\n            restrict: 'AE',\n            scope: {\n                workflowTask: \"=\"\n            },\n            templateUrl: workflowPartialsPath + \"workflowtaskactions.html\",\n            link: function (scope, element, attrs) {\n                $log.debug('Workflow Task Actions Init');\n                $log.debug(scope.workflowTask);\n                scope.openActions = false;\n                /**\n                 * Returns the correct object based on the selected object type.\n                 */\n                var getObjectByActionType = function (workflowTaskAction) {\n                    if (workflowTaskAction.data.actionType === 'email') {\n                        workflowTaskAction.$$getEmailTemplate();\n                    }\n                    else if (workflowTaskAction.data.actionType === 'print') {\n                        workflowTaskAction.$$getPrintTemplate();\n                    }\n                };\n                /**\n                 * --------------------------------------------------------------------------------------------------------\n                 * Returns workflow task action, and saves them to the scope variable workflowtaskactions\n                 * --------------------------------------------------------------------------------------------------------\n                 */\n                scope.getWorkflowTaskActions = function () {\n                    /***\n                   Note:\n                   This conditional is checking whether or not we need to be retrieving to\n                   items all over again. If we already have them, we won't make another\n                   trip to the database.\n                   \n                ***/\n                    if (angular.isUndefined(scope.workflowTask.data.workflowTaskActions)) {\n                        var workflowTaskPromise = scope.workflowTask.$$getWorkflowTaskActions();\n                        workflowTaskPromise.then(function () {\n                            scope.workflowTaskActions = scope.workflowTask.data.workflowTaskActions;\n                            angular.forEach(scope.workflowTaskActions, function (workflowTaskAction) {\n                                getObjectByActionType(workflowTaskAction);\n                            });\n                            $log.debug(scope.workflowTaskActions);\n                        });\n                    }\n                    else {\n                        scope.workflowTaskActions = scope.workflowTask.data.workflowTaskActions;\n                    }\n                    if (angular.isUndefined(scope.workflowTask.data.workflowTaskActions)) {\n                        scope.workflowTask.data.workflowTaskActions = [];\n                        scope.workflowTaskActions = scope.workflowTask.data.workflowTaskActions;\n                    }\n                };\n                scope.getWorkflowTaskActions(); //Call get\n                /**\n                 * --------------------------------------------------------------------------------------------------------\n                 * Saves the workflow task actions by calling the objects $$save method.\n                 * @param taskAction\n                 * --------------------------------------------------------------------------------------------------------\n                 */\n                scope.saveWorkflowTaskAction = function (taskAction, context) {\n                    $log.debug(\"Context: \" + context);\n                    $log.debug(\"saving task action and parent task\");\n                    $log.debug(taskAction);\n                    var savePromise = scope.workflowTaskActions.selectedTaskAction.$$save();\n                    savePromise.then(function () {\n                        var taSavePromise = taskAction.$$save;\n                        //Clear the form by adding a new task action if 'save and add another' otherwise, set save and set finished\n                        if (context == 'add') {\n                            $log.debug(\"Save and New\");\n                            scope.addWorkflowTaskAction(taskAction);\n                            scope.finished = false;\n                        }\n                        else if (context == \"finish\") {\n                            scope.finished = true;\n                        }\n                    });\n                }; //<--end save\n                /**\n                    * Sets the editing state to show/hide the edit screen.\n                    */\n                scope.setHidden = function (task) {\n                    if (!angular.isObject(task)) {\n                        task = {};\n                    }\n                    if (angular.isUndefined(task.hidden)) {\n                        task.hidden = false;\n                    }\n                    else {\n                        $log.debug(\"setHidden()\", \"Setting Hide Value To \" + !task.hidden);\n                        task.hidden = !task.hidden;\n                    }\n                };\n                /**\n                 * --------------------------------------------------------------------------------------------------------\n                 * Adds workflow action items by calling the workflowTask objects $$addWorkflowTaskAction() method\n                 * and sets the result to scope.\n                 * @param taskAction\n                 * --------------------------------------------------------------------------------------------------------\n                 */\n                scope.addWorkflowTaskAction = function (taskAction) {\n                    var workflowTaskAction = scope.workflowTask.$$addWorkflowTaskAction();\n                    scope.selectWorkflowTaskAction(workflowTaskAction);\n                    $log.debug(scope.workflow);\n                };\n                /**\n                 * --------------------------------------------------------------------------------------------------------\n                 * Selects a new task action and populates the task action properties.\n                 * --------------------------------------------------------------------------------------------------------\n                 */\n                scope.selectWorkflowTaskAction = function (workflowTaskAction) {\n                    $log.debug(\"Selecting new task action for editing: \");\n                    $log.debug(workflowTaskAction);\n                    scope.finished = false;\n                    scope.workflowTaskActions.selectedTaskAction = undefined;\n                    var filterPropertiesPromise = $slatwall.getFilterPropertiesByBaseEntityName(scope.workflowTask.data.workflow.data.workflowObject);\n                    filterPropertiesPromise.then(function (value) {\n                        scope.filterPropertiesList = {\n                            baseEntityName: scope.workflowTask.data.workflow.data.workflowObject,\n                            baseEntityAlias: \"_\" + scope.workflowTask.data.workflow.data.workflowObject\n                        };\n                        metadataService.setPropertiesList(value, scope.workflowTask.data.workflow.data.workflowObject);\n                        scope.filterPropertiesList[scope.workflowTask.data.workflow.data.workflowObject] = metadataService.getPropertiesListByBaseEntityAlias(scope.workflowTask.data.workflow.data.workflowObject);\n                        metadataService.formatPropertiesList(scope.filterPropertiesList[scope.workflowTask.data.workflow.data.workflowObject], scope.workflowTask.data.workflow.data.workflowObject);\n                        scope.workflowTaskActions.selectedTaskAction = workflowTaskAction;\n                    });\n                };\n                /**\n                 * Overrides the confirm directive method deleteEntity. This is needed for the modal popup.\n                 */\n                scope.deleteEntity = function (entity) {\n                    scope.removeWorkflowTaskAction(entity);\n                };\n                /**\n                 * --------------------------------------------------------------------------------------------------------\n                 * Removes a workflow task action by calling the selected tasks $$delete method\n                 * and reindexes the list.\n                 * --------------------------------------------------------------------------------------------------------\n                 */\n                scope.removeWorkflowTaskAction = function (workflowTaskAction) {\n                    var deletePromise = workflowTaskAction.$$delete();\n                    deletePromise.then(function () {\n                        if (workflowTaskAction === scope.workflowTaskActions.selectedTaskAction) {\n                            delete scope.workflowTaskActions.selectedTaskAction;\n                        }\n                        $log.debug(\"removeWorkflowTaskAction\");\n                        $log.debug(workflowTaskAction);\n                        scope.workflowTaskActions.splice(workflowTaskAction.$$actionIndex, 1);\n                        for (var i in scope.workflowTaskActions) {\n                            scope.workflowTaskActions[i].$$actionIndex = i;\n                        }\n                    });\n                };\n            }\n        };\n    }\n]);\n\n//# sourceMappingURL=../../directives/workflow/swworkflowtaskactions.js.map"],"file":"directives/workflow/swworkflowtaskactions.js","sourceRoot":"/source/"}