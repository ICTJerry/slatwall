{"version":3,"names":[],"mappings":"","sources":["directives/collection/swfiltergroups.js"],"sourcesContent":["'use strict';\nangular.module('slatwalladmin').directive('swFilterGroups', [\n    '$http',\n    '$compile',\n    '$templateCache',\n    '$log',\n    'collectionPartialsPath',\n    function ($http, $compile, $templateCache, $log, collectionPartialsPath) {\n        return {\n            restrict: 'EA',\n            scope: {\n                collectionConfig: \"=\",\n                filterGroupItem: \"=\",\n                filterPropertiesList: \"=\",\n                saveCollection: \"&\",\n                filterGroup: \"=\",\n                comparisonType: \"@\"\n            },\n            templateUrl: collectionPartialsPath + \"filtergroups.html\",\n            controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n                //if the filter group comparisontype is not specified, then assume we are doing filters\n                if (!angular.isDefined($scope.comparisonType)) {\n                    $scope.comparisonType = 'filter';\n                }\n                $scope.itemInUse = false;\n                $log.debug('collectionConfig');\n                $log.debug($scope.collectionConfig);\n                this.getFilterGroup = function () {\n                    return $scope.filterGroup;\n                };\n                this.getFilterGroupItem = function () {\n                    return $scope.filterGroupItem;\n                };\n                this.setItemInUse = function (booleanValue) {\n                    $scope.itemInUse = booleanValue;\n                };\n                this.getItemInUse = function () {\n                    return $scope.itemInUse;\n                };\n                this.saveCollection = function () {\n                    $scope.saveCollection();\n                };\n                $scope.deselectItems = function (filterItem) {\n                    for (var i in filterItem.$$siblingItems) {\n                        filterItem.$$siblingItems[i].$$disabled = false;\n                    }\n                };\n                this.removeFilterItem = function (filterItemIndex) {\n                    if (angular.isDefined(filterItemIndex)) {\n                        $scope.deselectItems($scope.filterGroupItem[filterItemIndex]);\n                        $scope.filterGroupItem[filterItemIndex].setItemInUse(false);\n                        //remove item\n                        $log.debug('removeFilterItem');\n                        $log.debug(filterItemIndex);\n                        $scope.filterGroupItem.splice(filterItemIndex, 1);\n                        //make sure first item has no logical operator if it exists\n                        if ($scope.filterGroupItem.length) {\n                            delete $scope.filterGroupItem[0].logicalOperator;\n                        }\n                        $log.debug('removeFilterItem');\n                        $log.debug(filterItemIndex);\n                        $scope.saveCollection();\n                    }\n                };\n                this.removeFilterGroupItem = function (filterGroupItemIndex) {\n                    //remove Item\n                    $scope.deselectItems($scope.filterGroupItem[filterGroupItemIndex]);\n                    $scope.filterGroupItem[filterGroupItemIndex].setItemInUse(false);\n                    $scope.filterGroupItem.splice(filterGroupItemIndex, 1);\n                    //make sure first item has no logical operator if it exists\n                    if ($scope.filterGroupItem.length) {\n                        delete $scope.filterGroupItem[0].logicalOperator;\n                    }\n                    $log.debug('removeFilterGroupItem');\n                    $log.debug(filterGroupItemIndex);\n                    $scope.saveCollection();\n                };\n            }]\n        };\n    }\n]);\n\n//# sourceMappingURL=../../directives/collection/swfiltergroups.js.map"],"file":"directives/collection/swfiltergroups.js","sourceRoot":"/source/"}