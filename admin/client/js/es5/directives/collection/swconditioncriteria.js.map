{"version":3,"names":[],"mappings":"","sources":["directives/collection/swconditioncriteria.js"],"sourcesContent":["'use strict';\nangular.module('slatwalladmin').directive('swConditionCriteria', [\n    '$http',\n    '$compile',\n    '$templateCache',\n    '$log',\n    '$slatwall',\n    '$filter',\n    'workflowPartialsPath',\n    'collectionPartialsPath',\n    'collectionService',\n    'metadataService',\n    function ($http, $compile, $templateCache, $log, $slatwall, $filter, workflowPartialsPath, collectionPartialsPath, collectionService, metadataService) {\n        /* Template info begin*/\n        var getTemplate = function (selectedFilterProperty) {\n            var template = '';\n            var templatePath = '';\n            if (angular.isUndefined(selectedFilterProperty.ormtype) && angular.isUndefined(selectedFilterProperty.fieldtype)) {\n                templatePath = collectionPartialsPath + \"criteria.html\";\n            }\n            else {\n                var criteriaormtype = selectedFilterProperty.ormtype;\n                var criteriafieldtype = selectedFilterProperty.fieldtype;\n                switch (criteriaormtype) {\n                    case 'boolean':\n                        templatePath = collectionPartialsPath + \"criteriaboolean.html\";\n                        break;\n                    case 'string':\n                        templatePath = collectionPartialsPath + \"criteriastring.html\";\n                        break;\n                    case 'timestamp':\n                        templatePath = collectionPartialsPath + \"criteriadate.html\";\n                        break;\n                    case 'big_decimal':\n                    case 'integer':\n                    case 'float':\n                        templatePath = collectionPartialsPath + \"criterianumber.html\";\n                        break;\n                }\n                switch (criteriafieldtype) {\n                    case \"many-to-one\":\n                        templatePath = collectionPartialsPath + \"criteriamanytoone.html\";\n                        break;\n                    case \"many-to-many\":\n                        templatePath = collectionPartialsPath + \"criteriamanytomany.html\";\n                        break;\n                    case \"one-to-many\":\n                        templatePath = collectionPartialsPath + \"criteriaonetomany.html\";\n                        break;\n                }\n            }\n            var templateLoader = $http.get(templatePath, { cache: $templateCache });\n            return templateLoader;\n        };\n        /* Template info end*/\n        /* Options info begin */\n        var getStringOptions = function (type) {\n            var stringOptions = [];\n            if (angular.isUndefined(type)) {\n                type = 'filter';\n            }\n            if (type == 'filter') {\n                stringOptions = [\n                    {\n                        display: \"Equals\",\n                        comparisonOperator: \"=\"\n                    },\n                    {\n                        display: \"Doesn't Equal\",\n                        comparisonOperator: \"<>\"\n                    },\n                    {\n                        display: \"Contains\",\n                        comparisonOperator: \"like\",\n                        pattern: \"%w%\"\n                    },\n                    {\n                        display: \"Doesn't Contain\",\n                        comparisonOperator: \"not like\",\n                        pattern: \"%w%\"\n                    },\n                    {\n                        display: \"Starts With\",\n                        comparisonOperator: \"like\",\n                        pattern: \"w%\"\n                    },\n                    {\n                        display: \"Doesn't Start With\",\n                        comparisonOperator: \"not like\",\n                        pattern: \"w%\"\n                    },\n                    {\n                        display: \"Ends With\",\n                        comparisonOperator: \"like\",\n                        pattern: \"%w\"\n                    },\n                    {\n                        display: \"Doesn't End With\",\n                        comparisonOperator: \"not like\",\n                        pattern: \"%w\"\n                    },\n                    {\n                        display: \"In List\",\n                        comparisonOperator: \"in\"\n                    },\n                    {\n                        display: \"Not In List\",\n                        comparisonOperator: \"not in\"\n                    },\n                    {\n                        display: \"Defined\",\n                        comparisonOperator: \"is not\",\n                        value: \"null\"\n                    },\n                    {\n                        display: \"Not Defined\",\n                        comparisonOperator: \"is\",\n                        value: \"null\"\n                    }\n                ];\n                if (type === 'condition') {\n                    stringOptions = [\n                        {\n                            display: \"Equals\",\n                            comparisonOperator: \"=\"\n                        },\n                        {\n                            display: \"In List\",\n                            comparisonOperator: \"in\"\n                        },\n                        {\n                            display: \"Defined\",\n                            comparisonOperator: \"is not\",\n                            value: \"null\"\n                        },\n                        {\n                            display: \"Not Defined\",\n                            comparisonOperator: \"is\",\n                            value: \"null\"\n                        }\n                    ];\n                }\n            }\n            return stringOptions;\n        };\n        var getBooleanOptions = function (type) {\n            var booleanOptions = [];\n            if (angular.isUndefined(type)) {\n                type = 'filter';\n            }\n            if (type === 'filter' || type === 'condition') {\n                booleanOptions = [\n                    {\n                        display: \"True\",\n                        comparisonOperator: \"=\",\n                        value: \"True\"\n                    },\n                    {\n                        display: \"False\",\n                        comparisonOperator: \"=\",\n                        value: \"False\"\n                    },\n                    {\n                        display: \"Defined\",\n                        comparisonOperator: \"is not\",\n                        value: \"null\"\n                    },\n                    {\n                        display: \"Not Defined\",\n                        comparisonOperator: \"is\",\n                        value: \"null\"\n                    }\n                ];\n            }\n            return booleanOptions;\n        };\n        var getDateOptions = function (type) {\n            var dateOptions = [];\n            if (angular.isUndefined(type)) {\n                type = 'filter';\n            }\n            if (type === 'filter') {\n                dateOptions = [\n                    {\n                        display: \"Date\",\n                        comparisonOperator: \"between\",\n                        dateInfo: {\n                            type: 'exactDate',\n                        }\n                    },\n                    {\n                        display: \"In Range\",\n                        comparisonOperator: \"between\",\n                        dateInfo: {\n                            type: 'range'\n                        }\n                    },\n                    {\n                        display: \"Not In Range\",\n                        comparisonOperator: \"not between\",\n                        dateInfo: {\n                            type: 'range'\n                        }\n                    },\n                    {\n                        display: \"Today\",\n                        comparisonOperator: \"between\",\n                        dateInfo: {\n                            type: 'calculation',\n                            measureType: 'd',\n                            measureCount: 0,\n                            behavior: 'toDate'\n                        }\n                    },\n                    {\n                        display: \"Yesterday\",\n                        comparisonOperator: \"between\",\n                        dateInfo: {\n                            type: 'calculation',\n                            measureType: 'd',\n                            measureCount: -1,\n                            behavior: 'toDate'\n                        }\n                    },\n                    {\n                        display: \"This Week\",\n                        comparisonOperator: \"between\",\n                        dateInfo: {\n                            type: 'calculation',\n                            measureType: 'w',\n                            behavior: 'toDate'\n                        }\n                    },\n                    {\n                        display: \"This Month\",\n                        comparisonOperator: \"between\",\n                        dateInfo: {\n                            type: 'calculation',\n                            measureType: 'm',\n                            behavior: 'toDate'\n                        }\n                    },\n                    {\n                        display: \"This Quarter\",\n                        comparisonOperator: \"between\",\n                        dateInfo: {\n                            type: 'calculation',\n                            measureType: 'q',\n                            behavior: 'toDate'\n                        }\n                    },\n                    {\n                        display: \"This Year\",\n                        comparisonOperator: \"between\",\n                        dateInfo: {\n                            type: 'calculation',\n                            measureType: 'y',\n                            behavior: 'toDate'\n                        }\n                    },\n                    {\n                        display: \"Last N Hour(s)\",\n                        comparisonOperator: \"between\",\n                        dateInfo: {\n                            type: 'calculation',\n                            measureType: 'h',\n                            measureTypeDisplay: 'Hours'\n                        }\n                    },\n                    {\n                        display: \"Last N Day(s)\",\n                        comparisonOperator: \"between\",\n                        dateInfo: {\n                            type: 'calculation',\n                            measureType: 'd',\n                            measureTypeDisplay: 'Days'\n                        }\n                    },\n                    {\n                        display: \"Last N Week(s)\",\n                        comparisonOperator: \"between\",\n                        dateInfo: {\n                            type: 'calculation',\n                            measureType: 'w',\n                            measureTypeDisplay: 'Weeks'\n                        }\n                    },\n                    {\n                        display: \"Last N Month(s)\",\n                        comparisonOperator: \"between\",\n                        dateInfo: {\n                            type: 'calculation',\n                            measureType: 'm',\n                            measureTypeDisplay: 'Months'\n                        }\n                    },\n                    {\n                        display: \"Last N Quarter(s)\",\n                        comparisonOperator: \"between\",\n                        dateInfo: {\n                            type: 'calculation',\n                            measureType: 'q',\n                            measureTypeDisplay: 'Quarters'\n                        }\n                    },\n                    {\n                        display: \"Last N Year(s)\",\n                        comparisonOperator: \"between\",\n                        dateInfo: {\n                            type: 'calculation',\n                            measureType: 'y',\n                            measureTypeDisplay: 'Years'\n                        }\n                    },\n                    {\n                        display: \"Defined\",\n                        comparisonOperator: \"is not\",\n                        value: \"null\"\n                    },\n                    {\n                        display: \"Not Defined\",\n                        comparisonOperator: \"is\",\n                        value: \"null\"\n                    }\n                ];\n            }\n            if (type === 'condition') {\n                dateOptions = [\n                    {\n                        display: \"Defined\",\n                        comparisonOperator: \"is not\",\n                        value: \"null\"\n                    },\n                    {\n                        display: \"Not Defined\",\n                        comparisonOperator: \"is\",\n                        value: \"null\"\n                    }\n                ];\n            }\n            return dateOptions;\n        };\n        var getNumberOptions = function (type) {\n            var numberOptions = [];\n            if (angular.isUndefined(type)) {\n                type = 'filter';\n            }\n            if (type == 'filter') {\n                numberOptions = [\n                    {\n                        display: \"Equals\",\n                        comparisonOperator: \"=\"\n                    },\n                    {\n                        display: \"Doesn't Equal\",\n                        comparisonOperator: \"<>\"\n                    },\n                    {\n                        display: \"In Range\",\n                        comparisonOperator: \"between\",\n                        type: \"range\"\n                    },\n                    {\n                        display: \"Not In Range\",\n                        comparisonOperator: \"not between\",\n                        type: \"range\"\n                    },\n                    {\n                        display: \"Greater Than\",\n                        comparisonOperator: \">\"\n                    },\n                    {\n                        display: \"Greater Than Or Equal\",\n                        comparisonOperator: \">=\"\n                    },\n                    {\n                        display: \"Less Than\",\n                        comparisonOperator: \"<\"\n                    },\n                    {\n                        display: \"Less Than Or Equal\",\n                        comparisonOperator: \"<=\"\n                    },\n                    {\n                        display: \"In List\",\n                        comparisonOperator: \"in\"\n                    },\n                    {\n                        display: \"Not In List\",\n                        comparisonOperator: \"not in\"\n                    },\n                    {\n                        display: \"Defined\",\n                        comparisonOperator: \"is not\",\n                        value: \"null\"\n                    },\n                    {\n                        display: \"Not Defined\",\n                        comparisonOperator: \"is\",\n                        value: \"null\"\n                    }\n                ];\n            }\n            if (type === 'condition') {\n                numberOptions = [\n                    {\n                        display: \"Equals\",\n                        comparisonOperator: \"=\"\n                    },\n                    {\n                        display: \"Doesn't Equal\",\n                        comparisonOperator: \"<>\"\n                    },\n                    {\n                        display: \"Greater Than\",\n                        comparisonOperator: \">\"\n                    },\n                    {\n                        display: \"Greater Than Or Equal\",\n                        comparisonOperator: \">=\"\n                    },\n                    {\n                        display: \"Less Than\",\n                        comparisonOperator: \"<\"\n                    },\n                    {\n                        display: \"Less Than Or Equal\",\n                        comparisonOperator: \"<=\"\n                    },\n                    {\n                        display: \"In List\",\n                        comparisonOperator: \"in\"\n                    },\n                    {\n                        display: \"Defined\",\n                        comparisonOperator: \"is not\",\n                        value: \"null\"\n                    },\n                    {\n                        display: \"Not Defined\",\n                        comparisonOperator: \"is\",\n                        value: \"null\"\n                    }\n                ];\n            }\n            return numberOptions;\n        };\n        var getOneToManyOptions = function (type) {\n            var oneToManyOptions = [];\n            if (angular.isUndefined(type)) {\n                type = 'filter';\n            }\n            if (type == 'filter') {\n                oneToManyOptions = [\n                    {\n                        display: \"All Exist In Collection\",\n                        comparisonOperator: \"All\"\n                    },\n                    {\n                        display: \"None Exist In Collection\",\n                        comparisonOperator: \"None\"\n                    },\n                    {\n                        display: \"Some Exist In Collection\",\n                        comparisonOperator: \"One\"\n                    }\n                ];\n            }\n            if (type === 'condition') {\n                oneToManyOptions = [];\n            }\n            return oneToManyOptions;\n        };\n        var getManyToManyOptions = function (type) {\n            var manyToManyOptions = [];\n            if (angular.isUndefined(type)) {\n                type = 'filter';\n            }\n            if (type == 'filter') {\n                manyToManyOptions = [\n                    {\n                        display: \"All Exist In Collection\",\n                        comparisonOperator: \"All\"\n                    },\n                    {\n                        display: \"None Exist In Collection\",\n                        comparisonOperator: \"None\"\n                    },\n                    {\n                        display: \"Some Exist In Collection\",\n                        comparisonOperator: \"One\"\n                    },\n                    {\n                        display: \"Empty\",\n                        comparisonOperator: \"is\",\n                        value: \"null\"\n                    },\n                    {\n                        display: \"Not Empty\",\n                        comparisonOperator: \"is not\",\n                        value: \"null\"\n                    }\n                ];\n            }\n            if (type === 'condition') {\n                manyToManyOptions = [\n                    {\n                        display: \"Empty\",\n                        comparisonOperator: \"is\",\n                        value: \"null\"\n                    },\n                    {\n                        display: \"Not Empty\",\n                        comparisonOperator: \"is not\",\n                        value: \"null\"\n                    }\n                ];\n            }\n            return manyToManyOptions;\n        };\n        var getManyToOneOptions = function (type) {\n            var manyToOneOptions = [];\n            if (angular.isUndefined(type)) {\n                type = 'filter';\n            }\n            if (type == 'filter') {\n                manyToOneOptions = {\n                    drillEntity: {},\n                    hasEntity: {\n                        display: \"Defined\",\n                        comparisonOperator: \"is not\",\n                        value: \"null\"\n                    },\n                    notHasEntity: {\n                        display: \"Not Defined\",\n                        comparisonOperator: \"is\",\n                        value: \"null\"\n                    }\n                };\n            }\n            return manyToOneOptions;\n        };\n        /* Options info end */\n        var linker = function (scope, element, attrs) {\n            /*show the user the value without % symbols as these are reserved*/\n            scope.$watch('selectedFilterProperty.criteriaValue', function (criteriaValue) {\n                if (angular.isDefined(criteriaValue)) {\n                    scope.selectedFilterProperty.criteriaValue = $filter('likeFilter')(criteriaValue);\n                }\n            });\n            scope.$watch('selectedFilterProperty', function (selectedFilterProperty) {\n                if (angular.isDefined(selectedFilterProperty)) {\n                    $log.debug('watchSelectedFilterProperty');\n                    $log.debug(scope.selectedFilterProperty);\n                    /*prepopulate if we have a comparison operator and value*/\n                    if (selectedFilterProperty === null) {\n                        return;\n                    }\n                    if (angular.isDefined(selectedFilterProperty.ormtype)) {\n                        switch (scope.selectedFilterProperty.ormtype) {\n                            case \"boolean\":\n                                scope.conditionOptions = getBooleanOptions();\n                                break;\n                            case \"string\":\n                                scope.conditionOptions = getStringOptions();\n                                scope.selectedConditionChanged = function (selectedFilterProperty) {\n                                    //scope.selectedFilterProperty.criteriaValue = '';\n                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {\n                                        selectedFilterProperty.showCriteriaValue = false;\n                                    }\n                                    else {\n                                        selectedFilterProperty.showCriteriaValue = true;\n                                    }\n                                };\n                                break;\n                            case \"timestamp\":\n                                scope.conditionOptions = getDateOptions();\n                                scope.today = function () {\n                                    if (angular.isDefined(scope.selectedFilterProperty)) {\n                                        scope.selectedFilterProperty.criteriaRangeStart = new Date();\n                                        scope.selectedFilterProperty.criteriaRangeEnd = new Date();\n                                    }\n                                };\n                                scope.clear = function () {\n                                    scope.selectedFilterProperty.criteriaRangeStart = null;\n                                    scope.selectedFilterProperty.criteriaRangeEnd = null;\n                                };\n                                scope.openCalendarStart = function ($event) {\n                                    $event.preventDefault();\n                                    $event.stopPropagation();\n                                    scope.openedCalendarStart = true;\n                                };\n                                scope.openCalendarEnd = function ($event) {\n                                    $event.preventDefault();\n                                    $event.stopPropagation();\n                                    scope.openedCalendarEnd = true;\n                                };\n                                scope.formats = [\n                                    'dd-MMMM-yyyy',\n                                    'yyyy/MM/dd',\n                                    'dd.MM.yyyy',\n                                    'shortDate'\n                                ];\n                                scope.format = scope.formats[1];\n                                scope.selectedConditionChanged = function (selectedFilterProperty) {\n                                    $log.debug('selectedConditionChanged Begin');\n                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;\n                                    //check whether condition is checking for null values in date\n                                    if (angular.isDefined(selectedCondition.dateInfo)) {\n                                        //is condition a calculation\n                                        if (selectedCondition.dateInfo.type === 'calculation') {\n                                            selectedCondition.showCriteriaStart = true;\n                                            selectedCondition.showCriteriaEnd = true;\n                                            selectedCondition.disableCriteriaStart = true;\n                                            selectedCondition.disableCriteriaEnd = true;\n                                            //if item is a calculation of an N number of measure display the measure and number input\n                                            if (angular.isUndefined(selectedCondition.dateInfo.behavior)) {\n                                                $log.debug('Not toDate');\n                                                selectedCondition.showNumberOf = true;\n                                                selectedCondition.conditionDisplay = 'Number of ' + selectedCondition.dateInfo.measureTypeDisplay + ' :';\n                                            }\n                                            else {\n                                                $log.debug('toDate');\n                                                var today = Date.parse('today');\n                                                var todayEOD = today.setHours(23, 59, 59, 999);\n                                                selectedFilterProperty.criteriaRangeEnd = todayEOD;\n                                                switch (selectedCondition.dateInfo.measureType) {\n                                                    case 'd':\n                                                        var dateBOD = Date.parse('today').add(selectedCondition.dateInfo.measureCount).days();\n                                                        dateBOD.setHours(0, 0, 0, 0);\n                                                        selectedFilterProperty.criteriaRangeStart = dateBOD.getTime();\n                                                        break;\n                                                    case 'w':\n                                                        var firstDayOfWeek = Date.today().last().monday();\n                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfWeek.getTime();\n                                                        break;\n                                                    case 'm':\n                                                        var firstDayOfMonth = Date.today().moveToFirstDayOfMonth();\n                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfMonth.getTime();\n                                                        break;\n                                                    case 'q':\n                                                        var month = Date.parse('today').toString('MM');\n                                                        var year = Date.parse('today').toString('yyyy');\n                                                        var quarterMonth = (Math.floor(month / 3) * 3);\n                                                        var firstDayOfQuarter = new Date(year, quarterMonth, 1);\n                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfQuarter.getTime();\n                                                        break;\n                                                    case 'y':\n                                                        var year = Date.parse('today').toString('yyyy');\n                                                        var firstDayOfYear = new Date(year, 0, 1);\n                                                        selectedFilterProperty.criteriaRangeStart = firstDayOfYear.getTime();\n                                                        break;\n                                                }\n                                            }\n                                        }\n                                        if (selectedCondition.dateInfo.type === 'range') {\n                                            selectedCondition.showCriteriaStart = true;\n                                            selectedCondition.showCriteriaEnd = true;\n                                            selectedCondition.disableCriteriaStart = false;\n                                            selectedCondition.disableCriteriaEnd = false;\n                                            selectedCondition.showNumberOf = false;\n                                        }\n                                        if (selectedCondition.dateInfo.type === 'exactDate') {\n                                            selectedCondition.showCriteriaStart = true;\n                                            selectedCondition.showCriteriaEnd = false;\n                                            selectedCondition.disableCriteriaStart = false;\n                                            selectedCondition.disableCriteriaEnd = true;\n                                            selectedCondition.showNumberOf = false;\n                                            selectedCondition.conditionDisplay = '';\n                                            selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);\n                                            selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);\n                                        }\n                                    }\n                                    else {\n                                        selectedCondition.showCriteriaStart = false;\n                                        selectedCondition.showCriteriaEnd = false;\n                                        selectedCondition.showNumberOf = false;\n                                        selectedCondition.conditionDisplay = '';\n                                    }\n                                    $log.debug('selectedConditionChanged End');\n                                    $log.debug('selectedConditionChanged Result');\n                                    $log.debug(selectedCondition);\n                                    $log.debug(selectedFilterProperty);\n                                };\n                                scope.criteriaRangeChanged = function (selectedFilterProperty) {\n                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;\n                                    if (selectedCondition.dateInfo.type === 'calculation') {\n                                        var measureCount = selectedFilterProperty.criteriaNumberOf;\n                                        switch (selectedCondition.dateInfo.measureType) {\n                                            case 'h':\n                                                var today = Date.parse('today');\n                                                selectedFilterProperty.criteriaRangeEnd = today.getTime();\n                                                var todayXHoursAgo = Date.parse('today').add(-(measureCount)).hours();\n                                                selectedFilterProperty.criteriaRangeStart = todayXHoursAgo.getTime();\n                                                break;\n                                            case 'd':\n                                                var lastFullDay = Date.parse('today').add(-1).days();\n                                                lastFullDay.setHours(23, 59, 59, 999);\n                                                selectedFilterProperty.criteriaRangeEnd = lastFullDay.getTime();\n                                                var lastXDaysAgo = Date.parse('today').add(-(measureCount)).days();\n                                                selectedFilterProperty.criteriaRangeStart = lastXDaysAgo.getTime();\n                                                break;\n                                            case 'w':\n                                                var lastFullWeekEnd = Date.today().last().sunday();\n                                                lastFullWeekEnd.setHours(23, 59, 59, 999);\n                                                selectedFilterProperty.criteriaRangeEnd = lastFullWeekEnd.getTime();\n                                                var lastXWeeksAgo = Date.today().last().sunday().add(-(measureCount)).weeks();\n                                                selectedFilterProperty.criteriaRangeStart = lastXWeeksAgo.getTime();\n                                                break;\n                                            case 'm':\n                                                var lastFullMonthEnd = Date.today().add(-1).months().moveToLastDayOfMonth();\n                                                lastFullMonthEnd.setHours(23, 59, 59, 999);\n                                                selectedFilterProperty.criteriaRangeEnd = lastFullMonthEnd.getTime();\n                                                var lastXMonthsAgo = Date.today().add(-1).months().moveToLastDayOfMonth().add(-(measureCount)).months();\n                                                selectedFilterProperty.criteriaRangeStart = lastXMonthsAgo.getTime();\n                                                break;\n                                            case 'q':\n                                                var currentQuarter = Math.floor((Date.parse('today').getMonth() / 3));\n                                                var firstDayOfCurrentQuarter = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);\n                                                var lastDayOfPreviousQuarter = firstDayOfCurrentQuarter.add(-1).days();\n                                                lastDayOfPreviousQuarter.setHours(23, 59, 59, 999);\n                                                selectedFilterProperty.criteriaRangeEnd = lastDayOfPreviousQuarter.getTime();\n                                                var lastXQuartersAgo = new Date(Date.parse('today').getFullYear(), currentQuarter * 3, 1);\n                                                lastXQuartersAgo.add(-(measureCount * 3)).months();\n                                                selectedFilterProperty.criteriaRangeStart = lastXQuartersAgo.getTime();\n                                                break;\n                                            case 'y':\n                                                var lastFullYearEnd = new Date(new Date().getFullYear(), 11, 31).add(-1).years();\n                                                lastFullYearEnd.setHours(23, 59, 59, 999);\n                                                selectedFilterProperty.criteriaRangeEnd = lastFullYearEnd.getTime();\n                                                var lastXYearsAgo = new Date(new Date().getFullYear(), 11, 31).add(-(measureCount) - 1).years();\n                                                selectedFilterProperty.criteriaRangeStart = lastXYearsAgo.getTime();\n                                                break;\n                                        }\n                                    }\n                                    if (selectedCondition.dateInfo.type === 'exactDate') {\n                                        selectedFilterProperty.criteriaRangeStart = selectedFilterProperty.criteriaRangeStart.setHours(0, 0, 0, 0);\n                                        selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeStart).setHours(23, 59, 59, 999);\n                                    }\n                                    if (selectedCondition.dateInfo.type === 'range') {\n                                        if (angular.isDefined(selectedFilterProperty.criteriaRangeStart)) {\n                                            selectedFilterProperty.criteriaRangeStart = new Date(selectedFilterProperty.criteriaRangeStart).setHours(0, 0, 0, 0);\n                                        }\n                                        if (angular.isDefined(selectedFilterProperty.criteriaRangeEnd)) {\n                                            selectedFilterProperty.criteriaRangeEnd = new Date(selectedFilterProperty.criteriaRangeEnd).setHours(23, 59, 59, 999);\n                                        }\n                                    }\n                                    $log.debug('criteriaRangeChanged');\n                                    $log.debug(selectedCondition);\n                                    $log.debug(selectedFilterProperty);\n                                };\n                                break;\n                            case \"big_decimal\":\n                            case \"integer\":\n                            case \"float\":\n                                scope.conditionOptions = getNumberOptions();\n                                scope.criteriaRangeChanged = function (selectedFilterProperty) {\n                                    var selectedCondition = selectedFilterProperty.selectedCriteriaType;\n                                };\n                                scope.selectedConditionChanged = function (selectedFilterProperty) {\n                                    selectedFilterProperty.showCriteriaValue = true;\n                                    //check whether the type is a range\n                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.type)) {\n                                        selectedFilterProperty.showCriteriaValue = false;\n                                        selectedFilterProperty.selectedCriteriaType.showCriteriaStart = true;\n                                        selectedFilterProperty.selectedCriteriaType.showCriteriaEnd = true;\n                                    }\n                                    //is null or is not null\n                                    if (angular.isDefined(selectedFilterProperty.selectedCriteriaType.value)) {\n                                        selectedFilterProperty.showCriteriaValue = false;\n                                    }\n                                };\n                                break;\n                        }\n                    }\n                    if (angular.isDefined(scope.selectedFilterProperty.fieldtype)) {\n                        switch (scope.selectedFilterProperty.fieldtype) {\n                            case \"many-to-one\":\n                                scope.conditionOptions = getManyToOneOptions(scope.comparisonType);\n                                $log.debug('many-to-one');\n                                $log.debug(scope.selectedFilterProperty);\n                                $log.debug(scope.filterPropertiesList);\n                                if (angular.isUndefined(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier])) {\n                                    var filterPropertiesPromise = $slatwall.getFilterPropertiesByBaseEntityName(scope.selectedFilterProperty.cfc);\n                                    filterPropertiesPromise.then(function (value) {\n                                        scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier] = value;\n                                        metadataService.formatPropertiesList(scope.filterPropertiesList[scope.selectedFilterProperty.propertyIdentifier], scope.selectedFilterProperty.propertyIdentifier);\n                                    }, function (reason) {\n                                    });\n                                }\n                                break;\n                            case \"many-to-many\":\n                            case \"one-to-many\":\n                                scope.manyToManyOptions = getManyToManyOptions();\n                                scope.oneToManyOptions = getOneToManyOptions();\n                                var existingCollectionsPromise = $slatwall.getExistingCollectionsByBaseEntity(selectedFilterProperty.cfc);\n                                existingCollectionsPromise.then(function (value) {\n                                    scope.collectionOptions = value.data;\n                                    if (angular.isDefined(scope.workflowCondition.collectionID)) {\n                                        for (var i in scope.collectionOptions) {\n                                            if (scope.collectionOptions[i].collectionID === scope.workflowCondition.collectionID) {\n                                                scope.selectedFilterProperty.selectedCollection = scope.collectionOptions[i];\n                                            }\n                                        }\n                                        for (var i in scope.oneToManyOptions) {\n                                            if (scope.oneToManyOptions[i].comparisonOperator === scope.workflowCondition.criteria) {\n                                                scope.selectedFilterProperty.selectedCriteriaType = scope.oneToManyOptions[i];\n                                            }\n                                        }\n                                    }\n                                });\n                                break;\n                        }\n                    }\n                    $log.debug('workflowCondition');\n                    $log.debug(scope.workflowCondition);\n                    angular.forEach(scope.conditionOptions, function (conditionOption) {\n                        if (conditionOption.display == scope.workflowCondition.conditionDisplay) {\n                            scope.selectedFilterProperty.selectedCriteriaType = conditionOption;\n                            scope.selectedFilterProperty.criteriaValue = scope.workflowCondition.value;\n                            if (angular.isDefined(scope.selectedFilterProperty.selectedCriteriaType.dateInfo) && angular.isDefined(scope.workflowCondition.value) && scope.workflowCondition.value.length) {\n                                var dateRangeArray = scope.workflowCondition.value.split(\"-\");\n                                scope.selectedFilterProperty.criteriaRangeStart = new Date(parseInt(dateRangeArray[0]));\n                                scope.selectedFilterProperty.criteriaRangeEnd = new Date(parseInt(dateRangeArray[1]));\n                            }\n                            if (angular.isDefined(scope.workflowCondition.criteriaNumberOf)) {\n                                scope.selectedFilterProperty.criteriaNumberOf = scope.workflowCondition.criteriaNumberOf;\n                            }\n                            if (angular.isDefined(scope.selectedConditionChanged)) {\n                                scope.selectedConditionChanged(scope.selectedFilterProperty);\n                            }\n                        }\n                    });\n                    $log.debug('templateLoader');\n                    $log.debug(selectedFilterProperty);\n                    var templateLoader = getTemplate(selectedFilterProperty);\n                    var promise = templateLoader.success(function (html) {\n                        element.html(html);\n                        $compile(element.contents())(scope);\n                    });\n                }\n            });\n            scope.selectedCriteriaChanged = function (selectedCriteria) {\n                $log.debug(selectedCriteria);\n                //update breadcrumbs as array of filterpropertylist keys\n                $log.debug(scope.selectedFilterProperty);\n                var breadCrumb = {\n                    entityAlias: scope.selectedFilterProperty.name,\n                    cfc: scope.selectedFilterProperty.cfc,\n                    propertyIdentifier: scope.selectedFilterProperty.propertyIdentifier\n                };\n                scope.workflowCondition.breadCrumbs.push(breadCrumb);\n                //populate editfilterinfo with the current level of the filter property we are inspecting by pointing to the new scope key\n                scope.selectedFilterPropertyChanged({ selectedFilterProperty: scope.selectedFilterProperty.selectedCriteriaType });\n                //update criteria to display the condition of the new critera we have selected\n            };\n        };\n        return {\n            restrict: 'A',\n            scope: {\n                workflowCondition: \"=\",\n                selectedFilterProperty: \"=\",\n                filterPropertiesList: \"=\",\n                selectedFilterPropertyChanged: \"&\"\n            },\n            link: linker\n        };\n    }\n]);\n\n//# sourceMappingURL=../../directives/collection/swconditioncriteria.js.map"],"file":"directives/collection/swconditioncriteria.js","sourceRoot":"/source/"}