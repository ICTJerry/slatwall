{"version":3,"names":[],"mappings":"","sources":["directives/collection/swdisplayoptions.js"],"sourcesContent":["angular.module('slatwalladmin').directive('swDisplayOptions', [\n    '$http',\n    '$compile',\n    '$templateCache',\n    '$log',\n    '$slatwall',\n    'collectionService',\n    'collectionPartialsPath',\n    function ($http, $compile, $templateCache, $log, $slatwall, collectionService, collectionPartialsPath) {\n        return {\n            restrict: 'E',\n            transclude: true,\n            scope: {\n                orderBy: \"=\",\n                columns: '=',\n                propertiesList: \"=\",\n                saveCollection: \"&\",\n                baseEntityAlias: \"=\",\n                baseEntityName: \"=\"\n            },\n            templateUrl: collectionPartialsPath + \"displayoptions.html\",\n            controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {\n                $log.debug('display options initialize');\n                this.removeColumn = function (columnIndex) {\n                    $log.debug('parent remove column');\n                    $log.debug($scope.columns);\n                    if ($scope.columns.length) {\n                        $scope.columns.splice(columnIndex, 1);\n                    }\n                };\n                this.getPropertiesList = function () {\n                    return $scope.propertiesList;\n                };\n                $scope.addDisplayDialog = {\n                    isOpen: false,\n                    toggleDisplayDialog: function () {\n                        $scope.addDisplayDialog.isOpen = !$scope.addDisplayDialog.isOpen;\n                    }\n                };\n                var getTitleFromPropertyIdentifier = function (propertyIdentifier) {\n                    var baseEntityCfcName = $scope.baseEntityName.replace('Slatwall', '').charAt(0).toLowerCase() + $scope.baseEntityName.replace('Slatwall', '').slice(1);\n                    var title = '';\n                    var propertyIdentifierArray = propertyIdentifier.split('.');\n                    var currentEntity;\n                    var currentEntityInstance;\n                    var prefix = 'entity.';\n                    angular.forEach(propertyIdentifierArray, function (propertyIdentifierItem, key) {\n                        //pass over the initial item\n                        if (key !== 0) {\n                            if (key === 1) {\n                                currentEntityInstance = $slatwall['new' + $scope.baseEntityName.replace('Slatwall', '')]();\n                                currentEntity = currentEntityInstance.metaData[propertyIdentifierArray[key]];\n                                title += $slatwall.getRBKey(prefix + baseEntityCfcName + '.' + propertyIdentifierItem);\n                            }\n                            else {\n                                var currentEntityInstance = $slatwall['new' + currentEntity.cfc.charAt(0).toUpperCase() + currentEntity.cfc.slice(1)]();\n                                currentEntity = currentEntityInstance.metaData[propertyIdentifierArray[key]];\n                                title += $slatwall.getRBKey(prefix + currentEntityInstance.metaData.className + '.' + currentEntity.name);\n                            }\n                            if (key < propertyIdentifierArray.length - 1) {\n                                title += ' | ';\n                            }\n                        }\n                    });\n                    return title;\n                };\n                $scope.addColumn = function (selectedProperty, closeDialog) {\n                    $log.debug('add Column');\n                    $log.debug(selectedProperty);\n                    if (selectedProperty.$$group === 'simple' || 'attribute') {\n                        $log.debug($scope.columns);\n                        if (angular.isDefined(selectedProperty)) {\n                            var column = {};\n                            column.title = getTitleFromPropertyIdentifier(selectedProperty.propertyIdentifier);\n                            column.propertyIdentifier = selectedProperty.propertyIdentifier;\n                            column.isVisible = true;\n                            column.isDeletable = true;\n                            //only add attributeid if the selectedProperty is attributeid\n                            if (angular.isDefined(selectedProperty.attributeID)) {\n                                column.attributeID = selectedProperty.attributeID;\n                                column.attributeSetObject = selectedProperty.attributeSetObject;\n                            }\n                            $scope.columns.push(column);\n                            $scope.saveCollection();\n                            if (angular.isDefined(closeDialog) && closeDialog === true) {\n                                $scope.addDisplayDialog.toggleDisplayDialog();\n                            }\n                        }\n                    }\n                };\n                $scope.selectBreadCrumb = function (breadCrumbIndex) {\n                    //splice out array items above index\n                    var removeCount = $scope.breadCrumbs.length - 1 - breadCrumbIndex;\n                    $scope.breadCrumbs.splice(breadCrumbIndex + 1, removeCount);\n                    $scope.selectedPropertyChanged(null);\n                };\n                var unbindBaseEntityAlias = $scope.$watch('baseEntityAlias', function (newValue, oldValue) {\n                    if (newValue !== oldValue) {\n                        $scope.breadCrumbs = [{\n                            entityAlias: $scope.baseEntityAlias,\n                            cfc: $scope.baseEntityAlias,\n                            propertyIdentifier: $scope.baseEntityAlias\n                        }];\n                        unbindBaseEntityAlias();\n                    }\n                });\n                $scope.selectedPropertyChanged = function (selectedProperty) {\n                    // drill down or select field?\n                    $log.debug('selectedPropertyChanged');\n                    $log.debug(selectedProperty);\n                    $scope.selectedProperty = selectedProperty;\n                };\n                jQuery(function ($) {\n                    var panelList = angular.element($element).children('ul');\n                    panelList.sortable({\n                        // Only make the .panel-heading child elements support dragging.\n                        // Omit this to make then entire <li>...</li> draggable.\n                        handle: '.s-pannel-name',\n                        update: function (event, ui) {\n                            var tempColumnsArray = [];\n                            $('.s-pannel-name', panelList).each(function (index, elem) {\n                                var newIndex = $(elem).attr('j-column-index');\n                                var columnItem = $scope.columns[newIndex];\n                                tempColumnsArray.push(columnItem);\n                            });\n                            $scope.$apply(function () {\n                                $scope.columns = tempColumnsArray;\n                            });\n                            $scope.saveCollection();\n                        }\n                    });\n                });\n                /*var unbindBaseEntityAlaisWatchListener = scope.$watch('baseEntityAlias',function(){\n                     $(\"select\").selectBoxIt();\n                     unbindBaseEntityAlaisWatchListener();\n                });*/\n            }]\n        };\n    }\n]);\n\n//# sourceMappingURL=../../directives/collection/swdisplayoptions.js.map"],"file":"directives/collection/swdisplayoptions.js","sourceRoot":"/source/"}